// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package local_project_demo.csvreadnfilter_0_1;

import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.DataQuality;
import routines.Relational;
import routines.Mathematical;
import routines.SQLike;
import routines.Numeric;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.DQTechnical;
import routines.MDM;
import routines.StringHandling;
import routines.TalendDate;
import routines.DqStringHandling;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: CSVReadNFilter Purpose: Read some csv data and FIlter<br>
 * Description: <br>
 * 
 * @author user@talend.com
 * @version 8.0.1.20211109_1610
 * @status
 */
public class CSVReadNFilter implements TalendJob {
	static {
		System.setProperty("TalendJob.log", "CSVReadNFilter.log");
	}

	private static org.apache.logging.log4j.Logger log = org.apache.logging.log4j.LogManager
			.getLogger(CSVReadNFilter.class);

	protected static void logIgnoredError(String message, Throwable cause) {
		log.error(message, cause);

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

		// if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if (NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "CSVReadNFilter";
	private final String projectName = "LOCAL_PROJECT_DEMO";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	public void setDataSourceReferences(List serviceReferences) throws Exception {

		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();

		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils
				.getServices(serviceReferences, javax.sql.DataSource.class).entrySet()) {
			dataSources.put(entry.getKey(), entry.getValue());
			talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					CSVReadNFilter.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(CSVReadNFilter.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tDBConnection_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tReplicate_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBConnection_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBConnection_1 begin ] start
				 */

				ok_Hash.put("tDBConnection_1", false);
				start_Hash.put("tDBConnection_1", System.currentTimeMillis());

				currentComponent = "tDBConnection_1";

				int tos_count_tDBConnection_1 = 0;

				if (log.isDebugEnabled())
					log.debug("tDBConnection_1 - " + ("Start to work."));
				if (log.isDebugEnabled()) {
					class BytesLimit65535_tDBConnection_1 {
						public void limitLog4jByte() throws Exception {
							StringBuilder log4jParamters_tDBConnection_1 = new StringBuilder();
							log4jParamters_tDBConnection_1.append("Parameters:");
							log4jParamters_tDBConnection_1.append("DB_VERSION" + " = " + "MYSQL_8");
							log4jParamters_tDBConnection_1.append(" | ");
							log4jParamters_tDBConnection_1.append("HOST" + " = " + "\"localhost\"");
							log4jParamters_tDBConnection_1.append(" | ");
							log4jParamters_tDBConnection_1.append("PORT" + " = " + "\"3306\"");
							log4jParamters_tDBConnection_1.append(" | ");
							log4jParamters_tDBConnection_1.append("DBNAME" + " = " + "\"talend\"");
							log4jParamters_tDBConnection_1.append(" | ");
							log4jParamters_tDBConnection_1
									.append("PROPERTIES" + " = " + "\"noDatetimeStringSync=true\"");
							log4jParamters_tDBConnection_1.append(" | ");
							log4jParamters_tDBConnection_1.append("USER" + " = " + "\"root\"");
							log4jParamters_tDBConnection_1.append(" | ");
							log4jParamters_tDBConnection_1.append("PASS" + " = " + String.valueOf(
									"enc:routine.encryption.key.v1:KGvO2SVJYRVDsP8WwE8/CSarLaf88C+D+YICmqT6qAT1kaP/MA==")
									.substring(0, 4) + "...");
							log4jParamters_tDBConnection_1.append(" | ");
							log4jParamters_tDBConnection_1.append("USE_SHARED_CONNECTION" + " = " + "false");
							log4jParamters_tDBConnection_1.append(" | ");
							log4jParamters_tDBConnection_1.append("SPECIFY_DATASOURCE_ALIAS" + " = " + "false");
							log4jParamters_tDBConnection_1.append(" | ");
							log4jParamters_tDBConnection_1.append("AUTO_COMMIT" + " = " + "false");
							log4jParamters_tDBConnection_1.append(" | ");
							log4jParamters_tDBConnection_1.append("UNIFIED_COMPONENTS" + " = " + "tMysqlConnection");
							log4jParamters_tDBConnection_1.append(" | ");
							if (log.isDebugEnabled())
								log.debug("tDBConnection_1 - " + (log4jParamters_tDBConnection_1));
						}
					}
					new BytesLimit65535_tDBConnection_1().limitLog4jByte();
				}

				String properties_tDBConnection_1 = "noDatetimeStringSync=true";
				if (properties_tDBConnection_1 == null || properties_tDBConnection_1.trim().length() == 0) {
					properties_tDBConnection_1 = "rewriteBatchedStatements=true&allowLoadLocalInfile=true";
				} else {
					if (!properties_tDBConnection_1.contains("rewriteBatchedStatements=")) {
						properties_tDBConnection_1 += "&rewriteBatchedStatements=true";
					}

					if (!properties_tDBConnection_1.contains("allowLoadLocalInfile=")) {
						properties_tDBConnection_1 += "&allowLoadLocalInfile=true";
					}
				}

				String url_tDBConnection_1 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "talend" + "?"
						+ properties_tDBConnection_1;
				String dbUser_tDBConnection_1 = "root";

				final String decryptedPassword_tDBConnection_1 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:B5nMdj/W7UYfjNwaQLiL4esdKzX0dOytrJ5WliDIx7UzVOaL1g==");
				String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;

				java.sql.Connection conn_tDBConnection_1 = null;

				String driverClass_tDBConnection_1 = "com.mysql.cj.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBConnection_1 = java.lang.Class.forName(driverClass_tDBConnection_1);
				globalMap.put("driverClass_tDBConnection_1", driverClass_tDBConnection_1);

				log.debug("tDBConnection_1 - Driver ClassName: " + driverClass_tDBConnection_1 + ".");

				log.debug("tDBConnection_1 - Connection attempt to '" + url_tDBConnection_1 + "' with the username '"
						+ dbUser_tDBConnection_1 + "'.");

				conn_tDBConnection_1 = java.sql.DriverManager.getConnection(url_tDBConnection_1, dbUser_tDBConnection_1,
						dbPwd_tDBConnection_1);
				log.debug("tDBConnection_1 - Connection to '" + url_tDBConnection_1 + "' has succeeded.");

				globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
				if (null != conn_tDBConnection_1) {

					log.debug("tDBConnection_1 - Connection is set auto commit to 'false'.");
					conn_tDBConnection_1.setAutoCommit(false);
				}

				globalMap.put("db_tDBConnection_1", "talend");

				/**
				 * [tDBConnection_1 begin ] stop
				 */

				/**
				 * [tDBConnection_1 main ] start
				 */

				currentComponent = "tDBConnection_1";

				tos_count_tDBConnection_1++;

				/**
				 * [tDBConnection_1 main ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_begin ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 process_data_begin ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_end ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 process_data_end ] stop
				 */

				/**
				 * [tDBConnection_1 end ] start
				 */

				currentComponent = "tDBConnection_1";

				if (log.isDebugEnabled())
					log.debug("tDBConnection_1 - " + ("Done."));

				ok_Hash.put("tDBConnection_1", true);
				end_Hash.put("tDBConnection_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tFileInputDelimited_1Process(globalMap);

				/**
				 * [tDBConnection_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			if (!(e instanceof TalendException)) {
				log.fatal(currentComponent + " " + e.getMessage(), e);
			}

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBConnection_1 finally ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}

	public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_DEMO_CSVReadNFilter = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer ID;

		public Integer getID() {
			return this.ID;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public Integer Age;

		public Integer getAge() {
			return this.Age;
		}

		public String Photo;

		public String getPhoto() {
			return this.Photo;
		}

		public String Nationality;

		public String getNationality() {
			return this.Nationality;
		}

		public String Flag;

		public String getFlag() {
			return this.Flag;
		}

		public Integer Overall;

		public Integer getOverall() {
			return this.Overall;
		}

		public Integer Potential;

		public Integer getPotential() {
			return this.Potential;
		}

		public String Club;

		public String getClub() {
			return this.Club;
		}

		public String Club_Logo;

		public String getClub_Logo() {
			return this.Club_Logo;
		}

		public String Value;

		public String getValue() {
			return this.Value;
		}

		public String Wage;

		public String getWage() {
			return this.Wage;
		}

		public Integer Special;

		public Integer getSpecial() {
			return this.Special;
		}

		public String Preferred_Foot;

		public String getPreferred_Foot() {
			return this.Preferred_Foot;
		}

		public Integer International_Reputation;

		public Integer getInternational_Reputation() {
			return this.International_Reputation;
		}

		public Integer Weak_Foot;

		public Integer getWeak_Foot() {
			return this.Weak_Foot;
		}

		public Integer Skill_Moves;

		public Integer getSkill_Moves() {
			return this.Skill_Moves;
		}

		public String Work_Rate;

		public String getWork_Rate() {
			return this.Work_Rate;
		}

		public String Body_Type;

		public String getBody_Type() {
			return this.Body_Type;
		}

		public String Real_Face;

		public String getReal_Face() {
			return this.Real_Face;
		}

		public String Position;

		public String getPosition() {
			return this.Position;
		}

		public Integer Jersey_Number;

		public Integer getJersey_Number() {
			return this.Jersey_Number;
		}

		public String Joined;

		public String getJoined() {
			return this.Joined;
		}

		public String Loaned_From;

		public String getLoaned_From() {
			return this.Loaned_From;
		}

		public String Contract_Valid_Until;

		public String getContract_Valid_Until() {
			return this.Contract_Valid_Until;
		}

		public Integer Height;

		public Integer getHeight() {
			return this.Height;
		}

		public String Weight;

		public String getWeight() {
			return this.Weight;
		}

		public String LS;

		public String getLS() {
			return this.LS;
		}

		public String ST;

		public String getST() {
			return this.ST;
		}

		public String RS;

		public String getRS() {
			return this.RS;
		}

		public String LW;

		public String getLW() {
			return this.LW;
		}

		public String LF;

		public String getLF() {
			return this.LF;
		}

		public String CF;

		public String getCF() {
			return this.CF;
		}

		public String RF;

		public String getRF() {
			return this.RF;
		}

		public String RW;

		public String getRW() {
			return this.RW;
		}

		public String LAM;

		public String getLAM() {
			return this.LAM;
		}

		public String CAM;

		public String getCAM() {
			return this.CAM;
		}

		public String RAM;

		public String getRAM() {
			return this.RAM;
		}

		public String LM;

		public String getLM() {
			return this.LM;
		}

		public String LCM;

		public String getLCM() {
			return this.LCM;
		}

		public String CM;

		public String getCM() {
			return this.CM;
		}

		public String RCM;

		public String getRCM() {
			return this.RCM;
		}

		public String RM;

		public String getRM() {
			return this.RM;
		}

		public String LWB;

		public String getLWB() {
			return this.LWB;
		}

		public String LDM;

		public String getLDM() {
			return this.LDM;
		}

		public String CDM;

		public String getCDM() {
			return this.CDM;
		}

		public String RDM;

		public String getRDM() {
			return this.RDM;
		}

		public String RWB;

		public String getRWB() {
			return this.RWB;
		}

		public String LB;

		public String getLB() {
			return this.LB;
		}

		public String LCB;

		public String getLCB() {
			return this.LCB;
		}

		public String CB;

		public String getCB() {
			return this.CB;
		}

		public String RCB;

		public String getRCB() {
			return this.RCB;
		}

		public String RB;

		public String getRB() {
			return this.RB;
		}

		public String Crossing;

		public String getCrossing() {
			return this.Crossing;
		}

		public Integer Finishing;

		public Integer getFinishing() {
			return this.Finishing;
		}

		public Integer HeadingAccuracy;

		public Integer getHeadingAccuracy() {
			return this.HeadingAccuracy;
		}

		public Integer ShortPassing;

		public Integer getShortPassing() {
			return this.ShortPassing;
		}

		public Integer Volleys;

		public Integer getVolleys() {
			return this.Volleys;
		}

		public Integer Dribbling;

		public Integer getDribbling() {
			return this.Dribbling;
		}

		public Integer Curve;

		public Integer getCurve() {
			return this.Curve;
		}

		public Integer FKAccuracy;

		public Integer getFKAccuracy() {
			return this.FKAccuracy;
		}

		public Integer LongPassing;

		public Integer getLongPassing() {
			return this.LongPassing;
		}

		public Integer BallControl;

		public Integer getBallControl() {
			return this.BallControl;
		}

		public Integer Acceleration;

		public Integer getAcceleration() {
			return this.Acceleration;
		}

		public Integer SprintSpeed;

		public Integer getSprintSpeed() {
			return this.SprintSpeed;
		}

		public Integer Agility;

		public Integer getAgility() {
			return this.Agility;
		}

		public Integer Reactions;

		public Integer getReactions() {
			return this.Reactions;
		}

		public Integer Balance;

		public Integer getBalance() {
			return this.Balance;
		}

		public Integer ShotPower;

		public Integer getShotPower() {
			return this.ShotPower;
		}

		public Integer Jumping;

		public Integer getJumping() {
			return this.Jumping;
		}

		public Integer Stamina;

		public Integer getStamina() {
			return this.Stamina;
		}

		public Integer Strength;

		public Integer getStrength() {
			return this.Strength;
		}

		public Integer LongShots;

		public Integer getLongShots() {
			return this.LongShots;
		}

		public Integer Aggression;

		public Integer getAggression() {
			return this.Aggression;
		}

		public Integer Interceptions;

		public Integer getInterceptions() {
			return this.Interceptions;
		}

		public Integer Positioning;

		public Integer getPositioning() {
			return this.Positioning;
		}

		public Integer Vision;

		public Integer getVision() {
			return this.Vision;
		}

		public Integer Penalties;

		public Integer getPenalties() {
			return this.Penalties;
		}

		public Integer Composure;

		public Integer getComposure() {
			return this.Composure;
		}

		public Integer Marking;

		public Integer getMarking() {
			return this.Marking;
		}

		public Integer StandingTackle;

		public Integer getStandingTackle() {
			return this.StandingTackle;
		}

		public Integer SlidingTackle;

		public Integer getSlidingTackle() {
			return this.SlidingTackle;
		}

		public Integer GKDiving;

		public Integer getGKDiving() {
			return this.GKDiving;
		}

		public Integer GKHandling;

		public Integer getGKHandling() {
			return this.GKHandling;
		}

		public Integer GKKicking;

		public Integer getGKKicking() {
			return this.GKKicking;
		}

		public Integer GKPositioning;

		public Integer getGKPositioning() {
			return this.GKPositioning;
		}

		public Integer GKReflexes;

		public Integer getGKReflexes() {
			return this.GKReflexes;
		}

		public Integer Release_Clause;

		public Integer getRelease_Clause() {
			return this.Release_Clause;
		}

		public String Column88;

		public String getColumn88() {
			return this.Column88;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row9Struct other = (row9Struct) obj;

			if (this.ID == null) {
				if (other.ID != null)
					return false;

			} else if (!this.ID.equals(other.ID))

				return false;

			return true;
		}

		public void copyDataTo(row9Struct other) {

			other.ID = this.ID;
			other.Name = this.Name;
			other.Age = this.Age;
			other.Photo = this.Photo;
			other.Nationality = this.Nationality;
			other.Flag = this.Flag;
			other.Overall = this.Overall;
			other.Potential = this.Potential;
			other.Club = this.Club;
			other.Club_Logo = this.Club_Logo;
			other.Value = this.Value;
			other.Wage = this.Wage;
			other.Special = this.Special;
			other.Preferred_Foot = this.Preferred_Foot;
			other.International_Reputation = this.International_Reputation;
			other.Weak_Foot = this.Weak_Foot;
			other.Skill_Moves = this.Skill_Moves;
			other.Work_Rate = this.Work_Rate;
			other.Body_Type = this.Body_Type;
			other.Real_Face = this.Real_Face;
			other.Position = this.Position;
			other.Jersey_Number = this.Jersey_Number;
			other.Joined = this.Joined;
			other.Loaned_From = this.Loaned_From;
			other.Contract_Valid_Until = this.Contract_Valid_Until;
			other.Height = this.Height;
			other.Weight = this.Weight;
			other.LS = this.LS;
			other.ST = this.ST;
			other.RS = this.RS;
			other.LW = this.LW;
			other.LF = this.LF;
			other.CF = this.CF;
			other.RF = this.RF;
			other.RW = this.RW;
			other.LAM = this.LAM;
			other.CAM = this.CAM;
			other.RAM = this.RAM;
			other.LM = this.LM;
			other.LCM = this.LCM;
			other.CM = this.CM;
			other.RCM = this.RCM;
			other.RM = this.RM;
			other.LWB = this.LWB;
			other.LDM = this.LDM;
			other.CDM = this.CDM;
			other.RDM = this.RDM;
			other.RWB = this.RWB;
			other.LB = this.LB;
			other.LCB = this.LCB;
			other.CB = this.CB;
			other.RCB = this.RCB;
			other.RB = this.RB;
			other.Crossing = this.Crossing;
			other.Finishing = this.Finishing;
			other.HeadingAccuracy = this.HeadingAccuracy;
			other.ShortPassing = this.ShortPassing;
			other.Volleys = this.Volleys;
			other.Dribbling = this.Dribbling;
			other.Curve = this.Curve;
			other.FKAccuracy = this.FKAccuracy;
			other.LongPassing = this.LongPassing;
			other.BallControl = this.BallControl;
			other.Acceleration = this.Acceleration;
			other.SprintSpeed = this.SprintSpeed;
			other.Agility = this.Agility;
			other.Reactions = this.Reactions;
			other.Balance = this.Balance;
			other.ShotPower = this.ShotPower;
			other.Jumping = this.Jumping;
			other.Stamina = this.Stamina;
			other.Strength = this.Strength;
			other.LongShots = this.LongShots;
			other.Aggression = this.Aggression;
			other.Interceptions = this.Interceptions;
			other.Positioning = this.Positioning;
			other.Vision = this.Vision;
			other.Penalties = this.Penalties;
			other.Composure = this.Composure;
			other.Marking = this.Marking;
			other.StandingTackle = this.StandingTackle;
			other.SlidingTackle = this.SlidingTackle;
			other.GKDiving = this.GKDiving;
			other.GKHandling = this.GKHandling;
			other.GKKicking = this.GKKicking;
			other.GKPositioning = this.GKPositioning;
			other.GKReflexes = this.GKReflexes;
			other.Release_Clause = this.Release_Clause;
			other.Column88 = this.Column88;

		}

		public void copyKeysDataTo(row9Struct other) {

			other.ID = this.ID;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter.length == 0) {
						commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter.length == 0) {
						commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_DEMO_CSVReadNFilter) {

				try {

					int length = 0;

					this.ID = readInteger(dis);

					this.Name = readString(dis);

					this.Age = readInteger(dis);

					this.Photo = readString(dis);

					this.Nationality = readString(dis);

					this.Flag = readString(dis);

					this.Overall = readInteger(dis);

					this.Potential = readInteger(dis);

					this.Club = readString(dis);

					this.Club_Logo = readString(dis);

					this.Value = readString(dis);

					this.Wage = readString(dis);

					this.Special = readInteger(dis);

					this.Preferred_Foot = readString(dis);

					this.International_Reputation = readInteger(dis);

					this.Weak_Foot = readInteger(dis);

					this.Skill_Moves = readInteger(dis);

					this.Work_Rate = readString(dis);

					this.Body_Type = readString(dis);

					this.Real_Face = readString(dis);

					this.Position = readString(dis);

					this.Jersey_Number = readInteger(dis);

					this.Joined = readString(dis);

					this.Loaned_From = readString(dis);

					this.Contract_Valid_Until = readString(dis);

					this.Height = readInteger(dis);

					this.Weight = readString(dis);

					this.LS = readString(dis);

					this.ST = readString(dis);

					this.RS = readString(dis);

					this.LW = readString(dis);

					this.LF = readString(dis);

					this.CF = readString(dis);

					this.RF = readString(dis);

					this.RW = readString(dis);

					this.LAM = readString(dis);

					this.CAM = readString(dis);

					this.RAM = readString(dis);

					this.LM = readString(dis);

					this.LCM = readString(dis);

					this.CM = readString(dis);

					this.RCM = readString(dis);

					this.RM = readString(dis);

					this.LWB = readString(dis);

					this.LDM = readString(dis);

					this.CDM = readString(dis);

					this.RDM = readString(dis);

					this.RWB = readString(dis);

					this.LB = readString(dis);

					this.LCB = readString(dis);

					this.CB = readString(dis);

					this.RCB = readString(dis);

					this.RB = readString(dis);

					this.Crossing = readString(dis);

					this.Finishing = readInteger(dis);

					this.HeadingAccuracy = readInteger(dis);

					this.ShortPassing = readInteger(dis);

					this.Volleys = readInteger(dis);

					this.Dribbling = readInteger(dis);

					this.Curve = readInteger(dis);

					this.FKAccuracy = readInteger(dis);

					this.LongPassing = readInteger(dis);

					this.BallControl = readInteger(dis);

					this.Acceleration = readInteger(dis);

					this.SprintSpeed = readInteger(dis);

					this.Agility = readInteger(dis);

					this.Reactions = readInteger(dis);

					this.Balance = readInteger(dis);

					this.ShotPower = readInteger(dis);

					this.Jumping = readInteger(dis);

					this.Stamina = readInteger(dis);

					this.Strength = readInteger(dis);

					this.LongShots = readInteger(dis);

					this.Aggression = readInteger(dis);

					this.Interceptions = readInteger(dis);

					this.Positioning = readInteger(dis);

					this.Vision = readInteger(dis);

					this.Penalties = readInteger(dis);

					this.Composure = readInteger(dis);

					this.Marking = readInteger(dis);

					this.StandingTackle = readInteger(dis);

					this.SlidingTackle = readInteger(dis);

					this.GKDiving = readInteger(dis);

					this.GKHandling = readInteger(dis);

					this.GKKicking = readInteger(dis);

					this.GKPositioning = readInteger(dis);

					this.GKReflexes = readInteger(dis);

					this.Release_Clause = readInteger(dis);

					this.Column88 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_DEMO_CSVReadNFilter) {

				try {

					int length = 0;

					this.ID = readInteger(dis);

					this.Name = readString(dis);

					this.Age = readInteger(dis);

					this.Photo = readString(dis);

					this.Nationality = readString(dis);

					this.Flag = readString(dis);

					this.Overall = readInteger(dis);

					this.Potential = readInteger(dis);

					this.Club = readString(dis);

					this.Club_Logo = readString(dis);

					this.Value = readString(dis);

					this.Wage = readString(dis);

					this.Special = readInteger(dis);

					this.Preferred_Foot = readString(dis);

					this.International_Reputation = readInteger(dis);

					this.Weak_Foot = readInteger(dis);

					this.Skill_Moves = readInteger(dis);

					this.Work_Rate = readString(dis);

					this.Body_Type = readString(dis);

					this.Real_Face = readString(dis);

					this.Position = readString(dis);

					this.Jersey_Number = readInteger(dis);

					this.Joined = readString(dis);

					this.Loaned_From = readString(dis);

					this.Contract_Valid_Until = readString(dis);

					this.Height = readInteger(dis);

					this.Weight = readString(dis);

					this.LS = readString(dis);

					this.ST = readString(dis);

					this.RS = readString(dis);

					this.LW = readString(dis);

					this.LF = readString(dis);

					this.CF = readString(dis);

					this.RF = readString(dis);

					this.RW = readString(dis);

					this.LAM = readString(dis);

					this.CAM = readString(dis);

					this.RAM = readString(dis);

					this.LM = readString(dis);

					this.LCM = readString(dis);

					this.CM = readString(dis);

					this.RCM = readString(dis);

					this.RM = readString(dis);

					this.LWB = readString(dis);

					this.LDM = readString(dis);

					this.CDM = readString(dis);

					this.RDM = readString(dis);

					this.RWB = readString(dis);

					this.LB = readString(dis);

					this.LCB = readString(dis);

					this.CB = readString(dis);

					this.RCB = readString(dis);

					this.RB = readString(dis);

					this.Crossing = readString(dis);

					this.Finishing = readInteger(dis);

					this.HeadingAccuracy = readInteger(dis);

					this.ShortPassing = readInteger(dis);

					this.Volleys = readInteger(dis);

					this.Dribbling = readInteger(dis);

					this.Curve = readInteger(dis);

					this.FKAccuracy = readInteger(dis);

					this.LongPassing = readInteger(dis);

					this.BallControl = readInteger(dis);

					this.Acceleration = readInteger(dis);

					this.SprintSpeed = readInteger(dis);

					this.Agility = readInteger(dis);

					this.Reactions = readInteger(dis);

					this.Balance = readInteger(dis);

					this.ShotPower = readInteger(dis);

					this.Jumping = readInteger(dis);

					this.Stamina = readInteger(dis);

					this.Strength = readInteger(dis);

					this.LongShots = readInteger(dis);

					this.Aggression = readInteger(dis);

					this.Interceptions = readInteger(dis);

					this.Positioning = readInteger(dis);

					this.Vision = readInteger(dis);

					this.Penalties = readInteger(dis);

					this.Composure = readInteger(dis);

					this.Marking = readInteger(dis);

					this.StandingTackle = readInteger(dis);

					this.SlidingTackle = readInteger(dis);

					this.GKDiving = readInteger(dis);

					this.GKHandling = readInteger(dis);

					this.GKKicking = readInteger(dis);

					this.GKPositioning = readInteger(dis);

					this.GKReflexes = readInteger(dis);

					this.Release_Clause = readInteger(dis);

					this.Column88 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.ID, dos);

				// String

				writeString(this.Name, dos);

				// Integer

				writeInteger(this.Age, dos);

				// String

				writeString(this.Photo, dos);

				// String

				writeString(this.Nationality, dos);

				// String

				writeString(this.Flag, dos);

				// Integer

				writeInteger(this.Overall, dos);

				// Integer

				writeInteger(this.Potential, dos);

				// String

				writeString(this.Club, dos);

				// String

				writeString(this.Club_Logo, dos);

				// String

				writeString(this.Value, dos);

				// String

				writeString(this.Wage, dos);

				// Integer

				writeInteger(this.Special, dos);

				// String

				writeString(this.Preferred_Foot, dos);

				// Integer

				writeInteger(this.International_Reputation, dos);

				// Integer

				writeInteger(this.Weak_Foot, dos);

				// Integer

				writeInteger(this.Skill_Moves, dos);

				// String

				writeString(this.Work_Rate, dos);

				// String

				writeString(this.Body_Type, dos);

				// String

				writeString(this.Real_Face, dos);

				// String

				writeString(this.Position, dos);

				// Integer

				writeInteger(this.Jersey_Number, dos);

				// String

				writeString(this.Joined, dos);

				// String

				writeString(this.Loaned_From, dos);

				// String

				writeString(this.Contract_Valid_Until, dos);

				// Integer

				writeInteger(this.Height, dos);

				// String

				writeString(this.Weight, dos);

				// String

				writeString(this.LS, dos);

				// String

				writeString(this.ST, dos);

				// String

				writeString(this.RS, dos);

				// String

				writeString(this.LW, dos);

				// String

				writeString(this.LF, dos);

				// String

				writeString(this.CF, dos);

				// String

				writeString(this.RF, dos);

				// String

				writeString(this.RW, dos);

				// String

				writeString(this.LAM, dos);

				// String

				writeString(this.CAM, dos);

				// String

				writeString(this.RAM, dos);

				// String

				writeString(this.LM, dos);

				// String

				writeString(this.LCM, dos);

				// String

				writeString(this.CM, dos);

				// String

				writeString(this.RCM, dos);

				// String

				writeString(this.RM, dos);

				// String

				writeString(this.LWB, dos);

				// String

				writeString(this.LDM, dos);

				// String

				writeString(this.CDM, dos);

				// String

				writeString(this.RDM, dos);

				// String

				writeString(this.RWB, dos);

				// String

				writeString(this.LB, dos);

				// String

				writeString(this.LCB, dos);

				// String

				writeString(this.CB, dos);

				// String

				writeString(this.RCB, dos);

				// String

				writeString(this.RB, dos);

				// String

				writeString(this.Crossing, dos);

				// Integer

				writeInteger(this.Finishing, dos);

				// Integer

				writeInteger(this.HeadingAccuracy, dos);

				// Integer

				writeInteger(this.ShortPassing, dos);

				// Integer

				writeInteger(this.Volleys, dos);

				// Integer

				writeInteger(this.Dribbling, dos);

				// Integer

				writeInteger(this.Curve, dos);

				// Integer

				writeInteger(this.FKAccuracy, dos);

				// Integer

				writeInteger(this.LongPassing, dos);

				// Integer

				writeInteger(this.BallControl, dos);

				// Integer

				writeInteger(this.Acceleration, dos);

				// Integer

				writeInteger(this.SprintSpeed, dos);

				// Integer

				writeInteger(this.Agility, dos);

				// Integer

				writeInteger(this.Reactions, dos);

				// Integer

				writeInteger(this.Balance, dos);

				// Integer

				writeInteger(this.ShotPower, dos);

				// Integer

				writeInteger(this.Jumping, dos);

				// Integer

				writeInteger(this.Stamina, dos);

				// Integer

				writeInteger(this.Strength, dos);

				// Integer

				writeInteger(this.LongShots, dos);

				// Integer

				writeInteger(this.Aggression, dos);

				// Integer

				writeInteger(this.Interceptions, dos);

				// Integer

				writeInteger(this.Positioning, dos);

				// Integer

				writeInteger(this.Vision, dos);

				// Integer

				writeInteger(this.Penalties, dos);

				// Integer

				writeInteger(this.Composure, dos);

				// Integer

				writeInteger(this.Marking, dos);

				// Integer

				writeInteger(this.StandingTackle, dos);

				// Integer

				writeInteger(this.SlidingTackle, dos);

				// Integer

				writeInteger(this.GKDiving, dos);

				// Integer

				writeInteger(this.GKHandling, dos);

				// Integer

				writeInteger(this.GKKicking, dos);

				// Integer

				writeInteger(this.GKPositioning, dos);

				// Integer

				writeInteger(this.GKReflexes, dos);

				// Integer

				writeInteger(this.Release_Clause, dos);

				// String

				writeString(this.Column88, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.ID, dos);

				// String

				writeString(this.Name, dos);

				// Integer

				writeInteger(this.Age, dos);

				// String

				writeString(this.Photo, dos);

				// String

				writeString(this.Nationality, dos);

				// String

				writeString(this.Flag, dos);

				// Integer

				writeInteger(this.Overall, dos);

				// Integer

				writeInteger(this.Potential, dos);

				// String

				writeString(this.Club, dos);

				// String

				writeString(this.Club_Logo, dos);

				// String

				writeString(this.Value, dos);

				// String

				writeString(this.Wage, dos);

				// Integer

				writeInteger(this.Special, dos);

				// String

				writeString(this.Preferred_Foot, dos);

				// Integer

				writeInteger(this.International_Reputation, dos);

				// Integer

				writeInteger(this.Weak_Foot, dos);

				// Integer

				writeInteger(this.Skill_Moves, dos);

				// String

				writeString(this.Work_Rate, dos);

				// String

				writeString(this.Body_Type, dos);

				// String

				writeString(this.Real_Face, dos);

				// String

				writeString(this.Position, dos);

				// Integer

				writeInteger(this.Jersey_Number, dos);

				// String

				writeString(this.Joined, dos);

				// String

				writeString(this.Loaned_From, dos);

				// String

				writeString(this.Contract_Valid_Until, dos);

				// Integer

				writeInteger(this.Height, dos);

				// String

				writeString(this.Weight, dos);

				// String

				writeString(this.LS, dos);

				// String

				writeString(this.ST, dos);

				// String

				writeString(this.RS, dos);

				// String

				writeString(this.LW, dos);

				// String

				writeString(this.LF, dos);

				// String

				writeString(this.CF, dos);

				// String

				writeString(this.RF, dos);

				// String

				writeString(this.RW, dos);

				// String

				writeString(this.LAM, dos);

				// String

				writeString(this.CAM, dos);

				// String

				writeString(this.RAM, dos);

				// String

				writeString(this.LM, dos);

				// String

				writeString(this.LCM, dos);

				// String

				writeString(this.CM, dos);

				// String

				writeString(this.RCM, dos);

				// String

				writeString(this.RM, dos);

				// String

				writeString(this.LWB, dos);

				// String

				writeString(this.LDM, dos);

				// String

				writeString(this.CDM, dos);

				// String

				writeString(this.RDM, dos);

				// String

				writeString(this.RWB, dos);

				// String

				writeString(this.LB, dos);

				// String

				writeString(this.LCB, dos);

				// String

				writeString(this.CB, dos);

				// String

				writeString(this.RCB, dos);

				// String

				writeString(this.RB, dos);

				// String

				writeString(this.Crossing, dos);

				// Integer

				writeInteger(this.Finishing, dos);

				// Integer

				writeInteger(this.HeadingAccuracy, dos);

				// Integer

				writeInteger(this.ShortPassing, dos);

				// Integer

				writeInteger(this.Volleys, dos);

				// Integer

				writeInteger(this.Dribbling, dos);

				// Integer

				writeInteger(this.Curve, dos);

				// Integer

				writeInteger(this.FKAccuracy, dos);

				// Integer

				writeInteger(this.LongPassing, dos);

				// Integer

				writeInteger(this.BallControl, dos);

				// Integer

				writeInteger(this.Acceleration, dos);

				// Integer

				writeInteger(this.SprintSpeed, dos);

				// Integer

				writeInteger(this.Agility, dos);

				// Integer

				writeInteger(this.Reactions, dos);

				// Integer

				writeInteger(this.Balance, dos);

				// Integer

				writeInteger(this.ShotPower, dos);

				// Integer

				writeInteger(this.Jumping, dos);

				// Integer

				writeInteger(this.Stamina, dos);

				// Integer

				writeInteger(this.Strength, dos);

				// Integer

				writeInteger(this.LongShots, dos);

				// Integer

				writeInteger(this.Aggression, dos);

				// Integer

				writeInteger(this.Interceptions, dos);

				// Integer

				writeInteger(this.Positioning, dos);

				// Integer

				writeInteger(this.Vision, dos);

				// Integer

				writeInteger(this.Penalties, dos);

				// Integer

				writeInteger(this.Composure, dos);

				// Integer

				writeInteger(this.Marking, dos);

				// Integer

				writeInteger(this.StandingTackle, dos);

				// Integer

				writeInteger(this.SlidingTackle, dos);

				// Integer

				writeInteger(this.GKDiving, dos);

				// Integer

				writeInteger(this.GKHandling, dos);

				// Integer

				writeInteger(this.GKKicking, dos);

				// Integer

				writeInteger(this.GKPositioning, dos);

				// Integer

				writeInteger(this.GKReflexes, dos);

				// Integer

				writeInteger(this.Release_Clause, dos);

				// String

				writeString(this.Column88, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID=" + String.valueOf(ID));
			sb.append(",Name=" + Name);
			sb.append(",Age=" + String.valueOf(Age));
			sb.append(",Photo=" + Photo);
			sb.append(",Nationality=" + Nationality);
			sb.append(",Flag=" + Flag);
			sb.append(",Overall=" + String.valueOf(Overall));
			sb.append(",Potential=" + String.valueOf(Potential));
			sb.append(",Club=" + Club);
			sb.append(",Club_Logo=" + Club_Logo);
			sb.append(",Value=" + Value);
			sb.append(",Wage=" + Wage);
			sb.append(",Special=" + String.valueOf(Special));
			sb.append(",Preferred_Foot=" + Preferred_Foot);
			sb.append(",International_Reputation=" + String.valueOf(International_Reputation));
			sb.append(",Weak_Foot=" + String.valueOf(Weak_Foot));
			sb.append(",Skill_Moves=" + String.valueOf(Skill_Moves));
			sb.append(",Work_Rate=" + Work_Rate);
			sb.append(",Body_Type=" + Body_Type);
			sb.append(",Real_Face=" + Real_Face);
			sb.append(",Position=" + Position);
			sb.append(",Jersey_Number=" + String.valueOf(Jersey_Number));
			sb.append(",Joined=" + Joined);
			sb.append(",Loaned_From=" + Loaned_From);
			sb.append(",Contract_Valid_Until=" + Contract_Valid_Until);
			sb.append(",Height=" + String.valueOf(Height));
			sb.append(",Weight=" + Weight);
			sb.append(",LS=" + LS);
			sb.append(",ST=" + ST);
			sb.append(",RS=" + RS);
			sb.append(",LW=" + LW);
			sb.append(",LF=" + LF);
			sb.append(",CF=" + CF);
			sb.append(",RF=" + RF);
			sb.append(",RW=" + RW);
			sb.append(",LAM=" + LAM);
			sb.append(",CAM=" + CAM);
			sb.append(",RAM=" + RAM);
			sb.append(",LM=" + LM);
			sb.append(",LCM=" + LCM);
			sb.append(",CM=" + CM);
			sb.append(",RCM=" + RCM);
			sb.append(",RM=" + RM);
			sb.append(",LWB=" + LWB);
			sb.append(",LDM=" + LDM);
			sb.append(",CDM=" + CDM);
			sb.append(",RDM=" + RDM);
			sb.append(",RWB=" + RWB);
			sb.append(",LB=" + LB);
			sb.append(",LCB=" + LCB);
			sb.append(",CB=" + CB);
			sb.append(",RCB=" + RCB);
			sb.append(",RB=" + RB);
			sb.append(",Crossing=" + Crossing);
			sb.append(",Finishing=" + String.valueOf(Finishing));
			sb.append(",HeadingAccuracy=" + String.valueOf(HeadingAccuracy));
			sb.append(",ShortPassing=" + String.valueOf(ShortPassing));
			sb.append(",Volleys=" + String.valueOf(Volleys));
			sb.append(",Dribbling=" + String.valueOf(Dribbling));
			sb.append(",Curve=" + String.valueOf(Curve));
			sb.append(",FKAccuracy=" + String.valueOf(FKAccuracy));
			sb.append(",LongPassing=" + String.valueOf(LongPassing));
			sb.append(",BallControl=" + String.valueOf(BallControl));
			sb.append(",Acceleration=" + String.valueOf(Acceleration));
			sb.append(",SprintSpeed=" + String.valueOf(SprintSpeed));
			sb.append(",Agility=" + String.valueOf(Agility));
			sb.append(",Reactions=" + String.valueOf(Reactions));
			sb.append(",Balance=" + String.valueOf(Balance));
			sb.append(",ShotPower=" + String.valueOf(ShotPower));
			sb.append(",Jumping=" + String.valueOf(Jumping));
			sb.append(",Stamina=" + String.valueOf(Stamina));
			sb.append(",Strength=" + String.valueOf(Strength));
			sb.append(",LongShots=" + String.valueOf(LongShots));
			sb.append(",Aggression=" + String.valueOf(Aggression));
			sb.append(",Interceptions=" + String.valueOf(Interceptions));
			sb.append(",Positioning=" + String.valueOf(Positioning));
			sb.append(",Vision=" + String.valueOf(Vision));
			sb.append(",Penalties=" + String.valueOf(Penalties));
			sb.append(",Composure=" + String.valueOf(Composure));
			sb.append(",Marking=" + String.valueOf(Marking));
			sb.append(",StandingTackle=" + String.valueOf(StandingTackle));
			sb.append(",SlidingTackle=" + String.valueOf(SlidingTackle));
			sb.append(",GKDiving=" + String.valueOf(GKDiving));
			sb.append(",GKHandling=" + String.valueOf(GKHandling));
			sb.append(",GKKicking=" + String.valueOf(GKKicking));
			sb.append(",GKPositioning=" + String.valueOf(GKPositioning));
			sb.append(",GKReflexes=" + String.valueOf(GKReflexes));
			sb.append(",Release_Clause=" + String.valueOf(Release_Clause));
			sb.append(",Column88=" + Column88);
			sb.append("]");

			return sb.toString();
		}

		public String toLogString() {
			StringBuilder sb = new StringBuilder();

			if (ID == null) {
				sb.append("<null>");
			} else {
				sb.append(ID);
			}

			sb.append("|");

			if (Name == null) {
				sb.append("<null>");
			} else {
				sb.append(Name);
			}

			sb.append("|");

			if (Age == null) {
				sb.append("<null>");
			} else {
				sb.append(Age);
			}

			sb.append("|");

			if (Photo == null) {
				sb.append("<null>");
			} else {
				sb.append(Photo);
			}

			sb.append("|");

			if (Nationality == null) {
				sb.append("<null>");
			} else {
				sb.append(Nationality);
			}

			sb.append("|");

			if (Flag == null) {
				sb.append("<null>");
			} else {
				sb.append(Flag);
			}

			sb.append("|");

			if (Overall == null) {
				sb.append("<null>");
			} else {
				sb.append(Overall);
			}

			sb.append("|");

			if (Potential == null) {
				sb.append("<null>");
			} else {
				sb.append(Potential);
			}

			sb.append("|");

			if (Club == null) {
				sb.append("<null>");
			} else {
				sb.append(Club);
			}

			sb.append("|");

			if (Club_Logo == null) {
				sb.append("<null>");
			} else {
				sb.append(Club_Logo);
			}

			sb.append("|");

			if (Value == null) {
				sb.append("<null>");
			} else {
				sb.append(Value);
			}

			sb.append("|");

			if (Wage == null) {
				sb.append("<null>");
			} else {
				sb.append(Wage);
			}

			sb.append("|");

			if (Special == null) {
				sb.append("<null>");
			} else {
				sb.append(Special);
			}

			sb.append("|");

			if (Preferred_Foot == null) {
				sb.append("<null>");
			} else {
				sb.append(Preferred_Foot);
			}

			sb.append("|");

			if (International_Reputation == null) {
				sb.append("<null>");
			} else {
				sb.append(International_Reputation);
			}

			sb.append("|");

			if (Weak_Foot == null) {
				sb.append("<null>");
			} else {
				sb.append(Weak_Foot);
			}

			sb.append("|");

			if (Skill_Moves == null) {
				sb.append("<null>");
			} else {
				sb.append(Skill_Moves);
			}

			sb.append("|");

			if (Work_Rate == null) {
				sb.append("<null>");
			} else {
				sb.append(Work_Rate);
			}

			sb.append("|");

			if (Body_Type == null) {
				sb.append("<null>");
			} else {
				sb.append(Body_Type);
			}

			sb.append("|");

			if (Real_Face == null) {
				sb.append("<null>");
			} else {
				sb.append(Real_Face);
			}

			sb.append("|");

			if (Position == null) {
				sb.append("<null>");
			} else {
				sb.append(Position);
			}

			sb.append("|");

			if (Jersey_Number == null) {
				sb.append("<null>");
			} else {
				sb.append(Jersey_Number);
			}

			sb.append("|");

			if (Joined == null) {
				sb.append("<null>");
			} else {
				sb.append(Joined);
			}

			sb.append("|");

			if (Loaned_From == null) {
				sb.append("<null>");
			} else {
				sb.append(Loaned_From);
			}

			sb.append("|");

			if (Contract_Valid_Until == null) {
				sb.append("<null>");
			} else {
				sb.append(Contract_Valid_Until);
			}

			sb.append("|");

			if (Height == null) {
				sb.append("<null>");
			} else {
				sb.append(Height);
			}

			sb.append("|");

			if (Weight == null) {
				sb.append("<null>");
			} else {
				sb.append(Weight);
			}

			sb.append("|");

			if (LS == null) {
				sb.append("<null>");
			} else {
				sb.append(LS);
			}

			sb.append("|");

			if (ST == null) {
				sb.append("<null>");
			} else {
				sb.append(ST);
			}

			sb.append("|");

			if (RS == null) {
				sb.append("<null>");
			} else {
				sb.append(RS);
			}

			sb.append("|");

			if (LW == null) {
				sb.append("<null>");
			} else {
				sb.append(LW);
			}

			sb.append("|");

			if (LF == null) {
				sb.append("<null>");
			} else {
				sb.append(LF);
			}

			sb.append("|");

			if (CF == null) {
				sb.append("<null>");
			} else {
				sb.append(CF);
			}

			sb.append("|");

			if (RF == null) {
				sb.append("<null>");
			} else {
				sb.append(RF);
			}

			sb.append("|");

			if (RW == null) {
				sb.append("<null>");
			} else {
				sb.append(RW);
			}

			sb.append("|");

			if (LAM == null) {
				sb.append("<null>");
			} else {
				sb.append(LAM);
			}

			sb.append("|");

			if (CAM == null) {
				sb.append("<null>");
			} else {
				sb.append(CAM);
			}

			sb.append("|");

			if (RAM == null) {
				sb.append("<null>");
			} else {
				sb.append(RAM);
			}

			sb.append("|");

			if (LM == null) {
				sb.append("<null>");
			} else {
				sb.append(LM);
			}

			sb.append("|");

			if (LCM == null) {
				sb.append("<null>");
			} else {
				sb.append(LCM);
			}

			sb.append("|");

			if (CM == null) {
				sb.append("<null>");
			} else {
				sb.append(CM);
			}

			sb.append("|");

			if (RCM == null) {
				sb.append("<null>");
			} else {
				sb.append(RCM);
			}

			sb.append("|");

			if (RM == null) {
				sb.append("<null>");
			} else {
				sb.append(RM);
			}

			sb.append("|");

			if (LWB == null) {
				sb.append("<null>");
			} else {
				sb.append(LWB);
			}

			sb.append("|");

			if (LDM == null) {
				sb.append("<null>");
			} else {
				sb.append(LDM);
			}

			sb.append("|");

			if (CDM == null) {
				sb.append("<null>");
			} else {
				sb.append(CDM);
			}

			sb.append("|");

			if (RDM == null) {
				sb.append("<null>");
			} else {
				sb.append(RDM);
			}

			sb.append("|");

			if (RWB == null) {
				sb.append("<null>");
			} else {
				sb.append(RWB);
			}

			sb.append("|");

			if (LB == null) {
				sb.append("<null>");
			} else {
				sb.append(LB);
			}

			sb.append("|");

			if (LCB == null) {
				sb.append("<null>");
			} else {
				sb.append(LCB);
			}

			sb.append("|");

			if (CB == null) {
				sb.append("<null>");
			} else {
				sb.append(CB);
			}

			sb.append("|");

			if (RCB == null) {
				sb.append("<null>");
			} else {
				sb.append(RCB);
			}

			sb.append("|");

			if (RB == null) {
				sb.append("<null>");
			} else {
				sb.append(RB);
			}

			sb.append("|");

			if (Crossing == null) {
				sb.append("<null>");
			} else {
				sb.append(Crossing);
			}

			sb.append("|");

			if (Finishing == null) {
				sb.append("<null>");
			} else {
				sb.append(Finishing);
			}

			sb.append("|");

			if (HeadingAccuracy == null) {
				sb.append("<null>");
			} else {
				sb.append(HeadingAccuracy);
			}

			sb.append("|");

			if (ShortPassing == null) {
				sb.append("<null>");
			} else {
				sb.append(ShortPassing);
			}

			sb.append("|");

			if (Volleys == null) {
				sb.append("<null>");
			} else {
				sb.append(Volleys);
			}

			sb.append("|");

			if (Dribbling == null) {
				sb.append("<null>");
			} else {
				sb.append(Dribbling);
			}

			sb.append("|");

			if (Curve == null) {
				sb.append("<null>");
			} else {
				sb.append(Curve);
			}

			sb.append("|");

			if (FKAccuracy == null) {
				sb.append("<null>");
			} else {
				sb.append(FKAccuracy);
			}

			sb.append("|");

			if (LongPassing == null) {
				sb.append("<null>");
			} else {
				sb.append(LongPassing);
			}

			sb.append("|");

			if (BallControl == null) {
				sb.append("<null>");
			} else {
				sb.append(BallControl);
			}

			sb.append("|");

			if (Acceleration == null) {
				sb.append("<null>");
			} else {
				sb.append(Acceleration);
			}

			sb.append("|");

			if (SprintSpeed == null) {
				sb.append("<null>");
			} else {
				sb.append(SprintSpeed);
			}

			sb.append("|");

			if (Agility == null) {
				sb.append("<null>");
			} else {
				sb.append(Agility);
			}

			sb.append("|");

			if (Reactions == null) {
				sb.append("<null>");
			} else {
				sb.append(Reactions);
			}

			sb.append("|");

			if (Balance == null) {
				sb.append("<null>");
			} else {
				sb.append(Balance);
			}

			sb.append("|");

			if (ShotPower == null) {
				sb.append("<null>");
			} else {
				sb.append(ShotPower);
			}

			sb.append("|");

			if (Jumping == null) {
				sb.append("<null>");
			} else {
				sb.append(Jumping);
			}

			sb.append("|");

			if (Stamina == null) {
				sb.append("<null>");
			} else {
				sb.append(Stamina);
			}

			sb.append("|");

			if (Strength == null) {
				sb.append("<null>");
			} else {
				sb.append(Strength);
			}

			sb.append("|");

			if (LongShots == null) {
				sb.append("<null>");
			} else {
				sb.append(LongShots);
			}

			sb.append("|");

			if (Aggression == null) {
				sb.append("<null>");
			} else {
				sb.append(Aggression);
			}

			sb.append("|");

			if (Interceptions == null) {
				sb.append("<null>");
			} else {
				sb.append(Interceptions);
			}

			sb.append("|");

			if (Positioning == null) {
				sb.append("<null>");
			} else {
				sb.append(Positioning);
			}

			sb.append("|");

			if (Vision == null) {
				sb.append("<null>");
			} else {
				sb.append(Vision);
			}

			sb.append("|");

			if (Penalties == null) {
				sb.append("<null>");
			} else {
				sb.append(Penalties);
			}

			sb.append("|");

			if (Composure == null) {
				sb.append("<null>");
			} else {
				sb.append(Composure);
			}

			sb.append("|");

			if (Marking == null) {
				sb.append("<null>");
			} else {
				sb.append(Marking);
			}

			sb.append("|");

			if (StandingTackle == null) {
				sb.append("<null>");
			} else {
				sb.append(StandingTackle);
			}

			sb.append("|");

			if (SlidingTackle == null) {
				sb.append("<null>");
			} else {
				sb.append(SlidingTackle);
			}

			sb.append("|");

			if (GKDiving == null) {
				sb.append("<null>");
			} else {
				sb.append(GKDiving);
			}

			sb.append("|");

			if (GKHandling == null) {
				sb.append("<null>");
			} else {
				sb.append(GKHandling);
			}

			sb.append("|");

			if (GKKicking == null) {
				sb.append("<null>");
			} else {
				sb.append(GKKicking);
			}

			sb.append("|");

			if (GKPositioning == null) {
				sb.append("<null>");
			} else {
				sb.append(GKPositioning);
			}

			sb.append("|");

			if (GKReflexes == null) {
				sb.append("<null>");
			} else {
				sb.append(GKReflexes);
			}

			sb.append("|");

			if (Release_Clause == null) {
				sb.append("<null>");
			} else {
				sb.append(Release_Clause);
			}

			sb.append("|");

			if (Column88 == null) {
				sb.append("<null>");
			} else {
				sb.append(Column88);
			}

			sb.append("|");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID, other.ID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_DEMO_CSVReadNFilter = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer ID;

		public Integer getID() {
			return this.ID;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public Integer Age;

		public Integer getAge() {
			return this.Age;
		}

		public String Photo;

		public String getPhoto() {
			return this.Photo;
		}

		public String Nationality;

		public String getNationality() {
			return this.Nationality;
		}

		public String Flag;

		public String getFlag() {
			return this.Flag;
		}

		public Integer Overall;

		public Integer getOverall() {
			return this.Overall;
		}

		public Integer Potential;

		public Integer getPotential() {
			return this.Potential;
		}

		public String Club;

		public String getClub() {
			return this.Club;
		}

		public String Club_Logo;

		public String getClub_Logo() {
			return this.Club_Logo;
		}

		public String Value;

		public String getValue() {
			return this.Value;
		}

		public String Wage;

		public String getWage() {
			return this.Wage;
		}

		public Integer Special;

		public Integer getSpecial() {
			return this.Special;
		}

		public String Preferred_Foot;

		public String getPreferred_Foot() {
			return this.Preferred_Foot;
		}

		public Integer International_Reputation;

		public Integer getInternational_Reputation() {
			return this.International_Reputation;
		}

		public Integer Weak_Foot;

		public Integer getWeak_Foot() {
			return this.Weak_Foot;
		}

		public Integer Skill_Moves;

		public Integer getSkill_Moves() {
			return this.Skill_Moves;
		}

		public String Work_Rate;

		public String getWork_Rate() {
			return this.Work_Rate;
		}

		public String Body_Type;

		public String getBody_Type() {
			return this.Body_Type;
		}

		public String Real_Face;

		public String getReal_Face() {
			return this.Real_Face;
		}

		public String Position;

		public String getPosition() {
			return this.Position;
		}

		public Integer Jersey_Number;

		public Integer getJersey_Number() {
			return this.Jersey_Number;
		}

		public String Joined;

		public String getJoined() {
			return this.Joined;
		}

		public String Loaned_From;

		public String getLoaned_From() {
			return this.Loaned_From;
		}

		public String Contract_Valid_Until;

		public String getContract_Valid_Until() {
			return this.Contract_Valid_Until;
		}

		public Integer Height;

		public Integer getHeight() {
			return this.Height;
		}

		public String Weight;

		public String getWeight() {
			return this.Weight;
		}

		public String LS;

		public String getLS() {
			return this.LS;
		}

		public String ST;

		public String getST() {
			return this.ST;
		}

		public String RS;

		public String getRS() {
			return this.RS;
		}

		public String LW;

		public String getLW() {
			return this.LW;
		}

		public String LF;

		public String getLF() {
			return this.LF;
		}

		public String CF;

		public String getCF() {
			return this.CF;
		}

		public String RF;

		public String getRF() {
			return this.RF;
		}

		public String RW;

		public String getRW() {
			return this.RW;
		}

		public String LAM;

		public String getLAM() {
			return this.LAM;
		}

		public String CAM;

		public String getCAM() {
			return this.CAM;
		}

		public String RAM;

		public String getRAM() {
			return this.RAM;
		}

		public String LM;

		public String getLM() {
			return this.LM;
		}

		public String LCM;

		public String getLCM() {
			return this.LCM;
		}

		public String CM;

		public String getCM() {
			return this.CM;
		}

		public String RCM;

		public String getRCM() {
			return this.RCM;
		}

		public String RM;

		public String getRM() {
			return this.RM;
		}

		public String LWB;

		public String getLWB() {
			return this.LWB;
		}

		public String LDM;

		public String getLDM() {
			return this.LDM;
		}

		public String CDM;

		public String getCDM() {
			return this.CDM;
		}

		public String RDM;

		public String getRDM() {
			return this.RDM;
		}

		public String RWB;

		public String getRWB() {
			return this.RWB;
		}

		public String LB;

		public String getLB() {
			return this.LB;
		}

		public String LCB;

		public String getLCB() {
			return this.LCB;
		}

		public String CB;

		public String getCB() {
			return this.CB;
		}

		public String RCB;

		public String getRCB() {
			return this.RCB;
		}

		public String RB;

		public String getRB() {
			return this.RB;
		}

		public String Crossing;

		public String getCrossing() {
			return this.Crossing;
		}

		public Integer Finishing;

		public Integer getFinishing() {
			return this.Finishing;
		}

		public Integer HeadingAccuracy;

		public Integer getHeadingAccuracy() {
			return this.HeadingAccuracy;
		}

		public Integer ShortPassing;

		public Integer getShortPassing() {
			return this.ShortPassing;
		}

		public Integer Volleys;

		public Integer getVolleys() {
			return this.Volleys;
		}

		public Integer Dribbling;

		public Integer getDribbling() {
			return this.Dribbling;
		}

		public Integer Curve;

		public Integer getCurve() {
			return this.Curve;
		}

		public Integer FKAccuracy;

		public Integer getFKAccuracy() {
			return this.FKAccuracy;
		}

		public Integer LongPassing;

		public Integer getLongPassing() {
			return this.LongPassing;
		}

		public Integer BallControl;

		public Integer getBallControl() {
			return this.BallControl;
		}

		public Integer Acceleration;

		public Integer getAcceleration() {
			return this.Acceleration;
		}

		public Integer SprintSpeed;

		public Integer getSprintSpeed() {
			return this.SprintSpeed;
		}

		public Integer Agility;

		public Integer getAgility() {
			return this.Agility;
		}

		public Integer Reactions;

		public Integer getReactions() {
			return this.Reactions;
		}

		public Integer Balance;

		public Integer getBalance() {
			return this.Balance;
		}

		public Integer ShotPower;

		public Integer getShotPower() {
			return this.ShotPower;
		}

		public Integer Jumping;

		public Integer getJumping() {
			return this.Jumping;
		}

		public Integer Stamina;

		public Integer getStamina() {
			return this.Stamina;
		}

		public Integer Strength;

		public Integer getStrength() {
			return this.Strength;
		}

		public Integer LongShots;

		public Integer getLongShots() {
			return this.LongShots;
		}

		public Integer Aggression;

		public Integer getAggression() {
			return this.Aggression;
		}

		public Integer Interceptions;

		public Integer getInterceptions() {
			return this.Interceptions;
		}

		public Integer Positioning;

		public Integer getPositioning() {
			return this.Positioning;
		}

		public Integer Vision;

		public Integer getVision() {
			return this.Vision;
		}

		public Integer Penalties;

		public Integer getPenalties() {
			return this.Penalties;
		}

		public Integer Composure;

		public Integer getComposure() {
			return this.Composure;
		}

		public Integer Marking;

		public Integer getMarking() {
			return this.Marking;
		}

		public Integer StandingTackle;

		public Integer getStandingTackle() {
			return this.StandingTackle;
		}

		public Integer SlidingTackle;

		public Integer getSlidingTackle() {
			return this.SlidingTackle;
		}

		public Integer GKDiving;

		public Integer getGKDiving() {
			return this.GKDiving;
		}

		public Integer GKHandling;

		public Integer getGKHandling() {
			return this.GKHandling;
		}

		public Integer GKKicking;

		public Integer getGKKicking() {
			return this.GKKicking;
		}

		public Integer GKPositioning;

		public Integer getGKPositioning() {
			return this.GKPositioning;
		}

		public Integer GKReflexes;

		public Integer getGKReflexes() {
			return this.GKReflexes;
		}

		public Integer Release_Clause;

		public Integer getRelease_Clause() {
			return this.Release_Clause;
		}

		public String Column88;

		public String getColumn88() {
			return this.Column88;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row8Struct other = (row8Struct) obj;

			if (this.ID == null) {
				if (other.ID != null)
					return false;

			} else if (!this.ID.equals(other.ID))

				return false;

			return true;
		}

		public void copyDataTo(row8Struct other) {

			other.ID = this.ID;
			other.Name = this.Name;
			other.Age = this.Age;
			other.Photo = this.Photo;
			other.Nationality = this.Nationality;
			other.Flag = this.Flag;
			other.Overall = this.Overall;
			other.Potential = this.Potential;
			other.Club = this.Club;
			other.Club_Logo = this.Club_Logo;
			other.Value = this.Value;
			other.Wage = this.Wage;
			other.Special = this.Special;
			other.Preferred_Foot = this.Preferred_Foot;
			other.International_Reputation = this.International_Reputation;
			other.Weak_Foot = this.Weak_Foot;
			other.Skill_Moves = this.Skill_Moves;
			other.Work_Rate = this.Work_Rate;
			other.Body_Type = this.Body_Type;
			other.Real_Face = this.Real_Face;
			other.Position = this.Position;
			other.Jersey_Number = this.Jersey_Number;
			other.Joined = this.Joined;
			other.Loaned_From = this.Loaned_From;
			other.Contract_Valid_Until = this.Contract_Valid_Until;
			other.Height = this.Height;
			other.Weight = this.Weight;
			other.LS = this.LS;
			other.ST = this.ST;
			other.RS = this.RS;
			other.LW = this.LW;
			other.LF = this.LF;
			other.CF = this.CF;
			other.RF = this.RF;
			other.RW = this.RW;
			other.LAM = this.LAM;
			other.CAM = this.CAM;
			other.RAM = this.RAM;
			other.LM = this.LM;
			other.LCM = this.LCM;
			other.CM = this.CM;
			other.RCM = this.RCM;
			other.RM = this.RM;
			other.LWB = this.LWB;
			other.LDM = this.LDM;
			other.CDM = this.CDM;
			other.RDM = this.RDM;
			other.RWB = this.RWB;
			other.LB = this.LB;
			other.LCB = this.LCB;
			other.CB = this.CB;
			other.RCB = this.RCB;
			other.RB = this.RB;
			other.Crossing = this.Crossing;
			other.Finishing = this.Finishing;
			other.HeadingAccuracy = this.HeadingAccuracy;
			other.ShortPassing = this.ShortPassing;
			other.Volleys = this.Volleys;
			other.Dribbling = this.Dribbling;
			other.Curve = this.Curve;
			other.FKAccuracy = this.FKAccuracy;
			other.LongPassing = this.LongPassing;
			other.BallControl = this.BallControl;
			other.Acceleration = this.Acceleration;
			other.SprintSpeed = this.SprintSpeed;
			other.Agility = this.Agility;
			other.Reactions = this.Reactions;
			other.Balance = this.Balance;
			other.ShotPower = this.ShotPower;
			other.Jumping = this.Jumping;
			other.Stamina = this.Stamina;
			other.Strength = this.Strength;
			other.LongShots = this.LongShots;
			other.Aggression = this.Aggression;
			other.Interceptions = this.Interceptions;
			other.Positioning = this.Positioning;
			other.Vision = this.Vision;
			other.Penalties = this.Penalties;
			other.Composure = this.Composure;
			other.Marking = this.Marking;
			other.StandingTackle = this.StandingTackle;
			other.SlidingTackle = this.SlidingTackle;
			other.GKDiving = this.GKDiving;
			other.GKHandling = this.GKHandling;
			other.GKKicking = this.GKKicking;
			other.GKPositioning = this.GKPositioning;
			other.GKReflexes = this.GKReflexes;
			other.Release_Clause = this.Release_Clause;
			other.Column88 = this.Column88;

		}

		public void copyKeysDataTo(row8Struct other) {

			other.ID = this.ID;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter.length == 0) {
						commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter.length == 0) {
						commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_DEMO_CSVReadNFilter) {

				try {

					int length = 0;

					this.ID = readInteger(dis);

					this.Name = readString(dis);

					this.Age = readInteger(dis);

					this.Photo = readString(dis);

					this.Nationality = readString(dis);

					this.Flag = readString(dis);

					this.Overall = readInteger(dis);

					this.Potential = readInteger(dis);

					this.Club = readString(dis);

					this.Club_Logo = readString(dis);

					this.Value = readString(dis);

					this.Wage = readString(dis);

					this.Special = readInteger(dis);

					this.Preferred_Foot = readString(dis);

					this.International_Reputation = readInteger(dis);

					this.Weak_Foot = readInteger(dis);

					this.Skill_Moves = readInteger(dis);

					this.Work_Rate = readString(dis);

					this.Body_Type = readString(dis);

					this.Real_Face = readString(dis);

					this.Position = readString(dis);

					this.Jersey_Number = readInteger(dis);

					this.Joined = readString(dis);

					this.Loaned_From = readString(dis);

					this.Contract_Valid_Until = readString(dis);

					this.Height = readInteger(dis);

					this.Weight = readString(dis);

					this.LS = readString(dis);

					this.ST = readString(dis);

					this.RS = readString(dis);

					this.LW = readString(dis);

					this.LF = readString(dis);

					this.CF = readString(dis);

					this.RF = readString(dis);

					this.RW = readString(dis);

					this.LAM = readString(dis);

					this.CAM = readString(dis);

					this.RAM = readString(dis);

					this.LM = readString(dis);

					this.LCM = readString(dis);

					this.CM = readString(dis);

					this.RCM = readString(dis);

					this.RM = readString(dis);

					this.LWB = readString(dis);

					this.LDM = readString(dis);

					this.CDM = readString(dis);

					this.RDM = readString(dis);

					this.RWB = readString(dis);

					this.LB = readString(dis);

					this.LCB = readString(dis);

					this.CB = readString(dis);

					this.RCB = readString(dis);

					this.RB = readString(dis);

					this.Crossing = readString(dis);

					this.Finishing = readInteger(dis);

					this.HeadingAccuracy = readInteger(dis);

					this.ShortPassing = readInteger(dis);

					this.Volleys = readInteger(dis);

					this.Dribbling = readInteger(dis);

					this.Curve = readInteger(dis);

					this.FKAccuracy = readInteger(dis);

					this.LongPassing = readInteger(dis);

					this.BallControl = readInteger(dis);

					this.Acceleration = readInteger(dis);

					this.SprintSpeed = readInteger(dis);

					this.Agility = readInteger(dis);

					this.Reactions = readInteger(dis);

					this.Balance = readInteger(dis);

					this.ShotPower = readInteger(dis);

					this.Jumping = readInteger(dis);

					this.Stamina = readInteger(dis);

					this.Strength = readInteger(dis);

					this.LongShots = readInteger(dis);

					this.Aggression = readInteger(dis);

					this.Interceptions = readInteger(dis);

					this.Positioning = readInteger(dis);

					this.Vision = readInteger(dis);

					this.Penalties = readInteger(dis);

					this.Composure = readInteger(dis);

					this.Marking = readInteger(dis);

					this.StandingTackle = readInteger(dis);

					this.SlidingTackle = readInteger(dis);

					this.GKDiving = readInteger(dis);

					this.GKHandling = readInteger(dis);

					this.GKKicking = readInteger(dis);

					this.GKPositioning = readInteger(dis);

					this.GKReflexes = readInteger(dis);

					this.Release_Clause = readInteger(dis);

					this.Column88 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_DEMO_CSVReadNFilter) {

				try {

					int length = 0;

					this.ID = readInteger(dis);

					this.Name = readString(dis);

					this.Age = readInteger(dis);

					this.Photo = readString(dis);

					this.Nationality = readString(dis);

					this.Flag = readString(dis);

					this.Overall = readInteger(dis);

					this.Potential = readInteger(dis);

					this.Club = readString(dis);

					this.Club_Logo = readString(dis);

					this.Value = readString(dis);

					this.Wage = readString(dis);

					this.Special = readInteger(dis);

					this.Preferred_Foot = readString(dis);

					this.International_Reputation = readInteger(dis);

					this.Weak_Foot = readInteger(dis);

					this.Skill_Moves = readInteger(dis);

					this.Work_Rate = readString(dis);

					this.Body_Type = readString(dis);

					this.Real_Face = readString(dis);

					this.Position = readString(dis);

					this.Jersey_Number = readInteger(dis);

					this.Joined = readString(dis);

					this.Loaned_From = readString(dis);

					this.Contract_Valid_Until = readString(dis);

					this.Height = readInteger(dis);

					this.Weight = readString(dis);

					this.LS = readString(dis);

					this.ST = readString(dis);

					this.RS = readString(dis);

					this.LW = readString(dis);

					this.LF = readString(dis);

					this.CF = readString(dis);

					this.RF = readString(dis);

					this.RW = readString(dis);

					this.LAM = readString(dis);

					this.CAM = readString(dis);

					this.RAM = readString(dis);

					this.LM = readString(dis);

					this.LCM = readString(dis);

					this.CM = readString(dis);

					this.RCM = readString(dis);

					this.RM = readString(dis);

					this.LWB = readString(dis);

					this.LDM = readString(dis);

					this.CDM = readString(dis);

					this.RDM = readString(dis);

					this.RWB = readString(dis);

					this.LB = readString(dis);

					this.LCB = readString(dis);

					this.CB = readString(dis);

					this.RCB = readString(dis);

					this.RB = readString(dis);

					this.Crossing = readString(dis);

					this.Finishing = readInteger(dis);

					this.HeadingAccuracy = readInteger(dis);

					this.ShortPassing = readInteger(dis);

					this.Volleys = readInteger(dis);

					this.Dribbling = readInteger(dis);

					this.Curve = readInteger(dis);

					this.FKAccuracy = readInteger(dis);

					this.LongPassing = readInteger(dis);

					this.BallControl = readInteger(dis);

					this.Acceleration = readInteger(dis);

					this.SprintSpeed = readInteger(dis);

					this.Agility = readInteger(dis);

					this.Reactions = readInteger(dis);

					this.Balance = readInteger(dis);

					this.ShotPower = readInteger(dis);

					this.Jumping = readInteger(dis);

					this.Stamina = readInteger(dis);

					this.Strength = readInteger(dis);

					this.LongShots = readInteger(dis);

					this.Aggression = readInteger(dis);

					this.Interceptions = readInteger(dis);

					this.Positioning = readInteger(dis);

					this.Vision = readInteger(dis);

					this.Penalties = readInteger(dis);

					this.Composure = readInteger(dis);

					this.Marking = readInteger(dis);

					this.StandingTackle = readInteger(dis);

					this.SlidingTackle = readInteger(dis);

					this.GKDiving = readInteger(dis);

					this.GKHandling = readInteger(dis);

					this.GKKicking = readInteger(dis);

					this.GKPositioning = readInteger(dis);

					this.GKReflexes = readInteger(dis);

					this.Release_Clause = readInteger(dis);

					this.Column88 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.ID, dos);

				// String

				writeString(this.Name, dos);

				// Integer

				writeInteger(this.Age, dos);

				// String

				writeString(this.Photo, dos);

				// String

				writeString(this.Nationality, dos);

				// String

				writeString(this.Flag, dos);

				// Integer

				writeInteger(this.Overall, dos);

				// Integer

				writeInteger(this.Potential, dos);

				// String

				writeString(this.Club, dos);

				// String

				writeString(this.Club_Logo, dos);

				// String

				writeString(this.Value, dos);

				// String

				writeString(this.Wage, dos);

				// Integer

				writeInteger(this.Special, dos);

				// String

				writeString(this.Preferred_Foot, dos);

				// Integer

				writeInteger(this.International_Reputation, dos);

				// Integer

				writeInteger(this.Weak_Foot, dos);

				// Integer

				writeInteger(this.Skill_Moves, dos);

				// String

				writeString(this.Work_Rate, dos);

				// String

				writeString(this.Body_Type, dos);

				// String

				writeString(this.Real_Face, dos);

				// String

				writeString(this.Position, dos);

				// Integer

				writeInteger(this.Jersey_Number, dos);

				// String

				writeString(this.Joined, dos);

				// String

				writeString(this.Loaned_From, dos);

				// String

				writeString(this.Contract_Valid_Until, dos);

				// Integer

				writeInteger(this.Height, dos);

				// String

				writeString(this.Weight, dos);

				// String

				writeString(this.LS, dos);

				// String

				writeString(this.ST, dos);

				// String

				writeString(this.RS, dos);

				// String

				writeString(this.LW, dos);

				// String

				writeString(this.LF, dos);

				// String

				writeString(this.CF, dos);

				// String

				writeString(this.RF, dos);

				// String

				writeString(this.RW, dos);

				// String

				writeString(this.LAM, dos);

				// String

				writeString(this.CAM, dos);

				// String

				writeString(this.RAM, dos);

				// String

				writeString(this.LM, dos);

				// String

				writeString(this.LCM, dos);

				// String

				writeString(this.CM, dos);

				// String

				writeString(this.RCM, dos);

				// String

				writeString(this.RM, dos);

				// String

				writeString(this.LWB, dos);

				// String

				writeString(this.LDM, dos);

				// String

				writeString(this.CDM, dos);

				// String

				writeString(this.RDM, dos);

				// String

				writeString(this.RWB, dos);

				// String

				writeString(this.LB, dos);

				// String

				writeString(this.LCB, dos);

				// String

				writeString(this.CB, dos);

				// String

				writeString(this.RCB, dos);

				// String

				writeString(this.RB, dos);

				// String

				writeString(this.Crossing, dos);

				// Integer

				writeInteger(this.Finishing, dos);

				// Integer

				writeInteger(this.HeadingAccuracy, dos);

				// Integer

				writeInteger(this.ShortPassing, dos);

				// Integer

				writeInteger(this.Volleys, dos);

				// Integer

				writeInteger(this.Dribbling, dos);

				// Integer

				writeInteger(this.Curve, dos);

				// Integer

				writeInteger(this.FKAccuracy, dos);

				// Integer

				writeInteger(this.LongPassing, dos);

				// Integer

				writeInteger(this.BallControl, dos);

				// Integer

				writeInteger(this.Acceleration, dos);

				// Integer

				writeInteger(this.SprintSpeed, dos);

				// Integer

				writeInteger(this.Agility, dos);

				// Integer

				writeInteger(this.Reactions, dos);

				// Integer

				writeInteger(this.Balance, dos);

				// Integer

				writeInteger(this.ShotPower, dos);

				// Integer

				writeInteger(this.Jumping, dos);

				// Integer

				writeInteger(this.Stamina, dos);

				// Integer

				writeInteger(this.Strength, dos);

				// Integer

				writeInteger(this.LongShots, dos);

				// Integer

				writeInteger(this.Aggression, dos);

				// Integer

				writeInteger(this.Interceptions, dos);

				// Integer

				writeInteger(this.Positioning, dos);

				// Integer

				writeInteger(this.Vision, dos);

				// Integer

				writeInteger(this.Penalties, dos);

				// Integer

				writeInteger(this.Composure, dos);

				// Integer

				writeInteger(this.Marking, dos);

				// Integer

				writeInteger(this.StandingTackle, dos);

				// Integer

				writeInteger(this.SlidingTackle, dos);

				// Integer

				writeInteger(this.GKDiving, dos);

				// Integer

				writeInteger(this.GKHandling, dos);

				// Integer

				writeInteger(this.GKKicking, dos);

				// Integer

				writeInteger(this.GKPositioning, dos);

				// Integer

				writeInteger(this.GKReflexes, dos);

				// Integer

				writeInteger(this.Release_Clause, dos);

				// String

				writeString(this.Column88, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.ID, dos);

				// String

				writeString(this.Name, dos);

				// Integer

				writeInteger(this.Age, dos);

				// String

				writeString(this.Photo, dos);

				// String

				writeString(this.Nationality, dos);

				// String

				writeString(this.Flag, dos);

				// Integer

				writeInteger(this.Overall, dos);

				// Integer

				writeInteger(this.Potential, dos);

				// String

				writeString(this.Club, dos);

				// String

				writeString(this.Club_Logo, dos);

				// String

				writeString(this.Value, dos);

				// String

				writeString(this.Wage, dos);

				// Integer

				writeInteger(this.Special, dos);

				// String

				writeString(this.Preferred_Foot, dos);

				// Integer

				writeInteger(this.International_Reputation, dos);

				// Integer

				writeInteger(this.Weak_Foot, dos);

				// Integer

				writeInteger(this.Skill_Moves, dos);

				// String

				writeString(this.Work_Rate, dos);

				// String

				writeString(this.Body_Type, dos);

				// String

				writeString(this.Real_Face, dos);

				// String

				writeString(this.Position, dos);

				// Integer

				writeInteger(this.Jersey_Number, dos);

				// String

				writeString(this.Joined, dos);

				// String

				writeString(this.Loaned_From, dos);

				// String

				writeString(this.Contract_Valid_Until, dos);

				// Integer

				writeInteger(this.Height, dos);

				// String

				writeString(this.Weight, dos);

				// String

				writeString(this.LS, dos);

				// String

				writeString(this.ST, dos);

				// String

				writeString(this.RS, dos);

				// String

				writeString(this.LW, dos);

				// String

				writeString(this.LF, dos);

				// String

				writeString(this.CF, dos);

				// String

				writeString(this.RF, dos);

				// String

				writeString(this.RW, dos);

				// String

				writeString(this.LAM, dos);

				// String

				writeString(this.CAM, dos);

				// String

				writeString(this.RAM, dos);

				// String

				writeString(this.LM, dos);

				// String

				writeString(this.LCM, dos);

				// String

				writeString(this.CM, dos);

				// String

				writeString(this.RCM, dos);

				// String

				writeString(this.RM, dos);

				// String

				writeString(this.LWB, dos);

				// String

				writeString(this.LDM, dos);

				// String

				writeString(this.CDM, dos);

				// String

				writeString(this.RDM, dos);

				// String

				writeString(this.RWB, dos);

				// String

				writeString(this.LB, dos);

				// String

				writeString(this.LCB, dos);

				// String

				writeString(this.CB, dos);

				// String

				writeString(this.RCB, dos);

				// String

				writeString(this.RB, dos);

				// String

				writeString(this.Crossing, dos);

				// Integer

				writeInteger(this.Finishing, dos);

				// Integer

				writeInteger(this.HeadingAccuracy, dos);

				// Integer

				writeInteger(this.ShortPassing, dos);

				// Integer

				writeInteger(this.Volleys, dos);

				// Integer

				writeInteger(this.Dribbling, dos);

				// Integer

				writeInteger(this.Curve, dos);

				// Integer

				writeInteger(this.FKAccuracy, dos);

				// Integer

				writeInteger(this.LongPassing, dos);

				// Integer

				writeInteger(this.BallControl, dos);

				// Integer

				writeInteger(this.Acceleration, dos);

				// Integer

				writeInteger(this.SprintSpeed, dos);

				// Integer

				writeInteger(this.Agility, dos);

				// Integer

				writeInteger(this.Reactions, dos);

				// Integer

				writeInteger(this.Balance, dos);

				// Integer

				writeInteger(this.ShotPower, dos);

				// Integer

				writeInteger(this.Jumping, dos);

				// Integer

				writeInteger(this.Stamina, dos);

				// Integer

				writeInteger(this.Strength, dos);

				// Integer

				writeInteger(this.LongShots, dos);

				// Integer

				writeInteger(this.Aggression, dos);

				// Integer

				writeInteger(this.Interceptions, dos);

				// Integer

				writeInteger(this.Positioning, dos);

				// Integer

				writeInteger(this.Vision, dos);

				// Integer

				writeInteger(this.Penalties, dos);

				// Integer

				writeInteger(this.Composure, dos);

				// Integer

				writeInteger(this.Marking, dos);

				// Integer

				writeInteger(this.StandingTackle, dos);

				// Integer

				writeInteger(this.SlidingTackle, dos);

				// Integer

				writeInteger(this.GKDiving, dos);

				// Integer

				writeInteger(this.GKHandling, dos);

				// Integer

				writeInteger(this.GKKicking, dos);

				// Integer

				writeInteger(this.GKPositioning, dos);

				// Integer

				writeInteger(this.GKReflexes, dos);

				// Integer

				writeInteger(this.Release_Clause, dos);

				// String

				writeString(this.Column88, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID=" + String.valueOf(ID));
			sb.append(",Name=" + Name);
			sb.append(",Age=" + String.valueOf(Age));
			sb.append(",Photo=" + Photo);
			sb.append(",Nationality=" + Nationality);
			sb.append(",Flag=" + Flag);
			sb.append(",Overall=" + String.valueOf(Overall));
			sb.append(",Potential=" + String.valueOf(Potential));
			sb.append(",Club=" + Club);
			sb.append(",Club_Logo=" + Club_Logo);
			sb.append(",Value=" + Value);
			sb.append(",Wage=" + Wage);
			sb.append(",Special=" + String.valueOf(Special));
			sb.append(",Preferred_Foot=" + Preferred_Foot);
			sb.append(",International_Reputation=" + String.valueOf(International_Reputation));
			sb.append(",Weak_Foot=" + String.valueOf(Weak_Foot));
			sb.append(",Skill_Moves=" + String.valueOf(Skill_Moves));
			sb.append(",Work_Rate=" + Work_Rate);
			sb.append(",Body_Type=" + Body_Type);
			sb.append(",Real_Face=" + Real_Face);
			sb.append(",Position=" + Position);
			sb.append(",Jersey_Number=" + String.valueOf(Jersey_Number));
			sb.append(",Joined=" + Joined);
			sb.append(",Loaned_From=" + Loaned_From);
			sb.append(",Contract_Valid_Until=" + Contract_Valid_Until);
			sb.append(",Height=" + String.valueOf(Height));
			sb.append(",Weight=" + Weight);
			sb.append(",LS=" + LS);
			sb.append(",ST=" + ST);
			sb.append(",RS=" + RS);
			sb.append(",LW=" + LW);
			sb.append(",LF=" + LF);
			sb.append(",CF=" + CF);
			sb.append(",RF=" + RF);
			sb.append(",RW=" + RW);
			sb.append(",LAM=" + LAM);
			sb.append(",CAM=" + CAM);
			sb.append(",RAM=" + RAM);
			sb.append(",LM=" + LM);
			sb.append(",LCM=" + LCM);
			sb.append(",CM=" + CM);
			sb.append(",RCM=" + RCM);
			sb.append(",RM=" + RM);
			sb.append(",LWB=" + LWB);
			sb.append(",LDM=" + LDM);
			sb.append(",CDM=" + CDM);
			sb.append(",RDM=" + RDM);
			sb.append(",RWB=" + RWB);
			sb.append(",LB=" + LB);
			sb.append(",LCB=" + LCB);
			sb.append(",CB=" + CB);
			sb.append(",RCB=" + RCB);
			sb.append(",RB=" + RB);
			sb.append(",Crossing=" + Crossing);
			sb.append(",Finishing=" + String.valueOf(Finishing));
			sb.append(",HeadingAccuracy=" + String.valueOf(HeadingAccuracy));
			sb.append(",ShortPassing=" + String.valueOf(ShortPassing));
			sb.append(",Volleys=" + String.valueOf(Volleys));
			sb.append(",Dribbling=" + String.valueOf(Dribbling));
			sb.append(",Curve=" + String.valueOf(Curve));
			sb.append(",FKAccuracy=" + String.valueOf(FKAccuracy));
			sb.append(",LongPassing=" + String.valueOf(LongPassing));
			sb.append(",BallControl=" + String.valueOf(BallControl));
			sb.append(",Acceleration=" + String.valueOf(Acceleration));
			sb.append(",SprintSpeed=" + String.valueOf(SprintSpeed));
			sb.append(",Agility=" + String.valueOf(Agility));
			sb.append(",Reactions=" + String.valueOf(Reactions));
			sb.append(",Balance=" + String.valueOf(Balance));
			sb.append(",ShotPower=" + String.valueOf(ShotPower));
			sb.append(",Jumping=" + String.valueOf(Jumping));
			sb.append(",Stamina=" + String.valueOf(Stamina));
			sb.append(",Strength=" + String.valueOf(Strength));
			sb.append(",LongShots=" + String.valueOf(LongShots));
			sb.append(",Aggression=" + String.valueOf(Aggression));
			sb.append(",Interceptions=" + String.valueOf(Interceptions));
			sb.append(",Positioning=" + String.valueOf(Positioning));
			sb.append(",Vision=" + String.valueOf(Vision));
			sb.append(",Penalties=" + String.valueOf(Penalties));
			sb.append(",Composure=" + String.valueOf(Composure));
			sb.append(",Marking=" + String.valueOf(Marking));
			sb.append(",StandingTackle=" + String.valueOf(StandingTackle));
			sb.append(",SlidingTackle=" + String.valueOf(SlidingTackle));
			sb.append(",GKDiving=" + String.valueOf(GKDiving));
			sb.append(",GKHandling=" + String.valueOf(GKHandling));
			sb.append(",GKKicking=" + String.valueOf(GKKicking));
			sb.append(",GKPositioning=" + String.valueOf(GKPositioning));
			sb.append(",GKReflexes=" + String.valueOf(GKReflexes));
			sb.append(",Release_Clause=" + String.valueOf(Release_Clause));
			sb.append(",Column88=" + Column88);
			sb.append("]");

			return sb.toString();
		}

		public String toLogString() {
			StringBuilder sb = new StringBuilder();

			if (ID == null) {
				sb.append("<null>");
			} else {
				sb.append(ID);
			}

			sb.append("|");

			if (Name == null) {
				sb.append("<null>");
			} else {
				sb.append(Name);
			}

			sb.append("|");

			if (Age == null) {
				sb.append("<null>");
			} else {
				sb.append(Age);
			}

			sb.append("|");

			if (Photo == null) {
				sb.append("<null>");
			} else {
				sb.append(Photo);
			}

			sb.append("|");

			if (Nationality == null) {
				sb.append("<null>");
			} else {
				sb.append(Nationality);
			}

			sb.append("|");

			if (Flag == null) {
				sb.append("<null>");
			} else {
				sb.append(Flag);
			}

			sb.append("|");

			if (Overall == null) {
				sb.append("<null>");
			} else {
				sb.append(Overall);
			}

			sb.append("|");

			if (Potential == null) {
				sb.append("<null>");
			} else {
				sb.append(Potential);
			}

			sb.append("|");

			if (Club == null) {
				sb.append("<null>");
			} else {
				sb.append(Club);
			}

			sb.append("|");

			if (Club_Logo == null) {
				sb.append("<null>");
			} else {
				sb.append(Club_Logo);
			}

			sb.append("|");

			if (Value == null) {
				sb.append("<null>");
			} else {
				sb.append(Value);
			}

			sb.append("|");

			if (Wage == null) {
				sb.append("<null>");
			} else {
				sb.append(Wage);
			}

			sb.append("|");

			if (Special == null) {
				sb.append("<null>");
			} else {
				sb.append(Special);
			}

			sb.append("|");

			if (Preferred_Foot == null) {
				sb.append("<null>");
			} else {
				sb.append(Preferred_Foot);
			}

			sb.append("|");

			if (International_Reputation == null) {
				sb.append("<null>");
			} else {
				sb.append(International_Reputation);
			}

			sb.append("|");

			if (Weak_Foot == null) {
				sb.append("<null>");
			} else {
				sb.append(Weak_Foot);
			}

			sb.append("|");

			if (Skill_Moves == null) {
				sb.append("<null>");
			} else {
				sb.append(Skill_Moves);
			}

			sb.append("|");

			if (Work_Rate == null) {
				sb.append("<null>");
			} else {
				sb.append(Work_Rate);
			}

			sb.append("|");

			if (Body_Type == null) {
				sb.append("<null>");
			} else {
				sb.append(Body_Type);
			}

			sb.append("|");

			if (Real_Face == null) {
				sb.append("<null>");
			} else {
				sb.append(Real_Face);
			}

			sb.append("|");

			if (Position == null) {
				sb.append("<null>");
			} else {
				sb.append(Position);
			}

			sb.append("|");

			if (Jersey_Number == null) {
				sb.append("<null>");
			} else {
				sb.append(Jersey_Number);
			}

			sb.append("|");

			if (Joined == null) {
				sb.append("<null>");
			} else {
				sb.append(Joined);
			}

			sb.append("|");

			if (Loaned_From == null) {
				sb.append("<null>");
			} else {
				sb.append(Loaned_From);
			}

			sb.append("|");

			if (Contract_Valid_Until == null) {
				sb.append("<null>");
			} else {
				sb.append(Contract_Valid_Until);
			}

			sb.append("|");

			if (Height == null) {
				sb.append("<null>");
			} else {
				sb.append(Height);
			}

			sb.append("|");

			if (Weight == null) {
				sb.append("<null>");
			} else {
				sb.append(Weight);
			}

			sb.append("|");

			if (LS == null) {
				sb.append("<null>");
			} else {
				sb.append(LS);
			}

			sb.append("|");

			if (ST == null) {
				sb.append("<null>");
			} else {
				sb.append(ST);
			}

			sb.append("|");

			if (RS == null) {
				sb.append("<null>");
			} else {
				sb.append(RS);
			}

			sb.append("|");

			if (LW == null) {
				sb.append("<null>");
			} else {
				sb.append(LW);
			}

			sb.append("|");

			if (LF == null) {
				sb.append("<null>");
			} else {
				sb.append(LF);
			}

			sb.append("|");

			if (CF == null) {
				sb.append("<null>");
			} else {
				sb.append(CF);
			}

			sb.append("|");

			if (RF == null) {
				sb.append("<null>");
			} else {
				sb.append(RF);
			}

			sb.append("|");

			if (RW == null) {
				sb.append("<null>");
			} else {
				sb.append(RW);
			}

			sb.append("|");

			if (LAM == null) {
				sb.append("<null>");
			} else {
				sb.append(LAM);
			}

			sb.append("|");

			if (CAM == null) {
				sb.append("<null>");
			} else {
				sb.append(CAM);
			}

			sb.append("|");

			if (RAM == null) {
				sb.append("<null>");
			} else {
				sb.append(RAM);
			}

			sb.append("|");

			if (LM == null) {
				sb.append("<null>");
			} else {
				sb.append(LM);
			}

			sb.append("|");

			if (LCM == null) {
				sb.append("<null>");
			} else {
				sb.append(LCM);
			}

			sb.append("|");

			if (CM == null) {
				sb.append("<null>");
			} else {
				sb.append(CM);
			}

			sb.append("|");

			if (RCM == null) {
				sb.append("<null>");
			} else {
				sb.append(RCM);
			}

			sb.append("|");

			if (RM == null) {
				sb.append("<null>");
			} else {
				sb.append(RM);
			}

			sb.append("|");

			if (LWB == null) {
				sb.append("<null>");
			} else {
				sb.append(LWB);
			}

			sb.append("|");

			if (LDM == null) {
				sb.append("<null>");
			} else {
				sb.append(LDM);
			}

			sb.append("|");

			if (CDM == null) {
				sb.append("<null>");
			} else {
				sb.append(CDM);
			}

			sb.append("|");

			if (RDM == null) {
				sb.append("<null>");
			} else {
				sb.append(RDM);
			}

			sb.append("|");

			if (RWB == null) {
				sb.append("<null>");
			} else {
				sb.append(RWB);
			}

			sb.append("|");

			if (LB == null) {
				sb.append("<null>");
			} else {
				sb.append(LB);
			}

			sb.append("|");

			if (LCB == null) {
				sb.append("<null>");
			} else {
				sb.append(LCB);
			}

			sb.append("|");

			if (CB == null) {
				sb.append("<null>");
			} else {
				sb.append(CB);
			}

			sb.append("|");

			if (RCB == null) {
				sb.append("<null>");
			} else {
				sb.append(RCB);
			}

			sb.append("|");

			if (RB == null) {
				sb.append("<null>");
			} else {
				sb.append(RB);
			}

			sb.append("|");

			if (Crossing == null) {
				sb.append("<null>");
			} else {
				sb.append(Crossing);
			}

			sb.append("|");

			if (Finishing == null) {
				sb.append("<null>");
			} else {
				sb.append(Finishing);
			}

			sb.append("|");

			if (HeadingAccuracy == null) {
				sb.append("<null>");
			} else {
				sb.append(HeadingAccuracy);
			}

			sb.append("|");

			if (ShortPassing == null) {
				sb.append("<null>");
			} else {
				sb.append(ShortPassing);
			}

			sb.append("|");

			if (Volleys == null) {
				sb.append("<null>");
			} else {
				sb.append(Volleys);
			}

			sb.append("|");

			if (Dribbling == null) {
				sb.append("<null>");
			} else {
				sb.append(Dribbling);
			}

			sb.append("|");

			if (Curve == null) {
				sb.append("<null>");
			} else {
				sb.append(Curve);
			}

			sb.append("|");

			if (FKAccuracy == null) {
				sb.append("<null>");
			} else {
				sb.append(FKAccuracy);
			}

			sb.append("|");

			if (LongPassing == null) {
				sb.append("<null>");
			} else {
				sb.append(LongPassing);
			}

			sb.append("|");

			if (BallControl == null) {
				sb.append("<null>");
			} else {
				sb.append(BallControl);
			}

			sb.append("|");

			if (Acceleration == null) {
				sb.append("<null>");
			} else {
				sb.append(Acceleration);
			}

			sb.append("|");

			if (SprintSpeed == null) {
				sb.append("<null>");
			} else {
				sb.append(SprintSpeed);
			}

			sb.append("|");

			if (Agility == null) {
				sb.append("<null>");
			} else {
				sb.append(Agility);
			}

			sb.append("|");

			if (Reactions == null) {
				sb.append("<null>");
			} else {
				sb.append(Reactions);
			}

			sb.append("|");

			if (Balance == null) {
				sb.append("<null>");
			} else {
				sb.append(Balance);
			}

			sb.append("|");

			if (ShotPower == null) {
				sb.append("<null>");
			} else {
				sb.append(ShotPower);
			}

			sb.append("|");

			if (Jumping == null) {
				sb.append("<null>");
			} else {
				sb.append(Jumping);
			}

			sb.append("|");

			if (Stamina == null) {
				sb.append("<null>");
			} else {
				sb.append(Stamina);
			}

			sb.append("|");

			if (Strength == null) {
				sb.append("<null>");
			} else {
				sb.append(Strength);
			}

			sb.append("|");

			if (LongShots == null) {
				sb.append("<null>");
			} else {
				sb.append(LongShots);
			}

			sb.append("|");

			if (Aggression == null) {
				sb.append("<null>");
			} else {
				sb.append(Aggression);
			}

			sb.append("|");

			if (Interceptions == null) {
				sb.append("<null>");
			} else {
				sb.append(Interceptions);
			}

			sb.append("|");

			if (Positioning == null) {
				sb.append("<null>");
			} else {
				sb.append(Positioning);
			}

			sb.append("|");

			if (Vision == null) {
				sb.append("<null>");
			} else {
				sb.append(Vision);
			}

			sb.append("|");

			if (Penalties == null) {
				sb.append("<null>");
			} else {
				sb.append(Penalties);
			}

			sb.append("|");

			if (Composure == null) {
				sb.append("<null>");
			} else {
				sb.append(Composure);
			}

			sb.append("|");

			if (Marking == null) {
				sb.append("<null>");
			} else {
				sb.append(Marking);
			}

			sb.append("|");

			if (StandingTackle == null) {
				sb.append("<null>");
			} else {
				sb.append(StandingTackle);
			}

			sb.append("|");

			if (SlidingTackle == null) {
				sb.append("<null>");
			} else {
				sb.append(SlidingTackle);
			}

			sb.append("|");

			if (GKDiving == null) {
				sb.append("<null>");
			} else {
				sb.append(GKDiving);
			}

			sb.append("|");

			if (GKHandling == null) {
				sb.append("<null>");
			} else {
				sb.append(GKHandling);
			}

			sb.append("|");

			if (GKKicking == null) {
				sb.append("<null>");
			} else {
				sb.append(GKKicking);
			}

			sb.append("|");

			if (GKPositioning == null) {
				sb.append("<null>");
			} else {
				sb.append(GKPositioning);
			}

			sb.append("|");

			if (GKReflexes == null) {
				sb.append("<null>");
			} else {
				sb.append(GKReflexes);
			}

			sb.append("|");

			if (Release_Clause == null) {
				sb.append("<null>");
			} else {
				sb.append(Release_Clause);
			}

			sb.append("|");

			if (Column88 == null) {
				sb.append("<null>");
			} else {
				sb.append(Column88);
			}

			sb.append("|");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID, other.ID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_DEMO_CSVReadNFilter = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer ID;

		public Integer getID() {
			return this.ID;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public Integer Age;

		public Integer getAge() {
			return this.Age;
		}

		public String Photo;

		public String getPhoto() {
			return this.Photo;
		}

		public String Nationality;

		public String getNationality() {
			return this.Nationality;
		}

		public String Flag;

		public String getFlag() {
			return this.Flag;
		}

		public Integer Overall;

		public Integer getOverall() {
			return this.Overall;
		}

		public Integer Potential;

		public Integer getPotential() {
			return this.Potential;
		}

		public String Club;

		public String getClub() {
			return this.Club;
		}

		public String Club_Logo;

		public String getClub_Logo() {
			return this.Club_Logo;
		}

		public String Value;

		public String getValue() {
			return this.Value;
		}

		public String Wage;

		public String getWage() {
			return this.Wage;
		}

		public Integer Special;

		public Integer getSpecial() {
			return this.Special;
		}

		public String Preferred_Foot;

		public String getPreferred_Foot() {
			return this.Preferred_Foot;
		}

		public Integer International_Reputation;

		public Integer getInternational_Reputation() {
			return this.International_Reputation;
		}

		public Integer Weak_Foot;

		public Integer getWeak_Foot() {
			return this.Weak_Foot;
		}

		public Integer Skill_Moves;

		public Integer getSkill_Moves() {
			return this.Skill_Moves;
		}

		public String Work_Rate;

		public String getWork_Rate() {
			return this.Work_Rate;
		}

		public String Body_Type;

		public String getBody_Type() {
			return this.Body_Type;
		}

		public String Real_Face;

		public String getReal_Face() {
			return this.Real_Face;
		}

		public String Position;

		public String getPosition() {
			return this.Position;
		}

		public Integer Jersey_Number;

		public Integer getJersey_Number() {
			return this.Jersey_Number;
		}

		public String Joined;

		public String getJoined() {
			return this.Joined;
		}

		public String Loaned_From;

		public String getLoaned_From() {
			return this.Loaned_From;
		}

		public String Contract_Valid_Until;

		public String getContract_Valid_Until() {
			return this.Contract_Valid_Until;
		}

		public Integer Height;

		public Integer getHeight() {
			return this.Height;
		}

		public String Weight;

		public String getWeight() {
			return this.Weight;
		}

		public String LS;

		public String getLS() {
			return this.LS;
		}

		public String ST;

		public String getST() {
			return this.ST;
		}

		public String RS;

		public String getRS() {
			return this.RS;
		}

		public String LW;

		public String getLW() {
			return this.LW;
		}

		public String LF;

		public String getLF() {
			return this.LF;
		}

		public String CF;

		public String getCF() {
			return this.CF;
		}

		public String RF;

		public String getRF() {
			return this.RF;
		}

		public String RW;

		public String getRW() {
			return this.RW;
		}

		public String LAM;

		public String getLAM() {
			return this.LAM;
		}

		public String CAM;

		public String getCAM() {
			return this.CAM;
		}

		public String RAM;

		public String getRAM() {
			return this.RAM;
		}

		public String LM;

		public String getLM() {
			return this.LM;
		}

		public String LCM;

		public String getLCM() {
			return this.LCM;
		}

		public String CM;

		public String getCM() {
			return this.CM;
		}

		public String RCM;

		public String getRCM() {
			return this.RCM;
		}

		public String RM;

		public String getRM() {
			return this.RM;
		}

		public String LWB;

		public String getLWB() {
			return this.LWB;
		}

		public String LDM;

		public String getLDM() {
			return this.LDM;
		}

		public String CDM;

		public String getCDM() {
			return this.CDM;
		}

		public String RDM;

		public String getRDM() {
			return this.RDM;
		}

		public String RWB;

		public String getRWB() {
			return this.RWB;
		}

		public String LB;

		public String getLB() {
			return this.LB;
		}

		public String LCB;

		public String getLCB() {
			return this.LCB;
		}

		public String CB;

		public String getCB() {
			return this.CB;
		}

		public String RCB;

		public String getRCB() {
			return this.RCB;
		}

		public String RB;

		public String getRB() {
			return this.RB;
		}

		public String Crossing;

		public String getCrossing() {
			return this.Crossing;
		}

		public Integer Finishing;

		public Integer getFinishing() {
			return this.Finishing;
		}

		public Integer HeadingAccuracy;

		public Integer getHeadingAccuracy() {
			return this.HeadingAccuracy;
		}

		public Integer ShortPassing;

		public Integer getShortPassing() {
			return this.ShortPassing;
		}

		public Integer Volleys;

		public Integer getVolleys() {
			return this.Volleys;
		}

		public Integer Dribbling;

		public Integer getDribbling() {
			return this.Dribbling;
		}

		public Integer Curve;

		public Integer getCurve() {
			return this.Curve;
		}

		public Integer FKAccuracy;

		public Integer getFKAccuracy() {
			return this.FKAccuracy;
		}

		public Integer LongPassing;

		public Integer getLongPassing() {
			return this.LongPassing;
		}

		public Integer BallControl;

		public Integer getBallControl() {
			return this.BallControl;
		}

		public Integer Acceleration;

		public Integer getAcceleration() {
			return this.Acceleration;
		}

		public Integer SprintSpeed;

		public Integer getSprintSpeed() {
			return this.SprintSpeed;
		}

		public Integer Agility;

		public Integer getAgility() {
			return this.Agility;
		}

		public Integer Reactions;

		public Integer getReactions() {
			return this.Reactions;
		}

		public Integer Balance;

		public Integer getBalance() {
			return this.Balance;
		}

		public Integer ShotPower;

		public Integer getShotPower() {
			return this.ShotPower;
		}

		public Integer Jumping;

		public Integer getJumping() {
			return this.Jumping;
		}

		public Integer Stamina;

		public Integer getStamina() {
			return this.Stamina;
		}

		public Integer Strength;

		public Integer getStrength() {
			return this.Strength;
		}

		public Integer LongShots;

		public Integer getLongShots() {
			return this.LongShots;
		}

		public Integer Aggression;

		public Integer getAggression() {
			return this.Aggression;
		}

		public Integer Interceptions;

		public Integer getInterceptions() {
			return this.Interceptions;
		}

		public Integer Positioning;

		public Integer getPositioning() {
			return this.Positioning;
		}

		public Integer Vision;

		public Integer getVision() {
			return this.Vision;
		}

		public Integer Penalties;

		public Integer getPenalties() {
			return this.Penalties;
		}

		public Integer Composure;

		public Integer getComposure() {
			return this.Composure;
		}

		public Integer Marking;

		public Integer getMarking() {
			return this.Marking;
		}

		public Integer StandingTackle;

		public Integer getStandingTackle() {
			return this.StandingTackle;
		}

		public Integer SlidingTackle;

		public Integer getSlidingTackle() {
			return this.SlidingTackle;
		}

		public Integer GKDiving;

		public Integer getGKDiving() {
			return this.GKDiving;
		}

		public Integer GKHandling;

		public Integer getGKHandling() {
			return this.GKHandling;
		}

		public Integer GKKicking;

		public Integer getGKKicking() {
			return this.GKKicking;
		}

		public Integer GKPositioning;

		public Integer getGKPositioning() {
			return this.GKPositioning;
		}

		public Integer GKReflexes;

		public Integer getGKReflexes() {
			return this.GKReflexes;
		}

		public Integer Release_Clause;

		public Integer getRelease_Clause() {
			return this.Release_Clause;
		}

		public String Column88;

		public String getColumn88() {
			return this.Column88;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row7Struct other = (row7Struct) obj;

			if (this.ID == null) {
				if (other.ID != null)
					return false;

			} else if (!this.ID.equals(other.ID))

				return false;

			return true;
		}

		public void copyDataTo(row7Struct other) {

			other.ID = this.ID;
			other.Name = this.Name;
			other.Age = this.Age;
			other.Photo = this.Photo;
			other.Nationality = this.Nationality;
			other.Flag = this.Flag;
			other.Overall = this.Overall;
			other.Potential = this.Potential;
			other.Club = this.Club;
			other.Club_Logo = this.Club_Logo;
			other.Value = this.Value;
			other.Wage = this.Wage;
			other.Special = this.Special;
			other.Preferred_Foot = this.Preferred_Foot;
			other.International_Reputation = this.International_Reputation;
			other.Weak_Foot = this.Weak_Foot;
			other.Skill_Moves = this.Skill_Moves;
			other.Work_Rate = this.Work_Rate;
			other.Body_Type = this.Body_Type;
			other.Real_Face = this.Real_Face;
			other.Position = this.Position;
			other.Jersey_Number = this.Jersey_Number;
			other.Joined = this.Joined;
			other.Loaned_From = this.Loaned_From;
			other.Contract_Valid_Until = this.Contract_Valid_Until;
			other.Height = this.Height;
			other.Weight = this.Weight;
			other.LS = this.LS;
			other.ST = this.ST;
			other.RS = this.RS;
			other.LW = this.LW;
			other.LF = this.LF;
			other.CF = this.CF;
			other.RF = this.RF;
			other.RW = this.RW;
			other.LAM = this.LAM;
			other.CAM = this.CAM;
			other.RAM = this.RAM;
			other.LM = this.LM;
			other.LCM = this.LCM;
			other.CM = this.CM;
			other.RCM = this.RCM;
			other.RM = this.RM;
			other.LWB = this.LWB;
			other.LDM = this.LDM;
			other.CDM = this.CDM;
			other.RDM = this.RDM;
			other.RWB = this.RWB;
			other.LB = this.LB;
			other.LCB = this.LCB;
			other.CB = this.CB;
			other.RCB = this.RCB;
			other.RB = this.RB;
			other.Crossing = this.Crossing;
			other.Finishing = this.Finishing;
			other.HeadingAccuracy = this.HeadingAccuracy;
			other.ShortPassing = this.ShortPassing;
			other.Volleys = this.Volleys;
			other.Dribbling = this.Dribbling;
			other.Curve = this.Curve;
			other.FKAccuracy = this.FKAccuracy;
			other.LongPassing = this.LongPassing;
			other.BallControl = this.BallControl;
			other.Acceleration = this.Acceleration;
			other.SprintSpeed = this.SprintSpeed;
			other.Agility = this.Agility;
			other.Reactions = this.Reactions;
			other.Balance = this.Balance;
			other.ShotPower = this.ShotPower;
			other.Jumping = this.Jumping;
			other.Stamina = this.Stamina;
			other.Strength = this.Strength;
			other.LongShots = this.LongShots;
			other.Aggression = this.Aggression;
			other.Interceptions = this.Interceptions;
			other.Positioning = this.Positioning;
			other.Vision = this.Vision;
			other.Penalties = this.Penalties;
			other.Composure = this.Composure;
			other.Marking = this.Marking;
			other.StandingTackle = this.StandingTackle;
			other.SlidingTackle = this.SlidingTackle;
			other.GKDiving = this.GKDiving;
			other.GKHandling = this.GKHandling;
			other.GKKicking = this.GKKicking;
			other.GKPositioning = this.GKPositioning;
			other.GKReflexes = this.GKReflexes;
			other.Release_Clause = this.Release_Clause;
			other.Column88 = this.Column88;

		}

		public void copyKeysDataTo(row7Struct other) {

			other.ID = this.ID;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter.length == 0) {
						commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter.length == 0) {
						commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_DEMO_CSVReadNFilter) {

				try {

					int length = 0;

					this.ID = readInteger(dis);

					this.Name = readString(dis);

					this.Age = readInteger(dis);

					this.Photo = readString(dis);

					this.Nationality = readString(dis);

					this.Flag = readString(dis);

					this.Overall = readInteger(dis);

					this.Potential = readInteger(dis);

					this.Club = readString(dis);

					this.Club_Logo = readString(dis);

					this.Value = readString(dis);

					this.Wage = readString(dis);

					this.Special = readInteger(dis);

					this.Preferred_Foot = readString(dis);

					this.International_Reputation = readInteger(dis);

					this.Weak_Foot = readInteger(dis);

					this.Skill_Moves = readInteger(dis);

					this.Work_Rate = readString(dis);

					this.Body_Type = readString(dis);

					this.Real_Face = readString(dis);

					this.Position = readString(dis);

					this.Jersey_Number = readInteger(dis);

					this.Joined = readString(dis);

					this.Loaned_From = readString(dis);

					this.Contract_Valid_Until = readString(dis);

					this.Height = readInteger(dis);

					this.Weight = readString(dis);

					this.LS = readString(dis);

					this.ST = readString(dis);

					this.RS = readString(dis);

					this.LW = readString(dis);

					this.LF = readString(dis);

					this.CF = readString(dis);

					this.RF = readString(dis);

					this.RW = readString(dis);

					this.LAM = readString(dis);

					this.CAM = readString(dis);

					this.RAM = readString(dis);

					this.LM = readString(dis);

					this.LCM = readString(dis);

					this.CM = readString(dis);

					this.RCM = readString(dis);

					this.RM = readString(dis);

					this.LWB = readString(dis);

					this.LDM = readString(dis);

					this.CDM = readString(dis);

					this.RDM = readString(dis);

					this.RWB = readString(dis);

					this.LB = readString(dis);

					this.LCB = readString(dis);

					this.CB = readString(dis);

					this.RCB = readString(dis);

					this.RB = readString(dis);

					this.Crossing = readString(dis);

					this.Finishing = readInteger(dis);

					this.HeadingAccuracy = readInteger(dis);

					this.ShortPassing = readInteger(dis);

					this.Volleys = readInteger(dis);

					this.Dribbling = readInteger(dis);

					this.Curve = readInteger(dis);

					this.FKAccuracy = readInteger(dis);

					this.LongPassing = readInteger(dis);

					this.BallControl = readInteger(dis);

					this.Acceleration = readInteger(dis);

					this.SprintSpeed = readInteger(dis);

					this.Agility = readInteger(dis);

					this.Reactions = readInteger(dis);

					this.Balance = readInteger(dis);

					this.ShotPower = readInteger(dis);

					this.Jumping = readInteger(dis);

					this.Stamina = readInteger(dis);

					this.Strength = readInteger(dis);

					this.LongShots = readInteger(dis);

					this.Aggression = readInteger(dis);

					this.Interceptions = readInteger(dis);

					this.Positioning = readInteger(dis);

					this.Vision = readInteger(dis);

					this.Penalties = readInteger(dis);

					this.Composure = readInteger(dis);

					this.Marking = readInteger(dis);

					this.StandingTackle = readInteger(dis);

					this.SlidingTackle = readInteger(dis);

					this.GKDiving = readInteger(dis);

					this.GKHandling = readInteger(dis);

					this.GKKicking = readInteger(dis);

					this.GKPositioning = readInteger(dis);

					this.GKReflexes = readInteger(dis);

					this.Release_Clause = readInteger(dis);

					this.Column88 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_DEMO_CSVReadNFilter) {

				try {

					int length = 0;

					this.ID = readInteger(dis);

					this.Name = readString(dis);

					this.Age = readInteger(dis);

					this.Photo = readString(dis);

					this.Nationality = readString(dis);

					this.Flag = readString(dis);

					this.Overall = readInteger(dis);

					this.Potential = readInteger(dis);

					this.Club = readString(dis);

					this.Club_Logo = readString(dis);

					this.Value = readString(dis);

					this.Wage = readString(dis);

					this.Special = readInteger(dis);

					this.Preferred_Foot = readString(dis);

					this.International_Reputation = readInteger(dis);

					this.Weak_Foot = readInteger(dis);

					this.Skill_Moves = readInteger(dis);

					this.Work_Rate = readString(dis);

					this.Body_Type = readString(dis);

					this.Real_Face = readString(dis);

					this.Position = readString(dis);

					this.Jersey_Number = readInteger(dis);

					this.Joined = readString(dis);

					this.Loaned_From = readString(dis);

					this.Contract_Valid_Until = readString(dis);

					this.Height = readInteger(dis);

					this.Weight = readString(dis);

					this.LS = readString(dis);

					this.ST = readString(dis);

					this.RS = readString(dis);

					this.LW = readString(dis);

					this.LF = readString(dis);

					this.CF = readString(dis);

					this.RF = readString(dis);

					this.RW = readString(dis);

					this.LAM = readString(dis);

					this.CAM = readString(dis);

					this.RAM = readString(dis);

					this.LM = readString(dis);

					this.LCM = readString(dis);

					this.CM = readString(dis);

					this.RCM = readString(dis);

					this.RM = readString(dis);

					this.LWB = readString(dis);

					this.LDM = readString(dis);

					this.CDM = readString(dis);

					this.RDM = readString(dis);

					this.RWB = readString(dis);

					this.LB = readString(dis);

					this.LCB = readString(dis);

					this.CB = readString(dis);

					this.RCB = readString(dis);

					this.RB = readString(dis);

					this.Crossing = readString(dis);

					this.Finishing = readInteger(dis);

					this.HeadingAccuracy = readInteger(dis);

					this.ShortPassing = readInteger(dis);

					this.Volleys = readInteger(dis);

					this.Dribbling = readInteger(dis);

					this.Curve = readInteger(dis);

					this.FKAccuracy = readInteger(dis);

					this.LongPassing = readInteger(dis);

					this.BallControl = readInteger(dis);

					this.Acceleration = readInteger(dis);

					this.SprintSpeed = readInteger(dis);

					this.Agility = readInteger(dis);

					this.Reactions = readInteger(dis);

					this.Balance = readInteger(dis);

					this.ShotPower = readInteger(dis);

					this.Jumping = readInteger(dis);

					this.Stamina = readInteger(dis);

					this.Strength = readInteger(dis);

					this.LongShots = readInteger(dis);

					this.Aggression = readInteger(dis);

					this.Interceptions = readInteger(dis);

					this.Positioning = readInteger(dis);

					this.Vision = readInteger(dis);

					this.Penalties = readInteger(dis);

					this.Composure = readInteger(dis);

					this.Marking = readInteger(dis);

					this.StandingTackle = readInteger(dis);

					this.SlidingTackle = readInteger(dis);

					this.GKDiving = readInteger(dis);

					this.GKHandling = readInteger(dis);

					this.GKKicking = readInteger(dis);

					this.GKPositioning = readInteger(dis);

					this.GKReflexes = readInteger(dis);

					this.Release_Clause = readInteger(dis);

					this.Column88 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.ID, dos);

				// String

				writeString(this.Name, dos);

				// Integer

				writeInteger(this.Age, dos);

				// String

				writeString(this.Photo, dos);

				// String

				writeString(this.Nationality, dos);

				// String

				writeString(this.Flag, dos);

				// Integer

				writeInteger(this.Overall, dos);

				// Integer

				writeInteger(this.Potential, dos);

				// String

				writeString(this.Club, dos);

				// String

				writeString(this.Club_Logo, dos);

				// String

				writeString(this.Value, dos);

				// String

				writeString(this.Wage, dos);

				// Integer

				writeInteger(this.Special, dos);

				// String

				writeString(this.Preferred_Foot, dos);

				// Integer

				writeInteger(this.International_Reputation, dos);

				// Integer

				writeInteger(this.Weak_Foot, dos);

				// Integer

				writeInteger(this.Skill_Moves, dos);

				// String

				writeString(this.Work_Rate, dos);

				// String

				writeString(this.Body_Type, dos);

				// String

				writeString(this.Real_Face, dos);

				// String

				writeString(this.Position, dos);

				// Integer

				writeInteger(this.Jersey_Number, dos);

				// String

				writeString(this.Joined, dos);

				// String

				writeString(this.Loaned_From, dos);

				// String

				writeString(this.Contract_Valid_Until, dos);

				// Integer

				writeInteger(this.Height, dos);

				// String

				writeString(this.Weight, dos);

				// String

				writeString(this.LS, dos);

				// String

				writeString(this.ST, dos);

				// String

				writeString(this.RS, dos);

				// String

				writeString(this.LW, dos);

				// String

				writeString(this.LF, dos);

				// String

				writeString(this.CF, dos);

				// String

				writeString(this.RF, dos);

				// String

				writeString(this.RW, dos);

				// String

				writeString(this.LAM, dos);

				// String

				writeString(this.CAM, dos);

				// String

				writeString(this.RAM, dos);

				// String

				writeString(this.LM, dos);

				// String

				writeString(this.LCM, dos);

				// String

				writeString(this.CM, dos);

				// String

				writeString(this.RCM, dos);

				// String

				writeString(this.RM, dos);

				// String

				writeString(this.LWB, dos);

				// String

				writeString(this.LDM, dos);

				// String

				writeString(this.CDM, dos);

				// String

				writeString(this.RDM, dos);

				// String

				writeString(this.RWB, dos);

				// String

				writeString(this.LB, dos);

				// String

				writeString(this.LCB, dos);

				// String

				writeString(this.CB, dos);

				// String

				writeString(this.RCB, dos);

				// String

				writeString(this.RB, dos);

				// String

				writeString(this.Crossing, dos);

				// Integer

				writeInteger(this.Finishing, dos);

				// Integer

				writeInteger(this.HeadingAccuracy, dos);

				// Integer

				writeInteger(this.ShortPassing, dos);

				// Integer

				writeInteger(this.Volleys, dos);

				// Integer

				writeInteger(this.Dribbling, dos);

				// Integer

				writeInteger(this.Curve, dos);

				// Integer

				writeInteger(this.FKAccuracy, dos);

				// Integer

				writeInteger(this.LongPassing, dos);

				// Integer

				writeInteger(this.BallControl, dos);

				// Integer

				writeInteger(this.Acceleration, dos);

				// Integer

				writeInteger(this.SprintSpeed, dos);

				// Integer

				writeInteger(this.Agility, dos);

				// Integer

				writeInteger(this.Reactions, dos);

				// Integer

				writeInteger(this.Balance, dos);

				// Integer

				writeInteger(this.ShotPower, dos);

				// Integer

				writeInteger(this.Jumping, dos);

				// Integer

				writeInteger(this.Stamina, dos);

				// Integer

				writeInteger(this.Strength, dos);

				// Integer

				writeInteger(this.LongShots, dos);

				// Integer

				writeInteger(this.Aggression, dos);

				// Integer

				writeInteger(this.Interceptions, dos);

				// Integer

				writeInteger(this.Positioning, dos);

				// Integer

				writeInteger(this.Vision, dos);

				// Integer

				writeInteger(this.Penalties, dos);

				// Integer

				writeInteger(this.Composure, dos);

				// Integer

				writeInteger(this.Marking, dos);

				// Integer

				writeInteger(this.StandingTackle, dos);

				// Integer

				writeInteger(this.SlidingTackle, dos);

				// Integer

				writeInteger(this.GKDiving, dos);

				// Integer

				writeInteger(this.GKHandling, dos);

				// Integer

				writeInteger(this.GKKicking, dos);

				// Integer

				writeInteger(this.GKPositioning, dos);

				// Integer

				writeInteger(this.GKReflexes, dos);

				// Integer

				writeInteger(this.Release_Clause, dos);

				// String

				writeString(this.Column88, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.ID, dos);

				// String

				writeString(this.Name, dos);

				// Integer

				writeInteger(this.Age, dos);

				// String

				writeString(this.Photo, dos);

				// String

				writeString(this.Nationality, dos);

				// String

				writeString(this.Flag, dos);

				// Integer

				writeInteger(this.Overall, dos);

				// Integer

				writeInteger(this.Potential, dos);

				// String

				writeString(this.Club, dos);

				// String

				writeString(this.Club_Logo, dos);

				// String

				writeString(this.Value, dos);

				// String

				writeString(this.Wage, dos);

				// Integer

				writeInteger(this.Special, dos);

				// String

				writeString(this.Preferred_Foot, dos);

				// Integer

				writeInteger(this.International_Reputation, dos);

				// Integer

				writeInteger(this.Weak_Foot, dos);

				// Integer

				writeInteger(this.Skill_Moves, dos);

				// String

				writeString(this.Work_Rate, dos);

				// String

				writeString(this.Body_Type, dos);

				// String

				writeString(this.Real_Face, dos);

				// String

				writeString(this.Position, dos);

				// Integer

				writeInteger(this.Jersey_Number, dos);

				// String

				writeString(this.Joined, dos);

				// String

				writeString(this.Loaned_From, dos);

				// String

				writeString(this.Contract_Valid_Until, dos);

				// Integer

				writeInteger(this.Height, dos);

				// String

				writeString(this.Weight, dos);

				// String

				writeString(this.LS, dos);

				// String

				writeString(this.ST, dos);

				// String

				writeString(this.RS, dos);

				// String

				writeString(this.LW, dos);

				// String

				writeString(this.LF, dos);

				// String

				writeString(this.CF, dos);

				// String

				writeString(this.RF, dos);

				// String

				writeString(this.RW, dos);

				// String

				writeString(this.LAM, dos);

				// String

				writeString(this.CAM, dos);

				// String

				writeString(this.RAM, dos);

				// String

				writeString(this.LM, dos);

				// String

				writeString(this.LCM, dos);

				// String

				writeString(this.CM, dos);

				// String

				writeString(this.RCM, dos);

				// String

				writeString(this.RM, dos);

				// String

				writeString(this.LWB, dos);

				// String

				writeString(this.LDM, dos);

				// String

				writeString(this.CDM, dos);

				// String

				writeString(this.RDM, dos);

				// String

				writeString(this.RWB, dos);

				// String

				writeString(this.LB, dos);

				// String

				writeString(this.LCB, dos);

				// String

				writeString(this.CB, dos);

				// String

				writeString(this.RCB, dos);

				// String

				writeString(this.RB, dos);

				// String

				writeString(this.Crossing, dos);

				// Integer

				writeInteger(this.Finishing, dos);

				// Integer

				writeInteger(this.HeadingAccuracy, dos);

				// Integer

				writeInteger(this.ShortPassing, dos);

				// Integer

				writeInteger(this.Volleys, dos);

				// Integer

				writeInteger(this.Dribbling, dos);

				// Integer

				writeInteger(this.Curve, dos);

				// Integer

				writeInteger(this.FKAccuracy, dos);

				// Integer

				writeInteger(this.LongPassing, dos);

				// Integer

				writeInteger(this.BallControl, dos);

				// Integer

				writeInteger(this.Acceleration, dos);

				// Integer

				writeInteger(this.SprintSpeed, dos);

				// Integer

				writeInteger(this.Agility, dos);

				// Integer

				writeInteger(this.Reactions, dos);

				// Integer

				writeInteger(this.Balance, dos);

				// Integer

				writeInteger(this.ShotPower, dos);

				// Integer

				writeInteger(this.Jumping, dos);

				// Integer

				writeInteger(this.Stamina, dos);

				// Integer

				writeInteger(this.Strength, dos);

				// Integer

				writeInteger(this.LongShots, dos);

				// Integer

				writeInteger(this.Aggression, dos);

				// Integer

				writeInteger(this.Interceptions, dos);

				// Integer

				writeInteger(this.Positioning, dos);

				// Integer

				writeInteger(this.Vision, dos);

				// Integer

				writeInteger(this.Penalties, dos);

				// Integer

				writeInteger(this.Composure, dos);

				// Integer

				writeInteger(this.Marking, dos);

				// Integer

				writeInteger(this.StandingTackle, dos);

				// Integer

				writeInteger(this.SlidingTackle, dos);

				// Integer

				writeInteger(this.GKDiving, dos);

				// Integer

				writeInteger(this.GKHandling, dos);

				// Integer

				writeInteger(this.GKKicking, dos);

				// Integer

				writeInteger(this.GKPositioning, dos);

				// Integer

				writeInteger(this.GKReflexes, dos);

				// Integer

				writeInteger(this.Release_Clause, dos);

				// String

				writeString(this.Column88, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID=" + String.valueOf(ID));
			sb.append(",Name=" + Name);
			sb.append(",Age=" + String.valueOf(Age));
			sb.append(",Photo=" + Photo);
			sb.append(",Nationality=" + Nationality);
			sb.append(",Flag=" + Flag);
			sb.append(",Overall=" + String.valueOf(Overall));
			sb.append(",Potential=" + String.valueOf(Potential));
			sb.append(",Club=" + Club);
			sb.append(",Club_Logo=" + Club_Logo);
			sb.append(",Value=" + Value);
			sb.append(",Wage=" + Wage);
			sb.append(",Special=" + String.valueOf(Special));
			sb.append(",Preferred_Foot=" + Preferred_Foot);
			sb.append(",International_Reputation=" + String.valueOf(International_Reputation));
			sb.append(",Weak_Foot=" + String.valueOf(Weak_Foot));
			sb.append(",Skill_Moves=" + String.valueOf(Skill_Moves));
			sb.append(",Work_Rate=" + Work_Rate);
			sb.append(",Body_Type=" + Body_Type);
			sb.append(",Real_Face=" + Real_Face);
			sb.append(",Position=" + Position);
			sb.append(",Jersey_Number=" + String.valueOf(Jersey_Number));
			sb.append(",Joined=" + Joined);
			sb.append(",Loaned_From=" + Loaned_From);
			sb.append(",Contract_Valid_Until=" + Contract_Valid_Until);
			sb.append(",Height=" + String.valueOf(Height));
			sb.append(",Weight=" + Weight);
			sb.append(",LS=" + LS);
			sb.append(",ST=" + ST);
			sb.append(",RS=" + RS);
			sb.append(",LW=" + LW);
			sb.append(",LF=" + LF);
			sb.append(",CF=" + CF);
			sb.append(",RF=" + RF);
			sb.append(",RW=" + RW);
			sb.append(",LAM=" + LAM);
			sb.append(",CAM=" + CAM);
			sb.append(",RAM=" + RAM);
			sb.append(",LM=" + LM);
			sb.append(",LCM=" + LCM);
			sb.append(",CM=" + CM);
			sb.append(",RCM=" + RCM);
			sb.append(",RM=" + RM);
			sb.append(",LWB=" + LWB);
			sb.append(",LDM=" + LDM);
			sb.append(",CDM=" + CDM);
			sb.append(",RDM=" + RDM);
			sb.append(",RWB=" + RWB);
			sb.append(",LB=" + LB);
			sb.append(",LCB=" + LCB);
			sb.append(",CB=" + CB);
			sb.append(",RCB=" + RCB);
			sb.append(",RB=" + RB);
			sb.append(",Crossing=" + Crossing);
			sb.append(",Finishing=" + String.valueOf(Finishing));
			sb.append(",HeadingAccuracy=" + String.valueOf(HeadingAccuracy));
			sb.append(",ShortPassing=" + String.valueOf(ShortPassing));
			sb.append(",Volleys=" + String.valueOf(Volleys));
			sb.append(",Dribbling=" + String.valueOf(Dribbling));
			sb.append(",Curve=" + String.valueOf(Curve));
			sb.append(",FKAccuracy=" + String.valueOf(FKAccuracy));
			sb.append(",LongPassing=" + String.valueOf(LongPassing));
			sb.append(",BallControl=" + String.valueOf(BallControl));
			sb.append(",Acceleration=" + String.valueOf(Acceleration));
			sb.append(",SprintSpeed=" + String.valueOf(SprintSpeed));
			sb.append(",Agility=" + String.valueOf(Agility));
			sb.append(",Reactions=" + String.valueOf(Reactions));
			sb.append(",Balance=" + String.valueOf(Balance));
			sb.append(",ShotPower=" + String.valueOf(ShotPower));
			sb.append(",Jumping=" + String.valueOf(Jumping));
			sb.append(",Stamina=" + String.valueOf(Stamina));
			sb.append(",Strength=" + String.valueOf(Strength));
			sb.append(",LongShots=" + String.valueOf(LongShots));
			sb.append(",Aggression=" + String.valueOf(Aggression));
			sb.append(",Interceptions=" + String.valueOf(Interceptions));
			sb.append(",Positioning=" + String.valueOf(Positioning));
			sb.append(",Vision=" + String.valueOf(Vision));
			sb.append(",Penalties=" + String.valueOf(Penalties));
			sb.append(",Composure=" + String.valueOf(Composure));
			sb.append(",Marking=" + String.valueOf(Marking));
			sb.append(",StandingTackle=" + String.valueOf(StandingTackle));
			sb.append(",SlidingTackle=" + String.valueOf(SlidingTackle));
			sb.append(",GKDiving=" + String.valueOf(GKDiving));
			sb.append(",GKHandling=" + String.valueOf(GKHandling));
			sb.append(",GKKicking=" + String.valueOf(GKKicking));
			sb.append(",GKPositioning=" + String.valueOf(GKPositioning));
			sb.append(",GKReflexes=" + String.valueOf(GKReflexes));
			sb.append(",Release_Clause=" + String.valueOf(Release_Clause));
			sb.append(",Column88=" + Column88);
			sb.append("]");

			return sb.toString();
		}

		public String toLogString() {
			StringBuilder sb = new StringBuilder();

			if (ID == null) {
				sb.append("<null>");
			} else {
				sb.append(ID);
			}

			sb.append("|");

			if (Name == null) {
				sb.append("<null>");
			} else {
				sb.append(Name);
			}

			sb.append("|");

			if (Age == null) {
				sb.append("<null>");
			} else {
				sb.append(Age);
			}

			sb.append("|");

			if (Photo == null) {
				sb.append("<null>");
			} else {
				sb.append(Photo);
			}

			sb.append("|");

			if (Nationality == null) {
				sb.append("<null>");
			} else {
				sb.append(Nationality);
			}

			sb.append("|");

			if (Flag == null) {
				sb.append("<null>");
			} else {
				sb.append(Flag);
			}

			sb.append("|");

			if (Overall == null) {
				sb.append("<null>");
			} else {
				sb.append(Overall);
			}

			sb.append("|");

			if (Potential == null) {
				sb.append("<null>");
			} else {
				sb.append(Potential);
			}

			sb.append("|");

			if (Club == null) {
				sb.append("<null>");
			} else {
				sb.append(Club);
			}

			sb.append("|");

			if (Club_Logo == null) {
				sb.append("<null>");
			} else {
				sb.append(Club_Logo);
			}

			sb.append("|");

			if (Value == null) {
				sb.append("<null>");
			} else {
				sb.append(Value);
			}

			sb.append("|");

			if (Wage == null) {
				sb.append("<null>");
			} else {
				sb.append(Wage);
			}

			sb.append("|");

			if (Special == null) {
				sb.append("<null>");
			} else {
				sb.append(Special);
			}

			sb.append("|");

			if (Preferred_Foot == null) {
				sb.append("<null>");
			} else {
				sb.append(Preferred_Foot);
			}

			sb.append("|");

			if (International_Reputation == null) {
				sb.append("<null>");
			} else {
				sb.append(International_Reputation);
			}

			sb.append("|");

			if (Weak_Foot == null) {
				sb.append("<null>");
			} else {
				sb.append(Weak_Foot);
			}

			sb.append("|");

			if (Skill_Moves == null) {
				sb.append("<null>");
			} else {
				sb.append(Skill_Moves);
			}

			sb.append("|");

			if (Work_Rate == null) {
				sb.append("<null>");
			} else {
				sb.append(Work_Rate);
			}

			sb.append("|");

			if (Body_Type == null) {
				sb.append("<null>");
			} else {
				sb.append(Body_Type);
			}

			sb.append("|");

			if (Real_Face == null) {
				sb.append("<null>");
			} else {
				sb.append(Real_Face);
			}

			sb.append("|");

			if (Position == null) {
				sb.append("<null>");
			} else {
				sb.append(Position);
			}

			sb.append("|");

			if (Jersey_Number == null) {
				sb.append("<null>");
			} else {
				sb.append(Jersey_Number);
			}

			sb.append("|");

			if (Joined == null) {
				sb.append("<null>");
			} else {
				sb.append(Joined);
			}

			sb.append("|");

			if (Loaned_From == null) {
				sb.append("<null>");
			} else {
				sb.append(Loaned_From);
			}

			sb.append("|");

			if (Contract_Valid_Until == null) {
				sb.append("<null>");
			} else {
				sb.append(Contract_Valid_Until);
			}

			sb.append("|");

			if (Height == null) {
				sb.append("<null>");
			} else {
				sb.append(Height);
			}

			sb.append("|");

			if (Weight == null) {
				sb.append("<null>");
			} else {
				sb.append(Weight);
			}

			sb.append("|");

			if (LS == null) {
				sb.append("<null>");
			} else {
				sb.append(LS);
			}

			sb.append("|");

			if (ST == null) {
				sb.append("<null>");
			} else {
				sb.append(ST);
			}

			sb.append("|");

			if (RS == null) {
				sb.append("<null>");
			} else {
				sb.append(RS);
			}

			sb.append("|");

			if (LW == null) {
				sb.append("<null>");
			} else {
				sb.append(LW);
			}

			sb.append("|");

			if (LF == null) {
				sb.append("<null>");
			} else {
				sb.append(LF);
			}

			sb.append("|");

			if (CF == null) {
				sb.append("<null>");
			} else {
				sb.append(CF);
			}

			sb.append("|");

			if (RF == null) {
				sb.append("<null>");
			} else {
				sb.append(RF);
			}

			sb.append("|");

			if (RW == null) {
				sb.append("<null>");
			} else {
				sb.append(RW);
			}

			sb.append("|");

			if (LAM == null) {
				sb.append("<null>");
			} else {
				sb.append(LAM);
			}

			sb.append("|");

			if (CAM == null) {
				sb.append("<null>");
			} else {
				sb.append(CAM);
			}

			sb.append("|");

			if (RAM == null) {
				sb.append("<null>");
			} else {
				sb.append(RAM);
			}

			sb.append("|");

			if (LM == null) {
				sb.append("<null>");
			} else {
				sb.append(LM);
			}

			sb.append("|");

			if (LCM == null) {
				sb.append("<null>");
			} else {
				sb.append(LCM);
			}

			sb.append("|");

			if (CM == null) {
				sb.append("<null>");
			} else {
				sb.append(CM);
			}

			sb.append("|");

			if (RCM == null) {
				sb.append("<null>");
			} else {
				sb.append(RCM);
			}

			sb.append("|");

			if (RM == null) {
				sb.append("<null>");
			} else {
				sb.append(RM);
			}

			sb.append("|");

			if (LWB == null) {
				sb.append("<null>");
			} else {
				sb.append(LWB);
			}

			sb.append("|");

			if (LDM == null) {
				sb.append("<null>");
			} else {
				sb.append(LDM);
			}

			sb.append("|");

			if (CDM == null) {
				sb.append("<null>");
			} else {
				sb.append(CDM);
			}

			sb.append("|");

			if (RDM == null) {
				sb.append("<null>");
			} else {
				sb.append(RDM);
			}

			sb.append("|");

			if (RWB == null) {
				sb.append("<null>");
			} else {
				sb.append(RWB);
			}

			sb.append("|");

			if (LB == null) {
				sb.append("<null>");
			} else {
				sb.append(LB);
			}

			sb.append("|");

			if (LCB == null) {
				sb.append("<null>");
			} else {
				sb.append(LCB);
			}

			sb.append("|");

			if (CB == null) {
				sb.append("<null>");
			} else {
				sb.append(CB);
			}

			sb.append("|");

			if (RCB == null) {
				sb.append("<null>");
			} else {
				sb.append(RCB);
			}

			sb.append("|");

			if (RB == null) {
				sb.append("<null>");
			} else {
				sb.append(RB);
			}

			sb.append("|");

			if (Crossing == null) {
				sb.append("<null>");
			} else {
				sb.append(Crossing);
			}

			sb.append("|");

			if (Finishing == null) {
				sb.append("<null>");
			} else {
				sb.append(Finishing);
			}

			sb.append("|");

			if (HeadingAccuracy == null) {
				sb.append("<null>");
			} else {
				sb.append(HeadingAccuracy);
			}

			sb.append("|");

			if (ShortPassing == null) {
				sb.append("<null>");
			} else {
				sb.append(ShortPassing);
			}

			sb.append("|");

			if (Volleys == null) {
				sb.append("<null>");
			} else {
				sb.append(Volleys);
			}

			sb.append("|");

			if (Dribbling == null) {
				sb.append("<null>");
			} else {
				sb.append(Dribbling);
			}

			sb.append("|");

			if (Curve == null) {
				sb.append("<null>");
			} else {
				sb.append(Curve);
			}

			sb.append("|");

			if (FKAccuracy == null) {
				sb.append("<null>");
			} else {
				sb.append(FKAccuracy);
			}

			sb.append("|");

			if (LongPassing == null) {
				sb.append("<null>");
			} else {
				sb.append(LongPassing);
			}

			sb.append("|");

			if (BallControl == null) {
				sb.append("<null>");
			} else {
				sb.append(BallControl);
			}

			sb.append("|");

			if (Acceleration == null) {
				sb.append("<null>");
			} else {
				sb.append(Acceleration);
			}

			sb.append("|");

			if (SprintSpeed == null) {
				sb.append("<null>");
			} else {
				sb.append(SprintSpeed);
			}

			sb.append("|");

			if (Agility == null) {
				sb.append("<null>");
			} else {
				sb.append(Agility);
			}

			sb.append("|");

			if (Reactions == null) {
				sb.append("<null>");
			} else {
				sb.append(Reactions);
			}

			sb.append("|");

			if (Balance == null) {
				sb.append("<null>");
			} else {
				sb.append(Balance);
			}

			sb.append("|");

			if (ShotPower == null) {
				sb.append("<null>");
			} else {
				sb.append(ShotPower);
			}

			sb.append("|");

			if (Jumping == null) {
				sb.append("<null>");
			} else {
				sb.append(Jumping);
			}

			sb.append("|");

			if (Stamina == null) {
				sb.append("<null>");
			} else {
				sb.append(Stamina);
			}

			sb.append("|");

			if (Strength == null) {
				sb.append("<null>");
			} else {
				sb.append(Strength);
			}

			sb.append("|");

			if (LongShots == null) {
				sb.append("<null>");
			} else {
				sb.append(LongShots);
			}

			sb.append("|");

			if (Aggression == null) {
				sb.append("<null>");
			} else {
				sb.append(Aggression);
			}

			sb.append("|");

			if (Interceptions == null) {
				sb.append("<null>");
			} else {
				sb.append(Interceptions);
			}

			sb.append("|");

			if (Positioning == null) {
				sb.append("<null>");
			} else {
				sb.append(Positioning);
			}

			sb.append("|");

			if (Vision == null) {
				sb.append("<null>");
			} else {
				sb.append(Vision);
			}

			sb.append("|");

			if (Penalties == null) {
				sb.append("<null>");
			} else {
				sb.append(Penalties);
			}

			sb.append("|");

			if (Composure == null) {
				sb.append("<null>");
			} else {
				sb.append(Composure);
			}

			sb.append("|");

			if (Marking == null) {
				sb.append("<null>");
			} else {
				sb.append(Marking);
			}

			sb.append("|");

			if (StandingTackle == null) {
				sb.append("<null>");
			} else {
				sb.append(StandingTackle);
			}

			sb.append("|");

			if (SlidingTackle == null) {
				sb.append("<null>");
			} else {
				sb.append(SlidingTackle);
			}

			sb.append("|");

			if (GKDiving == null) {
				sb.append("<null>");
			} else {
				sb.append(GKDiving);
			}

			sb.append("|");

			if (GKHandling == null) {
				sb.append("<null>");
			} else {
				sb.append(GKHandling);
			}

			sb.append("|");

			if (GKKicking == null) {
				sb.append("<null>");
			} else {
				sb.append(GKKicking);
			}

			sb.append("|");

			if (GKPositioning == null) {
				sb.append("<null>");
			} else {
				sb.append(GKPositioning);
			}

			sb.append("|");

			if (GKReflexes == null) {
				sb.append("<null>");
			} else {
				sb.append(GKReflexes);
			}

			sb.append("|");

			if (Release_Clause == null) {
				sb.append("<null>");
			} else {
				sb.append(Release_Clause);
			}

			sb.append("|");

			if (Column88 == null) {
				sb.append("<null>");
			} else {
				sb.append(Column88);
			}

			sb.append("|");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID, other.ID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_DEMO_CSVReadNFilter = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer ID;

		public Integer getID() {
			return this.ID;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public Integer Age;

		public Integer getAge() {
			return this.Age;
		}

		public String Photo;

		public String getPhoto() {
			return this.Photo;
		}

		public String Nationality;

		public String getNationality() {
			return this.Nationality;
		}

		public String Flag;

		public String getFlag() {
			return this.Flag;
		}

		public Integer Overall;

		public Integer getOverall() {
			return this.Overall;
		}

		public Integer Potential;

		public Integer getPotential() {
			return this.Potential;
		}

		public String Club;

		public String getClub() {
			return this.Club;
		}

		public String Club_Logo;

		public String getClub_Logo() {
			return this.Club_Logo;
		}

		public String Value;

		public String getValue() {
			return this.Value;
		}

		public String Wage;

		public String getWage() {
			return this.Wage;
		}

		public Integer Special;

		public Integer getSpecial() {
			return this.Special;
		}

		public String Preferred_Foot;

		public String getPreferred_Foot() {
			return this.Preferred_Foot;
		}

		public Integer International_Reputation;

		public Integer getInternational_Reputation() {
			return this.International_Reputation;
		}

		public Integer Weak_Foot;

		public Integer getWeak_Foot() {
			return this.Weak_Foot;
		}

		public Integer Skill_Moves;

		public Integer getSkill_Moves() {
			return this.Skill_Moves;
		}

		public String Work_Rate;

		public String getWork_Rate() {
			return this.Work_Rate;
		}

		public String Body_Type;

		public String getBody_Type() {
			return this.Body_Type;
		}

		public String Real_Face;

		public String getReal_Face() {
			return this.Real_Face;
		}

		public String Position;

		public String getPosition() {
			return this.Position;
		}

		public Integer Jersey_Number;

		public Integer getJersey_Number() {
			return this.Jersey_Number;
		}

		public String Joined;

		public String getJoined() {
			return this.Joined;
		}

		public String Loaned_From;

		public String getLoaned_From() {
			return this.Loaned_From;
		}

		public String Contract_Valid_Until;

		public String getContract_Valid_Until() {
			return this.Contract_Valid_Until;
		}

		public Integer Height;

		public Integer getHeight() {
			return this.Height;
		}

		public String Weight;

		public String getWeight() {
			return this.Weight;
		}

		public String LS;

		public String getLS() {
			return this.LS;
		}

		public String ST;

		public String getST() {
			return this.ST;
		}

		public String RS;

		public String getRS() {
			return this.RS;
		}

		public String LW;

		public String getLW() {
			return this.LW;
		}

		public String LF;

		public String getLF() {
			return this.LF;
		}

		public String CF;

		public String getCF() {
			return this.CF;
		}

		public String RF;

		public String getRF() {
			return this.RF;
		}

		public String RW;

		public String getRW() {
			return this.RW;
		}

		public String LAM;

		public String getLAM() {
			return this.LAM;
		}

		public String CAM;

		public String getCAM() {
			return this.CAM;
		}

		public String RAM;

		public String getRAM() {
			return this.RAM;
		}

		public String LM;

		public String getLM() {
			return this.LM;
		}

		public String LCM;

		public String getLCM() {
			return this.LCM;
		}

		public String CM;

		public String getCM() {
			return this.CM;
		}

		public String RCM;

		public String getRCM() {
			return this.RCM;
		}

		public String RM;

		public String getRM() {
			return this.RM;
		}

		public String LWB;

		public String getLWB() {
			return this.LWB;
		}

		public String LDM;

		public String getLDM() {
			return this.LDM;
		}

		public String CDM;

		public String getCDM() {
			return this.CDM;
		}

		public String RDM;

		public String getRDM() {
			return this.RDM;
		}

		public String RWB;

		public String getRWB() {
			return this.RWB;
		}

		public String LB;

		public String getLB() {
			return this.LB;
		}

		public String LCB;

		public String getLCB() {
			return this.LCB;
		}

		public String CB;

		public String getCB() {
			return this.CB;
		}

		public String RCB;

		public String getRCB() {
			return this.RCB;
		}

		public String RB;

		public String getRB() {
			return this.RB;
		}

		public String Crossing;

		public String getCrossing() {
			return this.Crossing;
		}

		public Integer Finishing;

		public Integer getFinishing() {
			return this.Finishing;
		}

		public Integer HeadingAccuracy;

		public Integer getHeadingAccuracy() {
			return this.HeadingAccuracy;
		}

		public Integer ShortPassing;

		public Integer getShortPassing() {
			return this.ShortPassing;
		}

		public Integer Volleys;

		public Integer getVolleys() {
			return this.Volleys;
		}

		public Integer Dribbling;

		public Integer getDribbling() {
			return this.Dribbling;
		}

		public Integer Curve;

		public Integer getCurve() {
			return this.Curve;
		}

		public Integer FKAccuracy;

		public Integer getFKAccuracy() {
			return this.FKAccuracy;
		}

		public Integer LongPassing;

		public Integer getLongPassing() {
			return this.LongPassing;
		}

		public Integer BallControl;

		public Integer getBallControl() {
			return this.BallControl;
		}

		public Integer Acceleration;

		public Integer getAcceleration() {
			return this.Acceleration;
		}

		public Integer SprintSpeed;

		public Integer getSprintSpeed() {
			return this.SprintSpeed;
		}

		public Integer Agility;

		public Integer getAgility() {
			return this.Agility;
		}

		public Integer Reactions;

		public Integer getReactions() {
			return this.Reactions;
		}

		public Integer Balance;

		public Integer getBalance() {
			return this.Balance;
		}

		public Integer ShotPower;

		public Integer getShotPower() {
			return this.ShotPower;
		}

		public Integer Jumping;

		public Integer getJumping() {
			return this.Jumping;
		}

		public Integer Stamina;

		public Integer getStamina() {
			return this.Stamina;
		}

		public Integer Strength;

		public Integer getStrength() {
			return this.Strength;
		}

		public Integer LongShots;

		public Integer getLongShots() {
			return this.LongShots;
		}

		public Integer Aggression;

		public Integer getAggression() {
			return this.Aggression;
		}

		public Integer Interceptions;

		public Integer getInterceptions() {
			return this.Interceptions;
		}

		public Integer Positioning;

		public Integer getPositioning() {
			return this.Positioning;
		}

		public Integer Vision;

		public Integer getVision() {
			return this.Vision;
		}

		public Integer Penalties;

		public Integer getPenalties() {
			return this.Penalties;
		}

		public Integer Composure;

		public Integer getComposure() {
			return this.Composure;
		}

		public Integer Marking;

		public Integer getMarking() {
			return this.Marking;
		}

		public Integer StandingTackle;

		public Integer getStandingTackle() {
			return this.StandingTackle;
		}

		public Integer SlidingTackle;

		public Integer getSlidingTackle() {
			return this.SlidingTackle;
		}

		public Integer GKDiving;

		public Integer getGKDiving() {
			return this.GKDiving;
		}

		public Integer GKHandling;

		public Integer getGKHandling() {
			return this.GKHandling;
		}

		public Integer GKKicking;

		public Integer getGKKicking() {
			return this.GKKicking;
		}

		public Integer GKPositioning;

		public Integer getGKPositioning() {
			return this.GKPositioning;
		}

		public Integer GKReflexes;

		public Integer getGKReflexes() {
			return this.GKReflexes;
		}

		public Integer Release_Clause;

		public Integer getRelease_Clause() {
			return this.Release_Clause;
		}

		public String Column88;

		public String getColumn88() {
			return this.Column88;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row6Struct other = (row6Struct) obj;

			if (this.ID == null) {
				if (other.ID != null)
					return false;

			} else if (!this.ID.equals(other.ID))

				return false;

			return true;
		}

		public void copyDataTo(row6Struct other) {

			other.ID = this.ID;
			other.Name = this.Name;
			other.Age = this.Age;
			other.Photo = this.Photo;
			other.Nationality = this.Nationality;
			other.Flag = this.Flag;
			other.Overall = this.Overall;
			other.Potential = this.Potential;
			other.Club = this.Club;
			other.Club_Logo = this.Club_Logo;
			other.Value = this.Value;
			other.Wage = this.Wage;
			other.Special = this.Special;
			other.Preferred_Foot = this.Preferred_Foot;
			other.International_Reputation = this.International_Reputation;
			other.Weak_Foot = this.Weak_Foot;
			other.Skill_Moves = this.Skill_Moves;
			other.Work_Rate = this.Work_Rate;
			other.Body_Type = this.Body_Type;
			other.Real_Face = this.Real_Face;
			other.Position = this.Position;
			other.Jersey_Number = this.Jersey_Number;
			other.Joined = this.Joined;
			other.Loaned_From = this.Loaned_From;
			other.Contract_Valid_Until = this.Contract_Valid_Until;
			other.Height = this.Height;
			other.Weight = this.Weight;
			other.LS = this.LS;
			other.ST = this.ST;
			other.RS = this.RS;
			other.LW = this.LW;
			other.LF = this.LF;
			other.CF = this.CF;
			other.RF = this.RF;
			other.RW = this.RW;
			other.LAM = this.LAM;
			other.CAM = this.CAM;
			other.RAM = this.RAM;
			other.LM = this.LM;
			other.LCM = this.LCM;
			other.CM = this.CM;
			other.RCM = this.RCM;
			other.RM = this.RM;
			other.LWB = this.LWB;
			other.LDM = this.LDM;
			other.CDM = this.CDM;
			other.RDM = this.RDM;
			other.RWB = this.RWB;
			other.LB = this.LB;
			other.LCB = this.LCB;
			other.CB = this.CB;
			other.RCB = this.RCB;
			other.RB = this.RB;
			other.Crossing = this.Crossing;
			other.Finishing = this.Finishing;
			other.HeadingAccuracy = this.HeadingAccuracy;
			other.ShortPassing = this.ShortPassing;
			other.Volleys = this.Volleys;
			other.Dribbling = this.Dribbling;
			other.Curve = this.Curve;
			other.FKAccuracy = this.FKAccuracy;
			other.LongPassing = this.LongPassing;
			other.BallControl = this.BallControl;
			other.Acceleration = this.Acceleration;
			other.SprintSpeed = this.SprintSpeed;
			other.Agility = this.Agility;
			other.Reactions = this.Reactions;
			other.Balance = this.Balance;
			other.ShotPower = this.ShotPower;
			other.Jumping = this.Jumping;
			other.Stamina = this.Stamina;
			other.Strength = this.Strength;
			other.LongShots = this.LongShots;
			other.Aggression = this.Aggression;
			other.Interceptions = this.Interceptions;
			other.Positioning = this.Positioning;
			other.Vision = this.Vision;
			other.Penalties = this.Penalties;
			other.Composure = this.Composure;
			other.Marking = this.Marking;
			other.StandingTackle = this.StandingTackle;
			other.SlidingTackle = this.SlidingTackle;
			other.GKDiving = this.GKDiving;
			other.GKHandling = this.GKHandling;
			other.GKKicking = this.GKKicking;
			other.GKPositioning = this.GKPositioning;
			other.GKReflexes = this.GKReflexes;
			other.Release_Clause = this.Release_Clause;
			other.Column88 = this.Column88;

		}

		public void copyKeysDataTo(row6Struct other) {

			other.ID = this.ID;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter.length == 0) {
						commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter.length == 0) {
						commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_DEMO_CSVReadNFilter) {

				try {

					int length = 0;

					this.ID = readInteger(dis);

					this.Name = readString(dis);

					this.Age = readInteger(dis);

					this.Photo = readString(dis);

					this.Nationality = readString(dis);

					this.Flag = readString(dis);

					this.Overall = readInteger(dis);

					this.Potential = readInteger(dis);

					this.Club = readString(dis);

					this.Club_Logo = readString(dis);

					this.Value = readString(dis);

					this.Wage = readString(dis);

					this.Special = readInteger(dis);

					this.Preferred_Foot = readString(dis);

					this.International_Reputation = readInteger(dis);

					this.Weak_Foot = readInteger(dis);

					this.Skill_Moves = readInteger(dis);

					this.Work_Rate = readString(dis);

					this.Body_Type = readString(dis);

					this.Real_Face = readString(dis);

					this.Position = readString(dis);

					this.Jersey_Number = readInteger(dis);

					this.Joined = readString(dis);

					this.Loaned_From = readString(dis);

					this.Contract_Valid_Until = readString(dis);

					this.Height = readInteger(dis);

					this.Weight = readString(dis);

					this.LS = readString(dis);

					this.ST = readString(dis);

					this.RS = readString(dis);

					this.LW = readString(dis);

					this.LF = readString(dis);

					this.CF = readString(dis);

					this.RF = readString(dis);

					this.RW = readString(dis);

					this.LAM = readString(dis);

					this.CAM = readString(dis);

					this.RAM = readString(dis);

					this.LM = readString(dis);

					this.LCM = readString(dis);

					this.CM = readString(dis);

					this.RCM = readString(dis);

					this.RM = readString(dis);

					this.LWB = readString(dis);

					this.LDM = readString(dis);

					this.CDM = readString(dis);

					this.RDM = readString(dis);

					this.RWB = readString(dis);

					this.LB = readString(dis);

					this.LCB = readString(dis);

					this.CB = readString(dis);

					this.RCB = readString(dis);

					this.RB = readString(dis);

					this.Crossing = readString(dis);

					this.Finishing = readInteger(dis);

					this.HeadingAccuracy = readInteger(dis);

					this.ShortPassing = readInteger(dis);

					this.Volleys = readInteger(dis);

					this.Dribbling = readInteger(dis);

					this.Curve = readInteger(dis);

					this.FKAccuracy = readInteger(dis);

					this.LongPassing = readInteger(dis);

					this.BallControl = readInteger(dis);

					this.Acceleration = readInteger(dis);

					this.SprintSpeed = readInteger(dis);

					this.Agility = readInteger(dis);

					this.Reactions = readInteger(dis);

					this.Balance = readInteger(dis);

					this.ShotPower = readInteger(dis);

					this.Jumping = readInteger(dis);

					this.Stamina = readInteger(dis);

					this.Strength = readInteger(dis);

					this.LongShots = readInteger(dis);

					this.Aggression = readInteger(dis);

					this.Interceptions = readInteger(dis);

					this.Positioning = readInteger(dis);

					this.Vision = readInteger(dis);

					this.Penalties = readInteger(dis);

					this.Composure = readInteger(dis);

					this.Marking = readInteger(dis);

					this.StandingTackle = readInteger(dis);

					this.SlidingTackle = readInteger(dis);

					this.GKDiving = readInteger(dis);

					this.GKHandling = readInteger(dis);

					this.GKKicking = readInteger(dis);

					this.GKPositioning = readInteger(dis);

					this.GKReflexes = readInteger(dis);

					this.Release_Clause = readInteger(dis);

					this.Column88 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_DEMO_CSVReadNFilter) {

				try {

					int length = 0;

					this.ID = readInteger(dis);

					this.Name = readString(dis);

					this.Age = readInteger(dis);

					this.Photo = readString(dis);

					this.Nationality = readString(dis);

					this.Flag = readString(dis);

					this.Overall = readInteger(dis);

					this.Potential = readInteger(dis);

					this.Club = readString(dis);

					this.Club_Logo = readString(dis);

					this.Value = readString(dis);

					this.Wage = readString(dis);

					this.Special = readInteger(dis);

					this.Preferred_Foot = readString(dis);

					this.International_Reputation = readInteger(dis);

					this.Weak_Foot = readInteger(dis);

					this.Skill_Moves = readInteger(dis);

					this.Work_Rate = readString(dis);

					this.Body_Type = readString(dis);

					this.Real_Face = readString(dis);

					this.Position = readString(dis);

					this.Jersey_Number = readInteger(dis);

					this.Joined = readString(dis);

					this.Loaned_From = readString(dis);

					this.Contract_Valid_Until = readString(dis);

					this.Height = readInteger(dis);

					this.Weight = readString(dis);

					this.LS = readString(dis);

					this.ST = readString(dis);

					this.RS = readString(dis);

					this.LW = readString(dis);

					this.LF = readString(dis);

					this.CF = readString(dis);

					this.RF = readString(dis);

					this.RW = readString(dis);

					this.LAM = readString(dis);

					this.CAM = readString(dis);

					this.RAM = readString(dis);

					this.LM = readString(dis);

					this.LCM = readString(dis);

					this.CM = readString(dis);

					this.RCM = readString(dis);

					this.RM = readString(dis);

					this.LWB = readString(dis);

					this.LDM = readString(dis);

					this.CDM = readString(dis);

					this.RDM = readString(dis);

					this.RWB = readString(dis);

					this.LB = readString(dis);

					this.LCB = readString(dis);

					this.CB = readString(dis);

					this.RCB = readString(dis);

					this.RB = readString(dis);

					this.Crossing = readString(dis);

					this.Finishing = readInteger(dis);

					this.HeadingAccuracy = readInteger(dis);

					this.ShortPassing = readInteger(dis);

					this.Volleys = readInteger(dis);

					this.Dribbling = readInteger(dis);

					this.Curve = readInteger(dis);

					this.FKAccuracy = readInteger(dis);

					this.LongPassing = readInteger(dis);

					this.BallControl = readInteger(dis);

					this.Acceleration = readInteger(dis);

					this.SprintSpeed = readInteger(dis);

					this.Agility = readInteger(dis);

					this.Reactions = readInteger(dis);

					this.Balance = readInteger(dis);

					this.ShotPower = readInteger(dis);

					this.Jumping = readInteger(dis);

					this.Stamina = readInteger(dis);

					this.Strength = readInteger(dis);

					this.LongShots = readInteger(dis);

					this.Aggression = readInteger(dis);

					this.Interceptions = readInteger(dis);

					this.Positioning = readInteger(dis);

					this.Vision = readInteger(dis);

					this.Penalties = readInteger(dis);

					this.Composure = readInteger(dis);

					this.Marking = readInteger(dis);

					this.StandingTackle = readInteger(dis);

					this.SlidingTackle = readInteger(dis);

					this.GKDiving = readInteger(dis);

					this.GKHandling = readInteger(dis);

					this.GKKicking = readInteger(dis);

					this.GKPositioning = readInteger(dis);

					this.GKReflexes = readInteger(dis);

					this.Release_Clause = readInteger(dis);

					this.Column88 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.ID, dos);

				// String

				writeString(this.Name, dos);

				// Integer

				writeInteger(this.Age, dos);

				// String

				writeString(this.Photo, dos);

				// String

				writeString(this.Nationality, dos);

				// String

				writeString(this.Flag, dos);

				// Integer

				writeInteger(this.Overall, dos);

				// Integer

				writeInteger(this.Potential, dos);

				// String

				writeString(this.Club, dos);

				// String

				writeString(this.Club_Logo, dos);

				// String

				writeString(this.Value, dos);

				// String

				writeString(this.Wage, dos);

				// Integer

				writeInteger(this.Special, dos);

				// String

				writeString(this.Preferred_Foot, dos);

				// Integer

				writeInteger(this.International_Reputation, dos);

				// Integer

				writeInteger(this.Weak_Foot, dos);

				// Integer

				writeInteger(this.Skill_Moves, dos);

				// String

				writeString(this.Work_Rate, dos);

				// String

				writeString(this.Body_Type, dos);

				// String

				writeString(this.Real_Face, dos);

				// String

				writeString(this.Position, dos);

				// Integer

				writeInteger(this.Jersey_Number, dos);

				// String

				writeString(this.Joined, dos);

				// String

				writeString(this.Loaned_From, dos);

				// String

				writeString(this.Contract_Valid_Until, dos);

				// Integer

				writeInteger(this.Height, dos);

				// String

				writeString(this.Weight, dos);

				// String

				writeString(this.LS, dos);

				// String

				writeString(this.ST, dos);

				// String

				writeString(this.RS, dos);

				// String

				writeString(this.LW, dos);

				// String

				writeString(this.LF, dos);

				// String

				writeString(this.CF, dos);

				// String

				writeString(this.RF, dos);

				// String

				writeString(this.RW, dos);

				// String

				writeString(this.LAM, dos);

				// String

				writeString(this.CAM, dos);

				// String

				writeString(this.RAM, dos);

				// String

				writeString(this.LM, dos);

				// String

				writeString(this.LCM, dos);

				// String

				writeString(this.CM, dos);

				// String

				writeString(this.RCM, dos);

				// String

				writeString(this.RM, dos);

				// String

				writeString(this.LWB, dos);

				// String

				writeString(this.LDM, dos);

				// String

				writeString(this.CDM, dos);

				// String

				writeString(this.RDM, dos);

				// String

				writeString(this.RWB, dos);

				// String

				writeString(this.LB, dos);

				// String

				writeString(this.LCB, dos);

				// String

				writeString(this.CB, dos);

				// String

				writeString(this.RCB, dos);

				// String

				writeString(this.RB, dos);

				// String

				writeString(this.Crossing, dos);

				// Integer

				writeInteger(this.Finishing, dos);

				// Integer

				writeInteger(this.HeadingAccuracy, dos);

				// Integer

				writeInteger(this.ShortPassing, dos);

				// Integer

				writeInteger(this.Volleys, dos);

				// Integer

				writeInteger(this.Dribbling, dos);

				// Integer

				writeInteger(this.Curve, dos);

				// Integer

				writeInteger(this.FKAccuracy, dos);

				// Integer

				writeInteger(this.LongPassing, dos);

				// Integer

				writeInteger(this.BallControl, dos);

				// Integer

				writeInteger(this.Acceleration, dos);

				// Integer

				writeInteger(this.SprintSpeed, dos);

				// Integer

				writeInteger(this.Agility, dos);

				// Integer

				writeInteger(this.Reactions, dos);

				// Integer

				writeInteger(this.Balance, dos);

				// Integer

				writeInteger(this.ShotPower, dos);

				// Integer

				writeInteger(this.Jumping, dos);

				// Integer

				writeInteger(this.Stamina, dos);

				// Integer

				writeInteger(this.Strength, dos);

				// Integer

				writeInteger(this.LongShots, dos);

				// Integer

				writeInteger(this.Aggression, dos);

				// Integer

				writeInteger(this.Interceptions, dos);

				// Integer

				writeInteger(this.Positioning, dos);

				// Integer

				writeInteger(this.Vision, dos);

				// Integer

				writeInteger(this.Penalties, dos);

				// Integer

				writeInteger(this.Composure, dos);

				// Integer

				writeInteger(this.Marking, dos);

				// Integer

				writeInteger(this.StandingTackle, dos);

				// Integer

				writeInteger(this.SlidingTackle, dos);

				// Integer

				writeInteger(this.GKDiving, dos);

				// Integer

				writeInteger(this.GKHandling, dos);

				// Integer

				writeInteger(this.GKKicking, dos);

				// Integer

				writeInteger(this.GKPositioning, dos);

				// Integer

				writeInteger(this.GKReflexes, dos);

				// Integer

				writeInteger(this.Release_Clause, dos);

				// String

				writeString(this.Column88, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.ID, dos);

				// String

				writeString(this.Name, dos);

				// Integer

				writeInteger(this.Age, dos);

				// String

				writeString(this.Photo, dos);

				// String

				writeString(this.Nationality, dos);

				// String

				writeString(this.Flag, dos);

				// Integer

				writeInteger(this.Overall, dos);

				// Integer

				writeInteger(this.Potential, dos);

				// String

				writeString(this.Club, dos);

				// String

				writeString(this.Club_Logo, dos);

				// String

				writeString(this.Value, dos);

				// String

				writeString(this.Wage, dos);

				// Integer

				writeInteger(this.Special, dos);

				// String

				writeString(this.Preferred_Foot, dos);

				// Integer

				writeInteger(this.International_Reputation, dos);

				// Integer

				writeInteger(this.Weak_Foot, dos);

				// Integer

				writeInteger(this.Skill_Moves, dos);

				// String

				writeString(this.Work_Rate, dos);

				// String

				writeString(this.Body_Type, dos);

				// String

				writeString(this.Real_Face, dos);

				// String

				writeString(this.Position, dos);

				// Integer

				writeInteger(this.Jersey_Number, dos);

				// String

				writeString(this.Joined, dos);

				// String

				writeString(this.Loaned_From, dos);

				// String

				writeString(this.Contract_Valid_Until, dos);

				// Integer

				writeInteger(this.Height, dos);

				// String

				writeString(this.Weight, dos);

				// String

				writeString(this.LS, dos);

				// String

				writeString(this.ST, dos);

				// String

				writeString(this.RS, dos);

				// String

				writeString(this.LW, dos);

				// String

				writeString(this.LF, dos);

				// String

				writeString(this.CF, dos);

				// String

				writeString(this.RF, dos);

				// String

				writeString(this.RW, dos);

				// String

				writeString(this.LAM, dos);

				// String

				writeString(this.CAM, dos);

				// String

				writeString(this.RAM, dos);

				// String

				writeString(this.LM, dos);

				// String

				writeString(this.LCM, dos);

				// String

				writeString(this.CM, dos);

				// String

				writeString(this.RCM, dos);

				// String

				writeString(this.RM, dos);

				// String

				writeString(this.LWB, dos);

				// String

				writeString(this.LDM, dos);

				// String

				writeString(this.CDM, dos);

				// String

				writeString(this.RDM, dos);

				// String

				writeString(this.RWB, dos);

				// String

				writeString(this.LB, dos);

				// String

				writeString(this.LCB, dos);

				// String

				writeString(this.CB, dos);

				// String

				writeString(this.RCB, dos);

				// String

				writeString(this.RB, dos);

				// String

				writeString(this.Crossing, dos);

				// Integer

				writeInteger(this.Finishing, dos);

				// Integer

				writeInteger(this.HeadingAccuracy, dos);

				// Integer

				writeInteger(this.ShortPassing, dos);

				// Integer

				writeInteger(this.Volleys, dos);

				// Integer

				writeInteger(this.Dribbling, dos);

				// Integer

				writeInteger(this.Curve, dos);

				// Integer

				writeInteger(this.FKAccuracy, dos);

				// Integer

				writeInteger(this.LongPassing, dos);

				// Integer

				writeInteger(this.BallControl, dos);

				// Integer

				writeInteger(this.Acceleration, dos);

				// Integer

				writeInteger(this.SprintSpeed, dos);

				// Integer

				writeInteger(this.Agility, dos);

				// Integer

				writeInteger(this.Reactions, dos);

				// Integer

				writeInteger(this.Balance, dos);

				// Integer

				writeInteger(this.ShotPower, dos);

				// Integer

				writeInteger(this.Jumping, dos);

				// Integer

				writeInteger(this.Stamina, dos);

				// Integer

				writeInteger(this.Strength, dos);

				// Integer

				writeInteger(this.LongShots, dos);

				// Integer

				writeInteger(this.Aggression, dos);

				// Integer

				writeInteger(this.Interceptions, dos);

				// Integer

				writeInteger(this.Positioning, dos);

				// Integer

				writeInteger(this.Vision, dos);

				// Integer

				writeInteger(this.Penalties, dos);

				// Integer

				writeInteger(this.Composure, dos);

				// Integer

				writeInteger(this.Marking, dos);

				// Integer

				writeInteger(this.StandingTackle, dos);

				// Integer

				writeInteger(this.SlidingTackle, dos);

				// Integer

				writeInteger(this.GKDiving, dos);

				// Integer

				writeInteger(this.GKHandling, dos);

				// Integer

				writeInteger(this.GKKicking, dos);

				// Integer

				writeInteger(this.GKPositioning, dos);

				// Integer

				writeInteger(this.GKReflexes, dos);

				// Integer

				writeInteger(this.Release_Clause, dos);

				// String

				writeString(this.Column88, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID=" + String.valueOf(ID));
			sb.append(",Name=" + Name);
			sb.append(",Age=" + String.valueOf(Age));
			sb.append(",Photo=" + Photo);
			sb.append(",Nationality=" + Nationality);
			sb.append(",Flag=" + Flag);
			sb.append(",Overall=" + String.valueOf(Overall));
			sb.append(",Potential=" + String.valueOf(Potential));
			sb.append(",Club=" + Club);
			sb.append(",Club_Logo=" + Club_Logo);
			sb.append(",Value=" + Value);
			sb.append(",Wage=" + Wage);
			sb.append(",Special=" + String.valueOf(Special));
			sb.append(",Preferred_Foot=" + Preferred_Foot);
			sb.append(",International_Reputation=" + String.valueOf(International_Reputation));
			sb.append(",Weak_Foot=" + String.valueOf(Weak_Foot));
			sb.append(",Skill_Moves=" + String.valueOf(Skill_Moves));
			sb.append(",Work_Rate=" + Work_Rate);
			sb.append(",Body_Type=" + Body_Type);
			sb.append(",Real_Face=" + Real_Face);
			sb.append(",Position=" + Position);
			sb.append(",Jersey_Number=" + String.valueOf(Jersey_Number));
			sb.append(",Joined=" + Joined);
			sb.append(",Loaned_From=" + Loaned_From);
			sb.append(",Contract_Valid_Until=" + Contract_Valid_Until);
			sb.append(",Height=" + String.valueOf(Height));
			sb.append(",Weight=" + Weight);
			sb.append(",LS=" + LS);
			sb.append(",ST=" + ST);
			sb.append(",RS=" + RS);
			sb.append(",LW=" + LW);
			sb.append(",LF=" + LF);
			sb.append(",CF=" + CF);
			sb.append(",RF=" + RF);
			sb.append(",RW=" + RW);
			sb.append(",LAM=" + LAM);
			sb.append(",CAM=" + CAM);
			sb.append(",RAM=" + RAM);
			sb.append(",LM=" + LM);
			sb.append(",LCM=" + LCM);
			sb.append(",CM=" + CM);
			sb.append(",RCM=" + RCM);
			sb.append(",RM=" + RM);
			sb.append(",LWB=" + LWB);
			sb.append(",LDM=" + LDM);
			sb.append(",CDM=" + CDM);
			sb.append(",RDM=" + RDM);
			sb.append(",RWB=" + RWB);
			sb.append(",LB=" + LB);
			sb.append(",LCB=" + LCB);
			sb.append(",CB=" + CB);
			sb.append(",RCB=" + RCB);
			sb.append(",RB=" + RB);
			sb.append(",Crossing=" + Crossing);
			sb.append(",Finishing=" + String.valueOf(Finishing));
			sb.append(",HeadingAccuracy=" + String.valueOf(HeadingAccuracy));
			sb.append(",ShortPassing=" + String.valueOf(ShortPassing));
			sb.append(",Volleys=" + String.valueOf(Volleys));
			sb.append(",Dribbling=" + String.valueOf(Dribbling));
			sb.append(",Curve=" + String.valueOf(Curve));
			sb.append(",FKAccuracy=" + String.valueOf(FKAccuracy));
			sb.append(",LongPassing=" + String.valueOf(LongPassing));
			sb.append(",BallControl=" + String.valueOf(BallControl));
			sb.append(",Acceleration=" + String.valueOf(Acceleration));
			sb.append(",SprintSpeed=" + String.valueOf(SprintSpeed));
			sb.append(",Agility=" + String.valueOf(Agility));
			sb.append(",Reactions=" + String.valueOf(Reactions));
			sb.append(",Balance=" + String.valueOf(Balance));
			sb.append(",ShotPower=" + String.valueOf(ShotPower));
			sb.append(",Jumping=" + String.valueOf(Jumping));
			sb.append(",Stamina=" + String.valueOf(Stamina));
			sb.append(",Strength=" + String.valueOf(Strength));
			sb.append(",LongShots=" + String.valueOf(LongShots));
			sb.append(",Aggression=" + String.valueOf(Aggression));
			sb.append(",Interceptions=" + String.valueOf(Interceptions));
			sb.append(",Positioning=" + String.valueOf(Positioning));
			sb.append(",Vision=" + String.valueOf(Vision));
			sb.append(",Penalties=" + String.valueOf(Penalties));
			sb.append(",Composure=" + String.valueOf(Composure));
			sb.append(",Marking=" + String.valueOf(Marking));
			sb.append(",StandingTackle=" + String.valueOf(StandingTackle));
			sb.append(",SlidingTackle=" + String.valueOf(SlidingTackle));
			sb.append(",GKDiving=" + String.valueOf(GKDiving));
			sb.append(",GKHandling=" + String.valueOf(GKHandling));
			sb.append(",GKKicking=" + String.valueOf(GKKicking));
			sb.append(",GKPositioning=" + String.valueOf(GKPositioning));
			sb.append(",GKReflexes=" + String.valueOf(GKReflexes));
			sb.append(",Release_Clause=" + String.valueOf(Release_Clause));
			sb.append(",Column88=" + Column88);
			sb.append("]");

			return sb.toString();
		}

		public String toLogString() {
			StringBuilder sb = new StringBuilder();

			if (ID == null) {
				sb.append("<null>");
			} else {
				sb.append(ID);
			}

			sb.append("|");

			if (Name == null) {
				sb.append("<null>");
			} else {
				sb.append(Name);
			}

			sb.append("|");

			if (Age == null) {
				sb.append("<null>");
			} else {
				sb.append(Age);
			}

			sb.append("|");

			if (Photo == null) {
				sb.append("<null>");
			} else {
				sb.append(Photo);
			}

			sb.append("|");

			if (Nationality == null) {
				sb.append("<null>");
			} else {
				sb.append(Nationality);
			}

			sb.append("|");

			if (Flag == null) {
				sb.append("<null>");
			} else {
				sb.append(Flag);
			}

			sb.append("|");

			if (Overall == null) {
				sb.append("<null>");
			} else {
				sb.append(Overall);
			}

			sb.append("|");

			if (Potential == null) {
				sb.append("<null>");
			} else {
				sb.append(Potential);
			}

			sb.append("|");

			if (Club == null) {
				sb.append("<null>");
			} else {
				sb.append(Club);
			}

			sb.append("|");

			if (Club_Logo == null) {
				sb.append("<null>");
			} else {
				sb.append(Club_Logo);
			}

			sb.append("|");

			if (Value == null) {
				sb.append("<null>");
			} else {
				sb.append(Value);
			}

			sb.append("|");

			if (Wage == null) {
				sb.append("<null>");
			} else {
				sb.append(Wage);
			}

			sb.append("|");

			if (Special == null) {
				sb.append("<null>");
			} else {
				sb.append(Special);
			}

			sb.append("|");

			if (Preferred_Foot == null) {
				sb.append("<null>");
			} else {
				sb.append(Preferred_Foot);
			}

			sb.append("|");

			if (International_Reputation == null) {
				sb.append("<null>");
			} else {
				sb.append(International_Reputation);
			}

			sb.append("|");

			if (Weak_Foot == null) {
				sb.append("<null>");
			} else {
				sb.append(Weak_Foot);
			}

			sb.append("|");

			if (Skill_Moves == null) {
				sb.append("<null>");
			} else {
				sb.append(Skill_Moves);
			}

			sb.append("|");

			if (Work_Rate == null) {
				sb.append("<null>");
			} else {
				sb.append(Work_Rate);
			}

			sb.append("|");

			if (Body_Type == null) {
				sb.append("<null>");
			} else {
				sb.append(Body_Type);
			}

			sb.append("|");

			if (Real_Face == null) {
				sb.append("<null>");
			} else {
				sb.append(Real_Face);
			}

			sb.append("|");

			if (Position == null) {
				sb.append("<null>");
			} else {
				sb.append(Position);
			}

			sb.append("|");

			if (Jersey_Number == null) {
				sb.append("<null>");
			} else {
				sb.append(Jersey_Number);
			}

			sb.append("|");

			if (Joined == null) {
				sb.append("<null>");
			} else {
				sb.append(Joined);
			}

			sb.append("|");

			if (Loaned_From == null) {
				sb.append("<null>");
			} else {
				sb.append(Loaned_From);
			}

			sb.append("|");

			if (Contract_Valid_Until == null) {
				sb.append("<null>");
			} else {
				sb.append(Contract_Valid_Until);
			}

			sb.append("|");

			if (Height == null) {
				sb.append("<null>");
			} else {
				sb.append(Height);
			}

			sb.append("|");

			if (Weight == null) {
				sb.append("<null>");
			} else {
				sb.append(Weight);
			}

			sb.append("|");

			if (LS == null) {
				sb.append("<null>");
			} else {
				sb.append(LS);
			}

			sb.append("|");

			if (ST == null) {
				sb.append("<null>");
			} else {
				sb.append(ST);
			}

			sb.append("|");

			if (RS == null) {
				sb.append("<null>");
			} else {
				sb.append(RS);
			}

			sb.append("|");

			if (LW == null) {
				sb.append("<null>");
			} else {
				sb.append(LW);
			}

			sb.append("|");

			if (LF == null) {
				sb.append("<null>");
			} else {
				sb.append(LF);
			}

			sb.append("|");

			if (CF == null) {
				sb.append("<null>");
			} else {
				sb.append(CF);
			}

			sb.append("|");

			if (RF == null) {
				sb.append("<null>");
			} else {
				sb.append(RF);
			}

			sb.append("|");

			if (RW == null) {
				sb.append("<null>");
			} else {
				sb.append(RW);
			}

			sb.append("|");

			if (LAM == null) {
				sb.append("<null>");
			} else {
				sb.append(LAM);
			}

			sb.append("|");

			if (CAM == null) {
				sb.append("<null>");
			} else {
				sb.append(CAM);
			}

			sb.append("|");

			if (RAM == null) {
				sb.append("<null>");
			} else {
				sb.append(RAM);
			}

			sb.append("|");

			if (LM == null) {
				sb.append("<null>");
			} else {
				sb.append(LM);
			}

			sb.append("|");

			if (LCM == null) {
				sb.append("<null>");
			} else {
				sb.append(LCM);
			}

			sb.append("|");

			if (CM == null) {
				sb.append("<null>");
			} else {
				sb.append(CM);
			}

			sb.append("|");

			if (RCM == null) {
				sb.append("<null>");
			} else {
				sb.append(RCM);
			}

			sb.append("|");

			if (RM == null) {
				sb.append("<null>");
			} else {
				sb.append(RM);
			}

			sb.append("|");

			if (LWB == null) {
				sb.append("<null>");
			} else {
				sb.append(LWB);
			}

			sb.append("|");

			if (LDM == null) {
				sb.append("<null>");
			} else {
				sb.append(LDM);
			}

			sb.append("|");

			if (CDM == null) {
				sb.append("<null>");
			} else {
				sb.append(CDM);
			}

			sb.append("|");

			if (RDM == null) {
				sb.append("<null>");
			} else {
				sb.append(RDM);
			}

			sb.append("|");

			if (RWB == null) {
				sb.append("<null>");
			} else {
				sb.append(RWB);
			}

			sb.append("|");

			if (LB == null) {
				sb.append("<null>");
			} else {
				sb.append(LB);
			}

			sb.append("|");

			if (LCB == null) {
				sb.append("<null>");
			} else {
				sb.append(LCB);
			}

			sb.append("|");

			if (CB == null) {
				sb.append("<null>");
			} else {
				sb.append(CB);
			}

			sb.append("|");

			if (RCB == null) {
				sb.append("<null>");
			} else {
				sb.append(RCB);
			}

			sb.append("|");

			if (RB == null) {
				sb.append("<null>");
			} else {
				sb.append(RB);
			}

			sb.append("|");

			if (Crossing == null) {
				sb.append("<null>");
			} else {
				sb.append(Crossing);
			}

			sb.append("|");

			if (Finishing == null) {
				sb.append("<null>");
			} else {
				sb.append(Finishing);
			}

			sb.append("|");

			if (HeadingAccuracy == null) {
				sb.append("<null>");
			} else {
				sb.append(HeadingAccuracy);
			}

			sb.append("|");

			if (ShortPassing == null) {
				sb.append("<null>");
			} else {
				sb.append(ShortPassing);
			}

			sb.append("|");

			if (Volleys == null) {
				sb.append("<null>");
			} else {
				sb.append(Volleys);
			}

			sb.append("|");

			if (Dribbling == null) {
				sb.append("<null>");
			} else {
				sb.append(Dribbling);
			}

			sb.append("|");

			if (Curve == null) {
				sb.append("<null>");
			} else {
				sb.append(Curve);
			}

			sb.append("|");

			if (FKAccuracy == null) {
				sb.append("<null>");
			} else {
				sb.append(FKAccuracy);
			}

			sb.append("|");

			if (LongPassing == null) {
				sb.append("<null>");
			} else {
				sb.append(LongPassing);
			}

			sb.append("|");

			if (BallControl == null) {
				sb.append("<null>");
			} else {
				sb.append(BallControl);
			}

			sb.append("|");

			if (Acceleration == null) {
				sb.append("<null>");
			} else {
				sb.append(Acceleration);
			}

			sb.append("|");

			if (SprintSpeed == null) {
				sb.append("<null>");
			} else {
				sb.append(SprintSpeed);
			}

			sb.append("|");

			if (Agility == null) {
				sb.append("<null>");
			} else {
				sb.append(Agility);
			}

			sb.append("|");

			if (Reactions == null) {
				sb.append("<null>");
			} else {
				sb.append(Reactions);
			}

			sb.append("|");

			if (Balance == null) {
				sb.append("<null>");
			} else {
				sb.append(Balance);
			}

			sb.append("|");

			if (ShotPower == null) {
				sb.append("<null>");
			} else {
				sb.append(ShotPower);
			}

			sb.append("|");

			if (Jumping == null) {
				sb.append("<null>");
			} else {
				sb.append(Jumping);
			}

			sb.append("|");

			if (Stamina == null) {
				sb.append("<null>");
			} else {
				sb.append(Stamina);
			}

			sb.append("|");

			if (Strength == null) {
				sb.append("<null>");
			} else {
				sb.append(Strength);
			}

			sb.append("|");

			if (LongShots == null) {
				sb.append("<null>");
			} else {
				sb.append(LongShots);
			}

			sb.append("|");

			if (Aggression == null) {
				sb.append("<null>");
			} else {
				sb.append(Aggression);
			}

			sb.append("|");

			if (Interceptions == null) {
				sb.append("<null>");
			} else {
				sb.append(Interceptions);
			}

			sb.append("|");

			if (Positioning == null) {
				sb.append("<null>");
			} else {
				sb.append(Positioning);
			}

			sb.append("|");

			if (Vision == null) {
				sb.append("<null>");
			} else {
				sb.append(Vision);
			}

			sb.append("|");

			if (Penalties == null) {
				sb.append("<null>");
			} else {
				sb.append(Penalties);
			}

			sb.append("|");

			if (Composure == null) {
				sb.append("<null>");
			} else {
				sb.append(Composure);
			}

			sb.append("|");

			if (Marking == null) {
				sb.append("<null>");
			} else {
				sb.append(Marking);
			}

			sb.append("|");

			if (StandingTackle == null) {
				sb.append("<null>");
			} else {
				sb.append(StandingTackle);
			}

			sb.append("|");

			if (SlidingTackle == null) {
				sb.append("<null>");
			} else {
				sb.append(SlidingTackle);
			}

			sb.append("|");

			if (GKDiving == null) {
				sb.append("<null>");
			} else {
				sb.append(GKDiving);
			}

			sb.append("|");

			if (GKHandling == null) {
				sb.append("<null>");
			} else {
				sb.append(GKHandling);
			}

			sb.append("|");

			if (GKKicking == null) {
				sb.append("<null>");
			} else {
				sb.append(GKKicking);
			}

			sb.append("|");

			if (GKPositioning == null) {
				sb.append("<null>");
			} else {
				sb.append(GKPositioning);
			}

			sb.append("|");

			if (GKReflexes == null) {
				sb.append("<null>");
			} else {
				sb.append(GKReflexes);
			}

			sb.append("|");

			if (Release_Clause == null) {
				sb.append("<null>");
			} else {
				sb.append(Release_Clause);
			}

			sb.append("|");

			if (Column88 == null) {
				sb.append("<null>");
			} else {
				sb.append(Column88);
			}

			sb.append("|");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID, other.ID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_DEMO_CSVReadNFilter = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer ID;

		public Integer getID() {
			return this.ID;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public Integer Age;

		public Integer getAge() {
			return this.Age;
		}

		public String Photo;

		public String getPhoto() {
			return this.Photo;
		}

		public String Nationality;

		public String getNationality() {
			return this.Nationality;
		}

		public String Flag;

		public String getFlag() {
			return this.Flag;
		}

		public Integer Overall;

		public Integer getOverall() {
			return this.Overall;
		}

		public Integer Potential;

		public Integer getPotential() {
			return this.Potential;
		}

		public String Club;

		public String getClub() {
			return this.Club;
		}

		public String Club_Logo;

		public String getClub_Logo() {
			return this.Club_Logo;
		}

		public String Value;

		public String getValue() {
			return this.Value;
		}

		public String Wage;

		public String getWage() {
			return this.Wage;
		}

		public Integer Special;

		public Integer getSpecial() {
			return this.Special;
		}

		public String Preferred_Foot;

		public String getPreferred_Foot() {
			return this.Preferred_Foot;
		}

		public Integer International_Reputation;

		public Integer getInternational_Reputation() {
			return this.International_Reputation;
		}

		public Integer Weak_Foot;

		public Integer getWeak_Foot() {
			return this.Weak_Foot;
		}

		public Integer Skill_Moves;

		public Integer getSkill_Moves() {
			return this.Skill_Moves;
		}

		public String Work_Rate;

		public String getWork_Rate() {
			return this.Work_Rate;
		}

		public String Body_Type;

		public String getBody_Type() {
			return this.Body_Type;
		}

		public String Real_Face;

		public String getReal_Face() {
			return this.Real_Face;
		}

		public String Position;

		public String getPosition() {
			return this.Position;
		}

		public Integer Jersey_Number;

		public Integer getJersey_Number() {
			return this.Jersey_Number;
		}

		public String Joined;

		public String getJoined() {
			return this.Joined;
		}

		public String Loaned_From;

		public String getLoaned_From() {
			return this.Loaned_From;
		}

		public String Contract_Valid_Until;

		public String getContract_Valid_Until() {
			return this.Contract_Valid_Until;
		}

		public Integer Height;

		public Integer getHeight() {
			return this.Height;
		}

		public String Weight;

		public String getWeight() {
			return this.Weight;
		}

		public String LS;

		public String getLS() {
			return this.LS;
		}

		public String ST;

		public String getST() {
			return this.ST;
		}

		public String RS;

		public String getRS() {
			return this.RS;
		}

		public String LW;

		public String getLW() {
			return this.LW;
		}

		public String LF;

		public String getLF() {
			return this.LF;
		}

		public String CF;

		public String getCF() {
			return this.CF;
		}

		public String RF;

		public String getRF() {
			return this.RF;
		}

		public String RW;

		public String getRW() {
			return this.RW;
		}

		public String LAM;

		public String getLAM() {
			return this.LAM;
		}

		public String CAM;

		public String getCAM() {
			return this.CAM;
		}

		public String RAM;

		public String getRAM() {
			return this.RAM;
		}

		public String LM;

		public String getLM() {
			return this.LM;
		}

		public String LCM;

		public String getLCM() {
			return this.LCM;
		}

		public String CM;

		public String getCM() {
			return this.CM;
		}

		public String RCM;

		public String getRCM() {
			return this.RCM;
		}

		public String RM;

		public String getRM() {
			return this.RM;
		}

		public String LWB;

		public String getLWB() {
			return this.LWB;
		}

		public String LDM;

		public String getLDM() {
			return this.LDM;
		}

		public String CDM;

		public String getCDM() {
			return this.CDM;
		}

		public String RDM;

		public String getRDM() {
			return this.RDM;
		}

		public String RWB;

		public String getRWB() {
			return this.RWB;
		}

		public String LB;

		public String getLB() {
			return this.LB;
		}

		public String LCB;

		public String getLCB() {
			return this.LCB;
		}

		public String CB;

		public String getCB() {
			return this.CB;
		}

		public String RCB;

		public String getRCB() {
			return this.RCB;
		}

		public String RB;

		public String getRB() {
			return this.RB;
		}

		public String Crossing;

		public String getCrossing() {
			return this.Crossing;
		}

		public Integer Finishing;

		public Integer getFinishing() {
			return this.Finishing;
		}

		public Integer HeadingAccuracy;

		public Integer getHeadingAccuracy() {
			return this.HeadingAccuracy;
		}

		public Integer ShortPassing;

		public Integer getShortPassing() {
			return this.ShortPassing;
		}

		public Integer Volleys;

		public Integer getVolleys() {
			return this.Volleys;
		}

		public Integer Dribbling;

		public Integer getDribbling() {
			return this.Dribbling;
		}

		public Integer Curve;

		public Integer getCurve() {
			return this.Curve;
		}

		public Integer FKAccuracy;

		public Integer getFKAccuracy() {
			return this.FKAccuracy;
		}

		public Integer LongPassing;

		public Integer getLongPassing() {
			return this.LongPassing;
		}

		public Integer BallControl;

		public Integer getBallControl() {
			return this.BallControl;
		}

		public Integer Acceleration;

		public Integer getAcceleration() {
			return this.Acceleration;
		}

		public Integer SprintSpeed;

		public Integer getSprintSpeed() {
			return this.SprintSpeed;
		}

		public Integer Agility;

		public Integer getAgility() {
			return this.Agility;
		}

		public Integer Reactions;

		public Integer getReactions() {
			return this.Reactions;
		}

		public Integer Balance;

		public Integer getBalance() {
			return this.Balance;
		}

		public Integer ShotPower;

		public Integer getShotPower() {
			return this.ShotPower;
		}

		public Integer Jumping;

		public Integer getJumping() {
			return this.Jumping;
		}

		public Integer Stamina;

		public Integer getStamina() {
			return this.Stamina;
		}

		public Integer Strength;

		public Integer getStrength() {
			return this.Strength;
		}

		public Integer LongShots;

		public Integer getLongShots() {
			return this.LongShots;
		}

		public Integer Aggression;

		public Integer getAggression() {
			return this.Aggression;
		}

		public Integer Interceptions;

		public Integer getInterceptions() {
			return this.Interceptions;
		}

		public Integer Positioning;

		public Integer getPositioning() {
			return this.Positioning;
		}

		public Integer Vision;

		public Integer getVision() {
			return this.Vision;
		}

		public Integer Penalties;

		public Integer getPenalties() {
			return this.Penalties;
		}

		public Integer Composure;

		public Integer getComposure() {
			return this.Composure;
		}

		public Integer Marking;

		public Integer getMarking() {
			return this.Marking;
		}

		public Integer StandingTackle;

		public Integer getStandingTackle() {
			return this.StandingTackle;
		}

		public Integer SlidingTackle;

		public Integer getSlidingTackle() {
			return this.SlidingTackle;
		}

		public Integer GKDiving;

		public Integer getGKDiving() {
			return this.GKDiving;
		}

		public Integer GKHandling;

		public Integer getGKHandling() {
			return this.GKHandling;
		}

		public Integer GKKicking;

		public Integer getGKKicking() {
			return this.GKKicking;
		}

		public Integer GKPositioning;

		public Integer getGKPositioning() {
			return this.GKPositioning;
		}

		public Integer GKReflexes;

		public Integer getGKReflexes() {
			return this.GKReflexes;
		}

		public Integer Release_Clause;

		public Integer getRelease_Clause() {
			return this.Release_Clause;
		}

		public String Column88;

		public String getColumn88() {
			return this.Column88;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row2Struct other = (row2Struct) obj;

			if (this.ID == null) {
				if (other.ID != null)
					return false;

			} else if (!this.ID.equals(other.ID))

				return false;

			return true;
		}

		public void copyDataTo(row2Struct other) {

			other.ID = this.ID;
			other.Name = this.Name;
			other.Age = this.Age;
			other.Photo = this.Photo;
			other.Nationality = this.Nationality;
			other.Flag = this.Flag;
			other.Overall = this.Overall;
			other.Potential = this.Potential;
			other.Club = this.Club;
			other.Club_Logo = this.Club_Logo;
			other.Value = this.Value;
			other.Wage = this.Wage;
			other.Special = this.Special;
			other.Preferred_Foot = this.Preferred_Foot;
			other.International_Reputation = this.International_Reputation;
			other.Weak_Foot = this.Weak_Foot;
			other.Skill_Moves = this.Skill_Moves;
			other.Work_Rate = this.Work_Rate;
			other.Body_Type = this.Body_Type;
			other.Real_Face = this.Real_Face;
			other.Position = this.Position;
			other.Jersey_Number = this.Jersey_Number;
			other.Joined = this.Joined;
			other.Loaned_From = this.Loaned_From;
			other.Contract_Valid_Until = this.Contract_Valid_Until;
			other.Height = this.Height;
			other.Weight = this.Weight;
			other.LS = this.LS;
			other.ST = this.ST;
			other.RS = this.RS;
			other.LW = this.LW;
			other.LF = this.LF;
			other.CF = this.CF;
			other.RF = this.RF;
			other.RW = this.RW;
			other.LAM = this.LAM;
			other.CAM = this.CAM;
			other.RAM = this.RAM;
			other.LM = this.LM;
			other.LCM = this.LCM;
			other.CM = this.CM;
			other.RCM = this.RCM;
			other.RM = this.RM;
			other.LWB = this.LWB;
			other.LDM = this.LDM;
			other.CDM = this.CDM;
			other.RDM = this.RDM;
			other.RWB = this.RWB;
			other.LB = this.LB;
			other.LCB = this.LCB;
			other.CB = this.CB;
			other.RCB = this.RCB;
			other.RB = this.RB;
			other.Crossing = this.Crossing;
			other.Finishing = this.Finishing;
			other.HeadingAccuracy = this.HeadingAccuracy;
			other.ShortPassing = this.ShortPassing;
			other.Volleys = this.Volleys;
			other.Dribbling = this.Dribbling;
			other.Curve = this.Curve;
			other.FKAccuracy = this.FKAccuracy;
			other.LongPassing = this.LongPassing;
			other.BallControl = this.BallControl;
			other.Acceleration = this.Acceleration;
			other.SprintSpeed = this.SprintSpeed;
			other.Agility = this.Agility;
			other.Reactions = this.Reactions;
			other.Balance = this.Balance;
			other.ShotPower = this.ShotPower;
			other.Jumping = this.Jumping;
			other.Stamina = this.Stamina;
			other.Strength = this.Strength;
			other.LongShots = this.LongShots;
			other.Aggression = this.Aggression;
			other.Interceptions = this.Interceptions;
			other.Positioning = this.Positioning;
			other.Vision = this.Vision;
			other.Penalties = this.Penalties;
			other.Composure = this.Composure;
			other.Marking = this.Marking;
			other.StandingTackle = this.StandingTackle;
			other.SlidingTackle = this.SlidingTackle;
			other.GKDiving = this.GKDiving;
			other.GKHandling = this.GKHandling;
			other.GKKicking = this.GKKicking;
			other.GKPositioning = this.GKPositioning;
			other.GKReflexes = this.GKReflexes;
			other.Release_Clause = this.Release_Clause;
			other.Column88 = this.Column88;

		}

		public void copyKeysDataTo(row2Struct other) {

			other.ID = this.ID;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter.length == 0) {
						commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter.length == 0) {
						commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_DEMO_CSVReadNFilter) {

				try {

					int length = 0;

					this.ID = readInteger(dis);

					this.Name = readString(dis);

					this.Age = readInteger(dis);

					this.Photo = readString(dis);

					this.Nationality = readString(dis);

					this.Flag = readString(dis);

					this.Overall = readInteger(dis);

					this.Potential = readInteger(dis);

					this.Club = readString(dis);

					this.Club_Logo = readString(dis);

					this.Value = readString(dis);

					this.Wage = readString(dis);

					this.Special = readInteger(dis);

					this.Preferred_Foot = readString(dis);

					this.International_Reputation = readInteger(dis);

					this.Weak_Foot = readInteger(dis);

					this.Skill_Moves = readInteger(dis);

					this.Work_Rate = readString(dis);

					this.Body_Type = readString(dis);

					this.Real_Face = readString(dis);

					this.Position = readString(dis);

					this.Jersey_Number = readInteger(dis);

					this.Joined = readString(dis);

					this.Loaned_From = readString(dis);

					this.Contract_Valid_Until = readString(dis);

					this.Height = readInteger(dis);

					this.Weight = readString(dis);

					this.LS = readString(dis);

					this.ST = readString(dis);

					this.RS = readString(dis);

					this.LW = readString(dis);

					this.LF = readString(dis);

					this.CF = readString(dis);

					this.RF = readString(dis);

					this.RW = readString(dis);

					this.LAM = readString(dis);

					this.CAM = readString(dis);

					this.RAM = readString(dis);

					this.LM = readString(dis);

					this.LCM = readString(dis);

					this.CM = readString(dis);

					this.RCM = readString(dis);

					this.RM = readString(dis);

					this.LWB = readString(dis);

					this.LDM = readString(dis);

					this.CDM = readString(dis);

					this.RDM = readString(dis);

					this.RWB = readString(dis);

					this.LB = readString(dis);

					this.LCB = readString(dis);

					this.CB = readString(dis);

					this.RCB = readString(dis);

					this.RB = readString(dis);

					this.Crossing = readString(dis);

					this.Finishing = readInteger(dis);

					this.HeadingAccuracy = readInteger(dis);

					this.ShortPassing = readInteger(dis);

					this.Volleys = readInteger(dis);

					this.Dribbling = readInteger(dis);

					this.Curve = readInteger(dis);

					this.FKAccuracy = readInteger(dis);

					this.LongPassing = readInteger(dis);

					this.BallControl = readInteger(dis);

					this.Acceleration = readInteger(dis);

					this.SprintSpeed = readInteger(dis);

					this.Agility = readInteger(dis);

					this.Reactions = readInteger(dis);

					this.Balance = readInteger(dis);

					this.ShotPower = readInteger(dis);

					this.Jumping = readInteger(dis);

					this.Stamina = readInteger(dis);

					this.Strength = readInteger(dis);

					this.LongShots = readInteger(dis);

					this.Aggression = readInteger(dis);

					this.Interceptions = readInteger(dis);

					this.Positioning = readInteger(dis);

					this.Vision = readInteger(dis);

					this.Penalties = readInteger(dis);

					this.Composure = readInteger(dis);

					this.Marking = readInteger(dis);

					this.StandingTackle = readInteger(dis);

					this.SlidingTackle = readInteger(dis);

					this.GKDiving = readInteger(dis);

					this.GKHandling = readInteger(dis);

					this.GKKicking = readInteger(dis);

					this.GKPositioning = readInteger(dis);

					this.GKReflexes = readInteger(dis);

					this.Release_Clause = readInteger(dis);

					this.Column88 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_DEMO_CSVReadNFilter) {

				try {

					int length = 0;

					this.ID = readInteger(dis);

					this.Name = readString(dis);

					this.Age = readInteger(dis);

					this.Photo = readString(dis);

					this.Nationality = readString(dis);

					this.Flag = readString(dis);

					this.Overall = readInteger(dis);

					this.Potential = readInteger(dis);

					this.Club = readString(dis);

					this.Club_Logo = readString(dis);

					this.Value = readString(dis);

					this.Wage = readString(dis);

					this.Special = readInteger(dis);

					this.Preferred_Foot = readString(dis);

					this.International_Reputation = readInteger(dis);

					this.Weak_Foot = readInteger(dis);

					this.Skill_Moves = readInteger(dis);

					this.Work_Rate = readString(dis);

					this.Body_Type = readString(dis);

					this.Real_Face = readString(dis);

					this.Position = readString(dis);

					this.Jersey_Number = readInteger(dis);

					this.Joined = readString(dis);

					this.Loaned_From = readString(dis);

					this.Contract_Valid_Until = readString(dis);

					this.Height = readInteger(dis);

					this.Weight = readString(dis);

					this.LS = readString(dis);

					this.ST = readString(dis);

					this.RS = readString(dis);

					this.LW = readString(dis);

					this.LF = readString(dis);

					this.CF = readString(dis);

					this.RF = readString(dis);

					this.RW = readString(dis);

					this.LAM = readString(dis);

					this.CAM = readString(dis);

					this.RAM = readString(dis);

					this.LM = readString(dis);

					this.LCM = readString(dis);

					this.CM = readString(dis);

					this.RCM = readString(dis);

					this.RM = readString(dis);

					this.LWB = readString(dis);

					this.LDM = readString(dis);

					this.CDM = readString(dis);

					this.RDM = readString(dis);

					this.RWB = readString(dis);

					this.LB = readString(dis);

					this.LCB = readString(dis);

					this.CB = readString(dis);

					this.RCB = readString(dis);

					this.RB = readString(dis);

					this.Crossing = readString(dis);

					this.Finishing = readInteger(dis);

					this.HeadingAccuracy = readInteger(dis);

					this.ShortPassing = readInteger(dis);

					this.Volleys = readInteger(dis);

					this.Dribbling = readInteger(dis);

					this.Curve = readInteger(dis);

					this.FKAccuracy = readInteger(dis);

					this.LongPassing = readInteger(dis);

					this.BallControl = readInteger(dis);

					this.Acceleration = readInteger(dis);

					this.SprintSpeed = readInteger(dis);

					this.Agility = readInteger(dis);

					this.Reactions = readInteger(dis);

					this.Balance = readInteger(dis);

					this.ShotPower = readInteger(dis);

					this.Jumping = readInteger(dis);

					this.Stamina = readInteger(dis);

					this.Strength = readInteger(dis);

					this.LongShots = readInteger(dis);

					this.Aggression = readInteger(dis);

					this.Interceptions = readInteger(dis);

					this.Positioning = readInteger(dis);

					this.Vision = readInteger(dis);

					this.Penalties = readInteger(dis);

					this.Composure = readInteger(dis);

					this.Marking = readInteger(dis);

					this.StandingTackle = readInteger(dis);

					this.SlidingTackle = readInteger(dis);

					this.GKDiving = readInteger(dis);

					this.GKHandling = readInteger(dis);

					this.GKKicking = readInteger(dis);

					this.GKPositioning = readInteger(dis);

					this.GKReflexes = readInteger(dis);

					this.Release_Clause = readInteger(dis);

					this.Column88 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.ID, dos);

				// String

				writeString(this.Name, dos);

				// Integer

				writeInteger(this.Age, dos);

				// String

				writeString(this.Photo, dos);

				// String

				writeString(this.Nationality, dos);

				// String

				writeString(this.Flag, dos);

				// Integer

				writeInteger(this.Overall, dos);

				// Integer

				writeInteger(this.Potential, dos);

				// String

				writeString(this.Club, dos);

				// String

				writeString(this.Club_Logo, dos);

				// String

				writeString(this.Value, dos);

				// String

				writeString(this.Wage, dos);

				// Integer

				writeInteger(this.Special, dos);

				// String

				writeString(this.Preferred_Foot, dos);

				// Integer

				writeInteger(this.International_Reputation, dos);

				// Integer

				writeInteger(this.Weak_Foot, dos);

				// Integer

				writeInteger(this.Skill_Moves, dos);

				// String

				writeString(this.Work_Rate, dos);

				// String

				writeString(this.Body_Type, dos);

				// String

				writeString(this.Real_Face, dos);

				// String

				writeString(this.Position, dos);

				// Integer

				writeInteger(this.Jersey_Number, dos);

				// String

				writeString(this.Joined, dos);

				// String

				writeString(this.Loaned_From, dos);

				// String

				writeString(this.Contract_Valid_Until, dos);

				// Integer

				writeInteger(this.Height, dos);

				// String

				writeString(this.Weight, dos);

				// String

				writeString(this.LS, dos);

				// String

				writeString(this.ST, dos);

				// String

				writeString(this.RS, dos);

				// String

				writeString(this.LW, dos);

				// String

				writeString(this.LF, dos);

				// String

				writeString(this.CF, dos);

				// String

				writeString(this.RF, dos);

				// String

				writeString(this.RW, dos);

				// String

				writeString(this.LAM, dos);

				// String

				writeString(this.CAM, dos);

				// String

				writeString(this.RAM, dos);

				// String

				writeString(this.LM, dos);

				// String

				writeString(this.LCM, dos);

				// String

				writeString(this.CM, dos);

				// String

				writeString(this.RCM, dos);

				// String

				writeString(this.RM, dos);

				// String

				writeString(this.LWB, dos);

				// String

				writeString(this.LDM, dos);

				// String

				writeString(this.CDM, dos);

				// String

				writeString(this.RDM, dos);

				// String

				writeString(this.RWB, dos);

				// String

				writeString(this.LB, dos);

				// String

				writeString(this.LCB, dos);

				// String

				writeString(this.CB, dos);

				// String

				writeString(this.RCB, dos);

				// String

				writeString(this.RB, dos);

				// String

				writeString(this.Crossing, dos);

				// Integer

				writeInteger(this.Finishing, dos);

				// Integer

				writeInteger(this.HeadingAccuracy, dos);

				// Integer

				writeInteger(this.ShortPassing, dos);

				// Integer

				writeInteger(this.Volleys, dos);

				// Integer

				writeInteger(this.Dribbling, dos);

				// Integer

				writeInteger(this.Curve, dos);

				// Integer

				writeInteger(this.FKAccuracy, dos);

				// Integer

				writeInteger(this.LongPassing, dos);

				// Integer

				writeInteger(this.BallControl, dos);

				// Integer

				writeInteger(this.Acceleration, dos);

				// Integer

				writeInteger(this.SprintSpeed, dos);

				// Integer

				writeInteger(this.Agility, dos);

				// Integer

				writeInteger(this.Reactions, dos);

				// Integer

				writeInteger(this.Balance, dos);

				// Integer

				writeInteger(this.ShotPower, dos);

				// Integer

				writeInteger(this.Jumping, dos);

				// Integer

				writeInteger(this.Stamina, dos);

				// Integer

				writeInteger(this.Strength, dos);

				// Integer

				writeInteger(this.LongShots, dos);

				// Integer

				writeInteger(this.Aggression, dos);

				// Integer

				writeInteger(this.Interceptions, dos);

				// Integer

				writeInteger(this.Positioning, dos);

				// Integer

				writeInteger(this.Vision, dos);

				// Integer

				writeInteger(this.Penalties, dos);

				// Integer

				writeInteger(this.Composure, dos);

				// Integer

				writeInteger(this.Marking, dos);

				// Integer

				writeInteger(this.StandingTackle, dos);

				// Integer

				writeInteger(this.SlidingTackle, dos);

				// Integer

				writeInteger(this.GKDiving, dos);

				// Integer

				writeInteger(this.GKHandling, dos);

				// Integer

				writeInteger(this.GKKicking, dos);

				// Integer

				writeInteger(this.GKPositioning, dos);

				// Integer

				writeInteger(this.GKReflexes, dos);

				// Integer

				writeInteger(this.Release_Clause, dos);

				// String

				writeString(this.Column88, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.ID, dos);

				// String

				writeString(this.Name, dos);

				// Integer

				writeInteger(this.Age, dos);

				// String

				writeString(this.Photo, dos);

				// String

				writeString(this.Nationality, dos);

				// String

				writeString(this.Flag, dos);

				// Integer

				writeInteger(this.Overall, dos);

				// Integer

				writeInteger(this.Potential, dos);

				// String

				writeString(this.Club, dos);

				// String

				writeString(this.Club_Logo, dos);

				// String

				writeString(this.Value, dos);

				// String

				writeString(this.Wage, dos);

				// Integer

				writeInteger(this.Special, dos);

				// String

				writeString(this.Preferred_Foot, dos);

				// Integer

				writeInteger(this.International_Reputation, dos);

				// Integer

				writeInteger(this.Weak_Foot, dos);

				// Integer

				writeInteger(this.Skill_Moves, dos);

				// String

				writeString(this.Work_Rate, dos);

				// String

				writeString(this.Body_Type, dos);

				// String

				writeString(this.Real_Face, dos);

				// String

				writeString(this.Position, dos);

				// Integer

				writeInteger(this.Jersey_Number, dos);

				// String

				writeString(this.Joined, dos);

				// String

				writeString(this.Loaned_From, dos);

				// String

				writeString(this.Contract_Valid_Until, dos);

				// Integer

				writeInteger(this.Height, dos);

				// String

				writeString(this.Weight, dos);

				// String

				writeString(this.LS, dos);

				// String

				writeString(this.ST, dos);

				// String

				writeString(this.RS, dos);

				// String

				writeString(this.LW, dos);

				// String

				writeString(this.LF, dos);

				// String

				writeString(this.CF, dos);

				// String

				writeString(this.RF, dos);

				// String

				writeString(this.RW, dos);

				// String

				writeString(this.LAM, dos);

				// String

				writeString(this.CAM, dos);

				// String

				writeString(this.RAM, dos);

				// String

				writeString(this.LM, dos);

				// String

				writeString(this.LCM, dos);

				// String

				writeString(this.CM, dos);

				// String

				writeString(this.RCM, dos);

				// String

				writeString(this.RM, dos);

				// String

				writeString(this.LWB, dos);

				// String

				writeString(this.LDM, dos);

				// String

				writeString(this.CDM, dos);

				// String

				writeString(this.RDM, dos);

				// String

				writeString(this.RWB, dos);

				// String

				writeString(this.LB, dos);

				// String

				writeString(this.LCB, dos);

				// String

				writeString(this.CB, dos);

				// String

				writeString(this.RCB, dos);

				// String

				writeString(this.RB, dos);

				// String

				writeString(this.Crossing, dos);

				// Integer

				writeInteger(this.Finishing, dos);

				// Integer

				writeInteger(this.HeadingAccuracy, dos);

				// Integer

				writeInteger(this.ShortPassing, dos);

				// Integer

				writeInteger(this.Volleys, dos);

				// Integer

				writeInteger(this.Dribbling, dos);

				// Integer

				writeInteger(this.Curve, dos);

				// Integer

				writeInteger(this.FKAccuracy, dos);

				// Integer

				writeInteger(this.LongPassing, dos);

				// Integer

				writeInteger(this.BallControl, dos);

				// Integer

				writeInteger(this.Acceleration, dos);

				// Integer

				writeInteger(this.SprintSpeed, dos);

				// Integer

				writeInteger(this.Agility, dos);

				// Integer

				writeInteger(this.Reactions, dos);

				// Integer

				writeInteger(this.Balance, dos);

				// Integer

				writeInteger(this.ShotPower, dos);

				// Integer

				writeInteger(this.Jumping, dos);

				// Integer

				writeInteger(this.Stamina, dos);

				// Integer

				writeInteger(this.Strength, dos);

				// Integer

				writeInteger(this.LongShots, dos);

				// Integer

				writeInteger(this.Aggression, dos);

				// Integer

				writeInteger(this.Interceptions, dos);

				// Integer

				writeInteger(this.Positioning, dos);

				// Integer

				writeInteger(this.Vision, dos);

				// Integer

				writeInteger(this.Penalties, dos);

				// Integer

				writeInteger(this.Composure, dos);

				// Integer

				writeInteger(this.Marking, dos);

				// Integer

				writeInteger(this.StandingTackle, dos);

				// Integer

				writeInteger(this.SlidingTackle, dos);

				// Integer

				writeInteger(this.GKDiving, dos);

				// Integer

				writeInteger(this.GKHandling, dos);

				// Integer

				writeInteger(this.GKKicking, dos);

				// Integer

				writeInteger(this.GKPositioning, dos);

				// Integer

				writeInteger(this.GKReflexes, dos);

				// Integer

				writeInteger(this.Release_Clause, dos);

				// String

				writeString(this.Column88, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID=" + String.valueOf(ID));
			sb.append(",Name=" + Name);
			sb.append(",Age=" + String.valueOf(Age));
			sb.append(",Photo=" + Photo);
			sb.append(",Nationality=" + Nationality);
			sb.append(",Flag=" + Flag);
			sb.append(",Overall=" + String.valueOf(Overall));
			sb.append(",Potential=" + String.valueOf(Potential));
			sb.append(",Club=" + Club);
			sb.append(",Club_Logo=" + Club_Logo);
			sb.append(",Value=" + Value);
			sb.append(",Wage=" + Wage);
			sb.append(",Special=" + String.valueOf(Special));
			sb.append(",Preferred_Foot=" + Preferred_Foot);
			sb.append(",International_Reputation=" + String.valueOf(International_Reputation));
			sb.append(",Weak_Foot=" + String.valueOf(Weak_Foot));
			sb.append(",Skill_Moves=" + String.valueOf(Skill_Moves));
			sb.append(",Work_Rate=" + Work_Rate);
			sb.append(",Body_Type=" + Body_Type);
			sb.append(",Real_Face=" + Real_Face);
			sb.append(",Position=" + Position);
			sb.append(",Jersey_Number=" + String.valueOf(Jersey_Number));
			sb.append(",Joined=" + Joined);
			sb.append(",Loaned_From=" + Loaned_From);
			sb.append(",Contract_Valid_Until=" + Contract_Valid_Until);
			sb.append(",Height=" + String.valueOf(Height));
			sb.append(",Weight=" + Weight);
			sb.append(",LS=" + LS);
			sb.append(",ST=" + ST);
			sb.append(",RS=" + RS);
			sb.append(",LW=" + LW);
			sb.append(",LF=" + LF);
			sb.append(",CF=" + CF);
			sb.append(",RF=" + RF);
			sb.append(",RW=" + RW);
			sb.append(",LAM=" + LAM);
			sb.append(",CAM=" + CAM);
			sb.append(",RAM=" + RAM);
			sb.append(",LM=" + LM);
			sb.append(",LCM=" + LCM);
			sb.append(",CM=" + CM);
			sb.append(",RCM=" + RCM);
			sb.append(",RM=" + RM);
			sb.append(",LWB=" + LWB);
			sb.append(",LDM=" + LDM);
			sb.append(",CDM=" + CDM);
			sb.append(",RDM=" + RDM);
			sb.append(",RWB=" + RWB);
			sb.append(",LB=" + LB);
			sb.append(",LCB=" + LCB);
			sb.append(",CB=" + CB);
			sb.append(",RCB=" + RCB);
			sb.append(",RB=" + RB);
			sb.append(",Crossing=" + Crossing);
			sb.append(",Finishing=" + String.valueOf(Finishing));
			sb.append(",HeadingAccuracy=" + String.valueOf(HeadingAccuracy));
			sb.append(",ShortPassing=" + String.valueOf(ShortPassing));
			sb.append(",Volleys=" + String.valueOf(Volleys));
			sb.append(",Dribbling=" + String.valueOf(Dribbling));
			sb.append(",Curve=" + String.valueOf(Curve));
			sb.append(",FKAccuracy=" + String.valueOf(FKAccuracy));
			sb.append(",LongPassing=" + String.valueOf(LongPassing));
			sb.append(",BallControl=" + String.valueOf(BallControl));
			sb.append(",Acceleration=" + String.valueOf(Acceleration));
			sb.append(",SprintSpeed=" + String.valueOf(SprintSpeed));
			sb.append(",Agility=" + String.valueOf(Agility));
			sb.append(",Reactions=" + String.valueOf(Reactions));
			sb.append(",Balance=" + String.valueOf(Balance));
			sb.append(",ShotPower=" + String.valueOf(ShotPower));
			sb.append(",Jumping=" + String.valueOf(Jumping));
			sb.append(",Stamina=" + String.valueOf(Stamina));
			sb.append(",Strength=" + String.valueOf(Strength));
			sb.append(",LongShots=" + String.valueOf(LongShots));
			sb.append(",Aggression=" + String.valueOf(Aggression));
			sb.append(",Interceptions=" + String.valueOf(Interceptions));
			sb.append(",Positioning=" + String.valueOf(Positioning));
			sb.append(",Vision=" + String.valueOf(Vision));
			sb.append(",Penalties=" + String.valueOf(Penalties));
			sb.append(",Composure=" + String.valueOf(Composure));
			sb.append(",Marking=" + String.valueOf(Marking));
			sb.append(",StandingTackle=" + String.valueOf(StandingTackle));
			sb.append(",SlidingTackle=" + String.valueOf(SlidingTackle));
			sb.append(",GKDiving=" + String.valueOf(GKDiving));
			sb.append(",GKHandling=" + String.valueOf(GKHandling));
			sb.append(",GKKicking=" + String.valueOf(GKKicking));
			sb.append(",GKPositioning=" + String.valueOf(GKPositioning));
			sb.append(",GKReflexes=" + String.valueOf(GKReflexes));
			sb.append(",Release_Clause=" + String.valueOf(Release_Clause));
			sb.append(",Column88=" + Column88);
			sb.append("]");

			return sb.toString();
		}

		public String toLogString() {
			StringBuilder sb = new StringBuilder();

			if (ID == null) {
				sb.append("<null>");
			} else {
				sb.append(ID);
			}

			sb.append("|");

			if (Name == null) {
				sb.append("<null>");
			} else {
				sb.append(Name);
			}

			sb.append("|");

			if (Age == null) {
				sb.append("<null>");
			} else {
				sb.append(Age);
			}

			sb.append("|");

			if (Photo == null) {
				sb.append("<null>");
			} else {
				sb.append(Photo);
			}

			sb.append("|");

			if (Nationality == null) {
				sb.append("<null>");
			} else {
				sb.append(Nationality);
			}

			sb.append("|");

			if (Flag == null) {
				sb.append("<null>");
			} else {
				sb.append(Flag);
			}

			sb.append("|");

			if (Overall == null) {
				sb.append("<null>");
			} else {
				sb.append(Overall);
			}

			sb.append("|");

			if (Potential == null) {
				sb.append("<null>");
			} else {
				sb.append(Potential);
			}

			sb.append("|");

			if (Club == null) {
				sb.append("<null>");
			} else {
				sb.append(Club);
			}

			sb.append("|");

			if (Club_Logo == null) {
				sb.append("<null>");
			} else {
				sb.append(Club_Logo);
			}

			sb.append("|");

			if (Value == null) {
				sb.append("<null>");
			} else {
				sb.append(Value);
			}

			sb.append("|");

			if (Wage == null) {
				sb.append("<null>");
			} else {
				sb.append(Wage);
			}

			sb.append("|");

			if (Special == null) {
				sb.append("<null>");
			} else {
				sb.append(Special);
			}

			sb.append("|");

			if (Preferred_Foot == null) {
				sb.append("<null>");
			} else {
				sb.append(Preferred_Foot);
			}

			sb.append("|");

			if (International_Reputation == null) {
				sb.append("<null>");
			} else {
				sb.append(International_Reputation);
			}

			sb.append("|");

			if (Weak_Foot == null) {
				sb.append("<null>");
			} else {
				sb.append(Weak_Foot);
			}

			sb.append("|");

			if (Skill_Moves == null) {
				sb.append("<null>");
			} else {
				sb.append(Skill_Moves);
			}

			sb.append("|");

			if (Work_Rate == null) {
				sb.append("<null>");
			} else {
				sb.append(Work_Rate);
			}

			sb.append("|");

			if (Body_Type == null) {
				sb.append("<null>");
			} else {
				sb.append(Body_Type);
			}

			sb.append("|");

			if (Real_Face == null) {
				sb.append("<null>");
			} else {
				sb.append(Real_Face);
			}

			sb.append("|");

			if (Position == null) {
				sb.append("<null>");
			} else {
				sb.append(Position);
			}

			sb.append("|");

			if (Jersey_Number == null) {
				sb.append("<null>");
			} else {
				sb.append(Jersey_Number);
			}

			sb.append("|");

			if (Joined == null) {
				sb.append("<null>");
			} else {
				sb.append(Joined);
			}

			sb.append("|");

			if (Loaned_From == null) {
				sb.append("<null>");
			} else {
				sb.append(Loaned_From);
			}

			sb.append("|");

			if (Contract_Valid_Until == null) {
				sb.append("<null>");
			} else {
				sb.append(Contract_Valid_Until);
			}

			sb.append("|");

			if (Height == null) {
				sb.append("<null>");
			} else {
				sb.append(Height);
			}

			sb.append("|");

			if (Weight == null) {
				sb.append("<null>");
			} else {
				sb.append(Weight);
			}

			sb.append("|");

			if (LS == null) {
				sb.append("<null>");
			} else {
				sb.append(LS);
			}

			sb.append("|");

			if (ST == null) {
				sb.append("<null>");
			} else {
				sb.append(ST);
			}

			sb.append("|");

			if (RS == null) {
				sb.append("<null>");
			} else {
				sb.append(RS);
			}

			sb.append("|");

			if (LW == null) {
				sb.append("<null>");
			} else {
				sb.append(LW);
			}

			sb.append("|");

			if (LF == null) {
				sb.append("<null>");
			} else {
				sb.append(LF);
			}

			sb.append("|");

			if (CF == null) {
				sb.append("<null>");
			} else {
				sb.append(CF);
			}

			sb.append("|");

			if (RF == null) {
				sb.append("<null>");
			} else {
				sb.append(RF);
			}

			sb.append("|");

			if (RW == null) {
				sb.append("<null>");
			} else {
				sb.append(RW);
			}

			sb.append("|");

			if (LAM == null) {
				sb.append("<null>");
			} else {
				sb.append(LAM);
			}

			sb.append("|");

			if (CAM == null) {
				sb.append("<null>");
			} else {
				sb.append(CAM);
			}

			sb.append("|");

			if (RAM == null) {
				sb.append("<null>");
			} else {
				sb.append(RAM);
			}

			sb.append("|");

			if (LM == null) {
				sb.append("<null>");
			} else {
				sb.append(LM);
			}

			sb.append("|");

			if (LCM == null) {
				sb.append("<null>");
			} else {
				sb.append(LCM);
			}

			sb.append("|");

			if (CM == null) {
				sb.append("<null>");
			} else {
				sb.append(CM);
			}

			sb.append("|");

			if (RCM == null) {
				sb.append("<null>");
			} else {
				sb.append(RCM);
			}

			sb.append("|");

			if (RM == null) {
				sb.append("<null>");
			} else {
				sb.append(RM);
			}

			sb.append("|");

			if (LWB == null) {
				sb.append("<null>");
			} else {
				sb.append(LWB);
			}

			sb.append("|");

			if (LDM == null) {
				sb.append("<null>");
			} else {
				sb.append(LDM);
			}

			sb.append("|");

			if (CDM == null) {
				sb.append("<null>");
			} else {
				sb.append(CDM);
			}

			sb.append("|");

			if (RDM == null) {
				sb.append("<null>");
			} else {
				sb.append(RDM);
			}

			sb.append("|");

			if (RWB == null) {
				sb.append("<null>");
			} else {
				sb.append(RWB);
			}

			sb.append("|");

			if (LB == null) {
				sb.append("<null>");
			} else {
				sb.append(LB);
			}

			sb.append("|");

			if (LCB == null) {
				sb.append("<null>");
			} else {
				sb.append(LCB);
			}

			sb.append("|");

			if (CB == null) {
				sb.append("<null>");
			} else {
				sb.append(CB);
			}

			sb.append("|");

			if (RCB == null) {
				sb.append("<null>");
			} else {
				sb.append(RCB);
			}

			sb.append("|");

			if (RB == null) {
				sb.append("<null>");
			} else {
				sb.append(RB);
			}

			sb.append("|");

			if (Crossing == null) {
				sb.append("<null>");
			} else {
				sb.append(Crossing);
			}

			sb.append("|");

			if (Finishing == null) {
				sb.append("<null>");
			} else {
				sb.append(Finishing);
			}

			sb.append("|");

			if (HeadingAccuracy == null) {
				sb.append("<null>");
			} else {
				sb.append(HeadingAccuracy);
			}

			sb.append("|");

			if (ShortPassing == null) {
				sb.append("<null>");
			} else {
				sb.append(ShortPassing);
			}

			sb.append("|");

			if (Volleys == null) {
				sb.append("<null>");
			} else {
				sb.append(Volleys);
			}

			sb.append("|");

			if (Dribbling == null) {
				sb.append("<null>");
			} else {
				sb.append(Dribbling);
			}

			sb.append("|");

			if (Curve == null) {
				sb.append("<null>");
			} else {
				sb.append(Curve);
			}

			sb.append("|");

			if (FKAccuracy == null) {
				sb.append("<null>");
			} else {
				sb.append(FKAccuracy);
			}

			sb.append("|");

			if (LongPassing == null) {
				sb.append("<null>");
			} else {
				sb.append(LongPassing);
			}

			sb.append("|");

			if (BallControl == null) {
				sb.append("<null>");
			} else {
				sb.append(BallControl);
			}

			sb.append("|");

			if (Acceleration == null) {
				sb.append("<null>");
			} else {
				sb.append(Acceleration);
			}

			sb.append("|");

			if (SprintSpeed == null) {
				sb.append("<null>");
			} else {
				sb.append(SprintSpeed);
			}

			sb.append("|");

			if (Agility == null) {
				sb.append("<null>");
			} else {
				sb.append(Agility);
			}

			sb.append("|");

			if (Reactions == null) {
				sb.append("<null>");
			} else {
				sb.append(Reactions);
			}

			sb.append("|");

			if (Balance == null) {
				sb.append("<null>");
			} else {
				sb.append(Balance);
			}

			sb.append("|");

			if (ShotPower == null) {
				sb.append("<null>");
			} else {
				sb.append(ShotPower);
			}

			sb.append("|");

			if (Jumping == null) {
				sb.append("<null>");
			} else {
				sb.append(Jumping);
			}

			sb.append("|");

			if (Stamina == null) {
				sb.append("<null>");
			} else {
				sb.append(Stamina);
			}

			sb.append("|");

			if (Strength == null) {
				sb.append("<null>");
			} else {
				sb.append(Strength);
			}

			sb.append("|");

			if (LongShots == null) {
				sb.append("<null>");
			} else {
				sb.append(LongShots);
			}

			sb.append("|");

			if (Aggression == null) {
				sb.append("<null>");
			} else {
				sb.append(Aggression);
			}

			sb.append("|");

			if (Interceptions == null) {
				sb.append("<null>");
			} else {
				sb.append(Interceptions);
			}

			sb.append("|");

			if (Positioning == null) {
				sb.append("<null>");
			} else {
				sb.append(Positioning);
			}

			sb.append("|");

			if (Vision == null) {
				sb.append("<null>");
			} else {
				sb.append(Vision);
			}

			sb.append("|");

			if (Penalties == null) {
				sb.append("<null>");
			} else {
				sb.append(Penalties);
			}

			sb.append("|");

			if (Composure == null) {
				sb.append("<null>");
			} else {
				sb.append(Composure);
			}

			sb.append("|");

			if (Marking == null) {
				sb.append("<null>");
			} else {
				sb.append(Marking);
			}

			sb.append("|");

			if (StandingTackle == null) {
				sb.append("<null>");
			} else {
				sb.append(StandingTackle);
			}

			sb.append("|");

			if (SlidingTackle == null) {
				sb.append("<null>");
			} else {
				sb.append(SlidingTackle);
			}

			sb.append("|");

			if (GKDiving == null) {
				sb.append("<null>");
			} else {
				sb.append(GKDiving);
			}

			sb.append("|");

			if (GKHandling == null) {
				sb.append("<null>");
			} else {
				sb.append(GKHandling);
			}

			sb.append("|");

			if (GKKicking == null) {
				sb.append("<null>");
			} else {
				sb.append(GKKicking);
			}

			sb.append("|");

			if (GKPositioning == null) {
				sb.append("<null>");
			} else {
				sb.append(GKPositioning);
			}

			sb.append("|");

			if (GKReflexes == null) {
				sb.append("<null>");
			} else {
				sb.append(GKReflexes);
			}

			sb.append("|");

			if (Release_Clause == null) {
				sb.append("<null>");
			} else {
				sb.append(Release_Clause);
			}

			sb.append("|");

			if (Column88 == null) {
				sb.append("<null>");
			} else {
				sb.append(Column88);
			}

			sb.append("|");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID, other.ID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_DEMO_CSVReadNFilter = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer ID;

		public Integer getID() {
			return this.ID;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public Integer Age;

		public Integer getAge() {
			return this.Age;
		}

		public String Photo;

		public String getPhoto() {
			return this.Photo;
		}

		public String Nationality;

		public String getNationality() {
			return this.Nationality;
		}

		public String Flag;

		public String getFlag() {
			return this.Flag;
		}

		public Integer Overall;

		public Integer getOverall() {
			return this.Overall;
		}

		public Integer Potential;

		public Integer getPotential() {
			return this.Potential;
		}

		public String Club;

		public String getClub() {
			return this.Club;
		}

		public String Club_Logo;

		public String getClub_Logo() {
			return this.Club_Logo;
		}

		public String Value;

		public String getValue() {
			return this.Value;
		}

		public String Wage;

		public String getWage() {
			return this.Wage;
		}

		public Integer Special;

		public Integer getSpecial() {
			return this.Special;
		}

		public String Preferred_Foot;

		public String getPreferred_Foot() {
			return this.Preferred_Foot;
		}

		public Integer International_Reputation;

		public Integer getInternational_Reputation() {
			return this.International_Reputation;
		}

		public Integer Weak_Foot;

		public Integer getWeak_Foot() {
			return this.Weak_Foot;
		}

		public Integer Skill_Moves;

		public Integer getSkill_Moves() {
			return this.Skill_Moves;
		}

		public String Work_Rate;

		public String getWork_Rate() {
			return this.Work_Rate;
		}

		public String Body_Type;

		public String getBody_Type() {
			return this.Body_Type;
		}

		public String Real_Face;

		public String getReal_Face() {
			return this.Real_Face;
		}

		public String Position;

		public String getPosition() {
			return this.Position;
		}

		public Integer Jersey_Number;

		public Integer getJersey_Number() {
			return this.Jersey_Number;
		}

		public String Joined;

		public String getJoined() {
			return this.Joined;
		}

		public String Loaned_From;

		public String getLoaned_From() {
			return this.Loaned_From;
		}

		public String Contract_Valid_Until;

		public String getContract_Valid_Until() {
			return this.Contract_Valid_Until;
		}

		public Integer Height;

		public Integer getHeight() {
			return this.Height;
		}

		public String Weight;

		public String getWeight() {
			return this.Weight;
		}

		public String LS;

		public String getLS() {
			return this.LS;
		}

		public String ST;

		public String getST() {
			return this.ST;
		}

		public String RS;

		public String getRS() {
			return this.RS;
		}

		public String LW;

		public String getLW() {
			return this.LW;
		}

		public String LF;

		public String getLF() {
			return this.LF;
		}

		public String CF;

		public String getCF() {
			return this.CF;
		}

		public String RF;

		public String getRF() {
			return this.RF;
		}

		public String RW;

		public String getRW() {
			return this.RW;
		}

		public String LAM;

		public String getLAM() {
			return this.LAM;
		}

		public String CAM;

		public String getCAM() {
			return this.CAM;
		}

		public String RAM;

		public String getRAM() {
			return this.RAM;
		}

		public String LM;

		public String getLM() {
			return this.LM;
		}

		public String LCM;

		public String getLCM() {
			return this.LCM;
		}

		public String CM;

		public String getCM() {
			return this.CM;
		}

		public String RCM;

		public String getRCM() {
			return this.RCM;
		}

		public String RM;

		public String getRM() {
			return this.RM;
		}

		public String LWB;

		public String getLWB() {
			return this.LWB;
		}

		public String LDM;

		public String getLDM() {
			return this.LDM;
		}

		public String CDM;

		public String getCDM() {
			return this.CDM;
		}

		public String RDM;

		public String getRDM() {
			return this.RDM;
		}

		public String RWB;

		public String getRWB() {
			return this.RWB;
		}

		public String LB;

		public String getLB() {
			return this.LB;
		}

		public String LCB;

		public String getLCB() {
			return this.LCB;
		}

		public String CB;

		public String getCB() {
			return this.CB;
		}

		public String RCB;

		public String getRCB() {
			return this.RCB;
		}

		public String RB;

		public String getRB() {
			return this.RB;
		}

		public String Crossing;

		public String getCrossing() {
			return this.Crossing;
		}

		public Integer Finishing;

		public Integer getFinishing() {
			return this.Finishing;
		}

		public Integer HeadingAccuracy;

		public Integer getHeadingAccuracy() {
			return this.HeadingAccuracy;
		}

		public Integer ShortPassing;

		public Integer getShortPassing() {
			return this.ShortPassing;
		}

		public Integer Volleys;

		public Integer getVolleys() {
			return this.Volleys;
		}

		public Integer Dribbling;

		public Integer getDribbling() {
			return this.Dribbling;
		}

		public Integer Curve;

		public Integer getCurve() {
			return this.Curve;
		}

		public Integer FKAccuracy;

		public Integer getFKAccuracy() {
			return this.FKAccuracy;
		}

		public Integer LongPassing;

		public Integer getLongPassing() {
			return this.LongPassing;
		}

		public Integer BallControl;

		public Integer getBallControl() {
			return this.BallControl;
		}

		public Integer Acceleration;

		public Integer getAcceleration() {
			return this.Acceleration;
		}

		public Integer SprintSpeed;

		public Integer getSprintSpeed() {
			return this.SprintSpeed;
		}

		public Integer Agility;

		public Integer getAgility() {
			return this.Agility;
		}

		public Integer Reactions;

		public Integer getReactions() {
			return this.Reactions;
		}

		public Integer Balance;

		public Integer getBalance() {
			return this.Balance;
		}

		public Integer ShotPower;

		public Integer getShotPower() {
			return this.ShotPower;
		}

		public Integer Jumping;

		public Integer getJumping() {
			return this.Jumping;
		}

		public Integer Stamina;

		public Integer getStamina() {
			return this.Stamina;
		}

		public Integer Strength;

		public Integer getStrength() {
			return this.Strength;
		}

		public Integer LongShots;

		public Integer getLongShots() {
			return this.LongShots;
		}

		public Integer Aggression;

		public Integer getAggression() {
			return this.Aggression;
		}

		public Integer Interceptions;

		public Integer getInterceptions() {
			return this.Interceptions;
		}

		public Integer Positioning;

		public Integer getPositioning() {
			return this.Positioning;
		}

		public Integer Vision;

		public Integer getVision() {
			return this.Vision;
		}

		public Integer Penalties;

		public Integer getPenalties() {
			return this.Penalties;
		}

		public Integer Composure;

		public Integer getComposure() {
			return this.Composure;
		}

		public Integer Marking;

		public Integer getMarking() {
			return this.Marking;
		}

		public Integer StandingTackle;

		public Integer getStandingTackle() {
			return this.StandingTackle;
		}

		public Integer SlidingTackle;

		public Integer getSlidingTackle() {
			return this.SlidingTackle;
		}

		public Integer GKDiving;

		public Integer getGKDiving() {
			return this.GKDiving;
		}

		public Integer GKHandling;

		public Integer getGKHandling() {
			return this.GKHandling;
		}

		public Integer GKKicking;

		public Integer getGKKicking() {
			return this.GKKicking;
		}

		public Integer GKPositioning;

		public Integer getGKPositioning() {
			return this.GKPositioning;
		}

		public Integer GKReflexes;

		public Integer getGKReflexes() {
			return this.GKReflexes;
		}

		public Integer Release_Clause;

		public Integer getRelease_Clause() {
			return this.Release_Clause;
		}

		public String Column88;

		public String getColumn88() {
			return this.Column88;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row3Struct other = (row3Struct) obj;

			if (this.ID == null) {
				if (other.ID != null)
					return false;

			} else if (!this.ID.equals(other.ID))

				return false;

			return true;
		}

		public void copyDataTo(row3Struct other) {

			other.ID = this.ID;
			other.Name = this.Name;
			other.Age = this.Age;
			other.Photo = this.Photo;
			other.Nationality = this.Nationality;
			other.Flag = this.Flag;
			other.Overall = this.Overall;
			other.Potential = this.Potential;
			other.Club = this.Club;
			other.Club_Logo = this.Club_Logo;
			other.Value = this.Value;
			other.Wage = this.Wage;
			other.Special = this.Special;
			other.Preferred_Foot = this.Preferred_Foot;
			other.International_Reputation = this.International_Reputation;
			other.Weak_Foot = this.Weak_Foot;
			other.Skill_Moves = this.Skill_Moves;
			other.Work_Rate = this.Work_Rate;
			other.Body_Type = this.Body_Type;
			other.Real_Face = this.Real_Face;
			other.Position = this.Position;
			other.Jersey_Number = this.Jersey_Number;
			other.Joined = this.Joined;
			other.Loaned_From = this.Loaned_From;
			other.Contract_Valid_Until = this.Contract_Valid_Until;
			other.Height = this.Height;
			other.Weight = this.Weight;
			other.LS = this.LS;
			other.ST = this.ST;
			other.RS = this.RS;
			other.LW = this.LW;
			other.LF = this.LF;
			other.CF = this.CF;
			other.RF = this.RF;
			other.RW = this.RW;
			other.LAM = this.LAM;
			other.CAM = this.CAM;
			other.RAM = this.RAM;
			other.LM = this.LM;
			other.LCM = this.LCM;
			other.CM = this.CM;
			other.RCM = this.RCM;
			other.RM = this.RM;
			other.LWB = this.LWB;
			other.LDM = this.LDM;
			other.CDM = this.CDM;
			other.RDM = this.RDM;
			other.RWB = this.RWB;
			other.LB = this.LB;
			other.LCB = this.LCB;
			other.CB = this.CB;
			other.RCB = this.RCB;
			other.RB = this.RB;
			other.Crossing = this.Crossing;
			other.Finishing = this.Finishing;
			other.HeadingAccuracy = this.HeadingAccuracy;
			other.ShortPassing = this.ShortPassing;
			other.Volleys = this.Volleys;
			other.Dribbling = this.Dribbling;
			other.Curve = this.Curve;
			other.FKAccuracy = this.FKAccuracy;
			other.LongPassing = this.LongPassing;
			other.BallControl = this.BallControl;
			other.Acceleration = this.Acceleration;
			other.SprintSpeed = this.SprintSpeed;
			other.Agility = this.Agility;
			other.Reactions = this.Reactions;
			other.Balance = this.Balance;
			other.ShotPower = this.ShotPower;
			other.Jumping = this.Jumping;
			other.Stamina = this.Stamina;
			other.Strength = this.Strength;
			other.LongShots = this.LongShots;
			other.Aggression = this.Aggression;
			other.Interceptions = this.Interceptions;
			other.Positioning = this.Positioning;
			other.Vision = this.Vision;
			other.Penalties = this.Penalties;
			other.Composure = this.Composure;
			other.Marking = this.Marking;
			other.StandingTackle = this.StandingTackle;
			other.SlidingTackle = this.SlidingTackle;
			other.GKDiving = this.GKDiving;
			other.GKHandling = this.GKHandling;
			other.GKKicking = this.GKKicking;
			other.GKPositioning = this.GKPositioning;
			other.GKReflexes = this.GKReflexes;
			other.Release_Clause = this.Release_Clause;
			other.Column88 = this.Column88;

		}

		public void copyKeysDataTo(row3Struct other) {

			other.ID = this.ID;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter.length == 0) {
						commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter.length == 0) {
						commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_DEMO_CSVReadNFilter) {

				try {

					int length = 0;

					this.ID = readInteger(dis);

					this.Name = readString(dis);

					this.Age = readInteger(dis);

					this.Photo = readString(dis);

					this.Nationality = readString(dis);

					this.Flag = readString(dis);

					this.Overall = readInteger(dis);

					this.Potential = readInteger(dis);

					this.Club = readString(dis);

					this.Club_Logo = readString(dis);

					this.Value = readString(dis);

					this.Wage = readString(dis);

					this.Special = readInteger(dis);

					this.Preferred_Foot = readString(dis);

					this.International_Reputation = readInteger(dis);

					this.Weak_Foot = readInteger(dis);

					this.Skill_Moves = readInteger(dis);

					this.Work_Rate = readString(dis);

					this.Body_Type = readString(dis);

					this.Real_Face = readString(dis);

					this.Position = readString(dis);

					this.Jersey_Number = readInteger(dis);

					this.Joined = readString(dis);

					this.Loaned_From = readString(dis);

					this.Contract_Valid_Until = readString(dis);

					this.Height = readInteger(dis);

					this.Weight = readString(dis);

					this.LS = readString(dis);

					this.ST = readString(dis);

					this.RS = readString(dis);

					this.LW = readString(dis);

					this.LF = readString(dis);

					this.CF = readString(dis);

					this.RF = readString(dis);

					this.RW = readString(dis);

					this.LAM = readString(dis);

					this.CAM = readString(dis);

					this.RAM = readString(dis);

					this.LM = readString(dis);

					this.LCM = readString(dis);

					this.CM = readString(dis);

					this.RCM = readString(dis);

					this.RM = readString(dis);

					this.LWB = readString(dis);

					this.LDM = readString(dis);

					this.CDM = readString(dis);

					this.RDM = readString(dis);

					this.RWB = readString(dis);

					this.LB = readString(dis);

					this.LCB = readString(dis);

					this.CB = readString(dis);

					this.RCB = readString(dis);

					this.RB = readString(dis);

					this.Crossing = readString(dis);

					this.Finishing = readInteger(dis);

					this.HeadingAccuracy = readInteger(dis);

					this.ShortPassing = readInteger(dis);

					this.Volleys = readInteger(dis);

					this.Dribbling = readInteger(dis);

					this.Curve = readInteger(dis);

					this.FKAccuracy = readInteger(dis);

					this.LongPassing = readInteger(dis);

					this.BallControl = readInteger(dis);

					this.Acceleration = readInteger(dis);

					this.SprintSpeed = readInteger(dis);

					this.Agility = readInteger(dis);

					this.Reactions = readInteger(dis);

					this.Balance = readInteger(dis);

					this.ShotPower = readInteger(dis);

					this.Jumping = readInteger(dis);

					this.Stamina = readInteger(dis);

					this.Strength = readInteger(dis);

					this.LongShots = readInteger(dis);

					this.Aggression = readInteger(dis);

					this.Interceptions = readInteger(dis);

					this.Positioning = readInteger(dis);

					this.Vision = readInteger(dis);

					this.Penalties = readInteger(dis);

					this.Composure = readInteger(dis);

					this.Marking = readInteger(dis);

					this.StandingTackle = readInteger(dis);

					this.SlidingTackle = readInteger(dis);

					this.GKDiving = readInteger(dis);

					this.GKHandling = readInteger(dis);

					this.GKKicking = readInteger(dis);

					this.GKPositioning = readInteger(dis);

					this.GKReflexes = readInteger(dis);

					this.Release_Clause = readInteger(dis);

					this.Column88 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_DEMO_CSVReadNFilter) {

				try {

					int length = 0;

					this.ID = readInteger(dis);

					this.Name = readString(dis);

					this.Age = readInteger(dis);

					this.Photo = readString(dis);

					this.Nationality = readString(dis);

					this.Flag = readString(dis);

					this.Overall = readInteger(dis);

					this.Potential = readInteger(dis);

					this.Club = readString(dis);

					this.Club_Logo = readString(dis);

					this.Value = readString(dis);

					this.Wage = readString(dis);

					this.Special = readInteger(dis);

					this.Preferred_Foot = readString(dis);

					this.International_Reputation = readInteger(dis);

					this.Weak_Foot = readInteger(dis);

					this.Skill_Moves = readInteger(dis);

					this.Work_Rate = readString(dis);

					this.Body_Type = readString(dis);

					this.Real_Face = readString(dis);

					this.Position = readString(dis);

					this.Jersey_Number = readInteger(dis);

					this.Joined = readString(dis);

					this.Loaned_From = readString(dis);

					this.Contract_Valid_Until = readString(dis);

					this.Height = readInteger(dis);

					this.Weight = readString(dis);

					this.LS = readString(dis);

					this.ST = readString(dis);

					this.RS = readString(dis);

					this.LW = readString(dis);

					this.LF = readString(dis);

					this.CF = readString(dis);

					this.RF = readString(dis);

					this.RW = readString(dis);

					this.LAM = readString(dis);

					this.CAM = readString(dis);

					this.RAM = readString(dis);

					this.LM = readString(dis);

					this.LCM = readString(dis);

					this.CM = readString(dis);

					this.RCM = readString(dis);

					this.RM = readString(dis);

					this.LWB = readString(dis);

					this.LDM = readString(dis);

					this.CDM = readString(dis);

					this.RDM = readString(dis);

					this.RWB = readString(dis);

					this.LB = readString(dis);

					this.LCB = readString(dis);

					this.CB = readString(dis);

					this.RCB = readString(dis);

					this.RB = readString(dis);

					this.Crossing = readString(dis);

					this.Finishing = readInteger(dis);

					this.HeadingAccuracy = readInteger(dis);

					this.ShortPassing = readInteger(dis);

					this.Volleys = readInteger(dis);

					this.Dribbling = readInteger(dis);

					this.Curve = readInteger(dis);

					this.FKAccuracy = readInteger(dis);

					this.LongPassing = readInteger(dis);

					this.BallControl = readInteger(dis);

					this.Acceleration = readInteger(dis);

					this.SprintSpeed = readInteger(dis);

					this.Agility = readInteger(dis);

					this.Reactions = readInteger(dis);

					this.Balance = readInteger(dis);

					this.ShotPower = readInteger(dis);

					this.Jumping = readInteger(dis);

					this.Stamina = readInteger(dis);

					this.Strength = readInteger(dis);

					this.LongShots = readInteger(dis);

					this.Aggression = readInteger(dis);

					this.Interceptions = readInteger(dis);

					this.Positioning = readInteger(dis);

					this.Vision = readInteger(dis);

					this.Penalties = readInteger(dis);

					this.Composure = readInteger(dis);

					this.Marking = readInteger(dis);

					this.StandingTackle = readInteger(dis);

					this.SlidingTackle = readInteger(dis);

					this.GKDiving = readInteger(dis);

					this.GKHandling = readInteger(dis);

					this.GKKicking = readInteger(dis);

					this.GKPositioning = readInteger(dis);

					this.GKReflexes = readInteger(dis);

					this.Release_Clause = readInteger(dis);

					this.Column88 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.ID, dos);

				// String

				writeString(this.Name, dos);

				// Integer

				writeInteger(this.Age, dos);

				// String

				writeString(this.Photo, dos);

				// String

				writeString(this.Nationality, dos);

				// String

				writeString(this.Flag, dos);

				// Integer

				writeInteger(this.Overall, dos);

				// Integer

				writeInteger(this.Potential, dos);

				// String

				writeString(this.Club, dos);

				// String

				writeString(this.Club_Logo, dos);

				// String

				writeString(this.Value, dos);

				// String

				writeString(this.Wage, dos);

				// Integer

				writeInteger(this.Special, dos);

				// String

				writeString(this.Preferred_Foot, dos);

				// Integer

				writeInteger(this.International_Reputation, dos);

				// Integer

				writeInteger(this.Weak_Foot, dos);

				// Integer

				writeInteger(this.Skill_Moves, dos);

				// String

				writeString(this.Work_Rate, dos);

				// String

				writeString(this.Body_Type, dos);

				// String

				writeString(this.Real_Face, dos);

				// String

				writeString(this.Position, dos);

				// Integer

				writeInteger(this.Jersey_Number, dos);

				// String

				writeString(this.Joined, dos);

				// String

				writeString(this.Loaned_From, dos);

				// String

				writeString(this.Contract_Valid_Until, dos);

				// Integer

				writeInteger(this.Height, dos);

				// String

				writeString(this.Weight, dos);

				// String

				writeString(this.LS, dos);

				// String

				writeString(this.ST, dos);

				// String

				writeString(this.RS, dos);

				// String

				writeString(this.LW, dos);

				// String

				writeString(this.LF, dos);

				// String

				writeString(this.CF, dos);

				// String

				writeString(this.RF, dos);

				// String

				writeString(this.RW, dos);

				// String

				writeString(this.LAM, dos);

				// String

				writeString(this.CAM, dos);

				// String

				writeString(this.RAM, dos);

				// String

				writeString(this.LM, dos);

				// String

				writeString(this.LCM, dos);

				// String

				writeString(this.CM, dos);

				// String

				writeString(this.RCM, dos);

				// String

				writeString(this.RM, dos);

				// String

				writeString(this.LWB, dos);

				// String

				writeString(this.LDM, dos);

				// String

				writeString(this.CDM, dos);

				// String

				writeString(this.RDM, dos);

				// String

				writeString(this.RWB, dos);

				// String

				writeString(this.LB, dos);

				// String

				writeString(this.LCB, dos);

				// String

				writeString(this.CB, dos);

				// String

				writeString(this.RCB, dos);

				// String

				writeString(this.RB, dos);

				// String

				writeString(this.Crossing, dos);

				// Integer

				writeInteger(this.Finishing, dos);

				// Integer

				writeInteger(this.HeadingAccuracy, dos);

				// Integer

				writeInteger(this.ShortPassing, dos);

				// Integer

				writeInteger(this.Volleys, dos);

				// Integer

				writeInteger(this.Dribbling, dos);

				// Integer

				writeInteger(this.Curve, dos);

				// Integer

				writeInteger(this.FKAccuracy, dos);

				// Integer

				writeInteger(this.LongPassing, dos);

				// Integer

				writeInteger(this.BallControl, dos);

				// Integer

				writeInteger(this.Acceleration, dos);

				// Integer

				writeInteger(this.SprintSpeed, dos);

				// Integer

				writeInteger(this.Agility, dos);

				// Integer

				writeInteger(this.Reactions, dos);

				// Integer

				writeInteger(this.Balance, dos);

				// Integer

				writeInteger(this.ShotPower, dos);

				// Integer

				writeInteger(this.Jumping, dos);

				// Integer

				writeInteger(this.Stamina, dos);

				// Integer

				writeInteger(this.Strength, dos);

				// Integer

				writeInteger(this.LongShots, dos);

				// Integer

				writeInteger(this.Aggression, dos);

				// Integer

				writeInteger(this.Interceptions, dos);

				// Integer

				writeInteger(this.Positioning, dos);

				// Integer

				writeInteger(this.Vision, dos);

				// Integer

				writeInteger(this.Penalties, dos);

				// Integer

				writeInteger(this.Composure, dos);

				// Integer

				writeInteger(this.Marking, dos);

				// Integer

				writeInteger(this.StandingTackle, dos);

				// Integer

				writeInteger(this.SlidingTackle, dos);

				// Integer

				writeInteger(this.GKDiving, dos);

				// Integer

				writeInteger(this.GKHandling, dos);

				// Integer

				writeInteger(this.GKKicking, dos);

				// Integer

				writeInteger(this.GKPositioning, dos);

				// Integer

				writeInteger(this.GKReflexes, dos);

				// Integer

				writeInteger(this.Release_Clause, dos);

				// String

				writeString(this.Column88, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.ID, dos);

				// String

				writeString(this.Name, dos);

				// Integer

				writeInteger(this.Age, dos);

				// String

				writeString(this.Photo, dos);

				// String

				writeString(this.Nationality, dos);

				// String

				writeString(this.Flag, dos);

				// Integer

				writeInteger(this.Overall, dos);

				// Integer

				writeInteger(this.Potential, dos);

				// String

				writeString(this.Club, dos);

				// String

				writeString(this.Club_Logo, dos);

				// String

				writeString(this.Value, dos);

				// String

				writeString(this.Wage, dos);

				// Integer

				writeInteger(this.Special, dos);

				// String

				writeString(this.Preferred_Foot, dos);

				// Integer

				writeInteger(this.International_Reputation, dos);

				// Integer

				writeInteger(this.Weak_Foot, dos);

				// Integer

				writeInteger(this.Skill_Moves, dos);

				// String

				writeString(this.Work_Rate, dos);

				// String

				writeString(this.Body_Type, dos);

				// String

				writeString(this.Real_Face, dos);

				// String

				writeString(this.Position, dos);

				// Integer

				writeInteger(this.Jersey_Number, dos);

				// String

				writeString(this.Joined, dos);

				// String

				writeString(this.Loaned_From, dos);

				// String

				writeString(this.Contract_Valid_Until, dos);

				// Integer

				writeInteger(this.Height, dos);

				// String

				writeString(this.Weight, dos);

				// String

				writeString(this.LS, dos);

				// String

				writeString(this.ST, dos);

				// String

				writeString(this.RS, dos);

				// String

				writeString(this.LW, dos);

				// String

				writeString(this.LF, dos);

				// String

				writeString(this.CF, dos);

				// String

				writeString(this.RF, dos);

				// String

				writeString(this.RW, dos);

				// String

				writeString(this.LAM, dos);

				// String

				writeString(this.CAM, dos);

				// String

				writeString(this.RAM, dos);

				// String

				writeString(this.LM, dos);

				// String

				writeString(this.LCM, dos);

				// String

				writeString(this.CM, dos);

				// String

				writeString(this.RCM, dos);

				// String

				writeString(this.RM, dos);

				// String

				writeString(this.LWB, dos);

				// String

				writeString(this.LDM, dos);

				// String

				writeString(this.CDM, dos);

				// String

				writeString(this.RDM, dos);

				// String

				writeString(this.RWB, dos);

				// String

				writeString(this.LB, dos);

				// String

				writeString(this.LCB, dos);

				// String

				writeString(this.CB, dos);

				// String

				writeString(this.RCB, dos);

				// String

				writeString(this.RB, dos);

				// String

				writeString(this.Crossing, dos);

				// Integer

				writeInteger(this.Finishing, dos);

				// Integer

				writeInteger(this.HeadingAccuracy, dos);

				// Integer

				writeInteger(this.ShortPassing, dos);

				// Integer

				writeInteger(this.Volleys, dos);

				// Integer

				writeInteger(this.Dribbling, dos);

				// Integer

				writeInteger(this.Curve, dos);

				// Integer

				writeInteger(this.FKAccuracy, dos);

				// Integer

				writeInteger(this.LongPassing, dos);

				// Integer

				writeInteger(this.BallControl, dos);

				// Integer

				writeInteger(this.Acceleration, dos);

				// Integer

				writeInteger(this.SprintSpeed, dos);

				// Integer

				writeInteger(this.Agility, dos);

				// Integer

				writeInteger(this.Reactions, dos);

				// Integer

				writeInteger(this.Balance, dos);

				// Integer

				writeInteger(this.ShotPower, dos);

				// Integer

				writeInteger(this.Jumping, dos);

				// Integer

				writeInteger(this.Stamina, dos);

				// Integer

				writeInteger(this.Strength, dos);

				// Integer

				writeInteger(this.LongShots, dos);

				// Integer

				writeInteger(this.Aggression, dos);

				// Integer

				writeInteger(this.Interceptions, dos);

				// Integer

				writeInteger(this.Positioning, dos);

				// Integer

				writeInteger(this.Vision, dos);

				// Integer

				writeInteger(this.Penalties, dos);

				// Integer

				writeInteger(this.Composure, dos);

				// Integer

				writeInteger(this.Marking, dos);

				// Integer

				writeInteger(this.StandingTackle, dos);

				// Integer

				writeInteger(this.SlidingTackle, dos);

				// Integer

				writeInteger(this.GKDiving, dos);

				// Integer

				writeInteger(this.GKHandling, dos);

				// Integer

				writeInteger(this.GKKicking, dos);

				// Integer

				writeInteger(this.GKPositioning, dos);

				// Integer

				writeInteger(this.GKReflexes, dos);

				// Integer

				writeInteger(this.Release_Clause, dos);

				// String

				writeString(this.Column88, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID=" + String.valueOf(ID));
			sb.append(",Name=" + Name);
			sb.append(",Age=" + String.valueOf(Age));
			sb.append(",Photo=" + Photo);
			sb.append(",Nationality=" + Nationality);
			sb.append(",Flag=" + Flag);
			sb.append(",Overall=" + String.valueOf(Overall));
			sb.append(",Potential=" + String.valueOf(Potential));
			sb.append(",Club=" + Club);
			sb.append(",Club_Logo=" + Club_Logo);
			sb.append(",Value=" + Value);
			sb.append(",Wage=" + Wage);
			sb.append(",Special=" + String.valueOf(Special));
			sb.append(",Preferred_Foot=" + Preferred_Foot);
			sb.append(",International_Reputation=" + String.valueOf(International_Reputation));
			sb.append(",Weak_Foot=" + String.valueOf(Weak_Foot));
			sb.append(",Skill_Moves=" + String.valueOf(Skill_Moves));
			sb.append(",Work_Rate=" + Work_Rate);
			sb.append(",Body_Type=" + Body_Type);
			sb.append(",Real_Face=" + Real_Face);
			sb.append(",Position=" + Position);
			sb.append(",Jersey_Number=" + String.valueOf(Jersey_Number));
			sb.append(",Joined=" + Joined);
			sb.append(",Loaned_From=" + Loaned_From);
			sb.append(",Contract_Valid_Until=" + Contract_Valid_Until);
			sb.append(",Height=" + String.valueOf(Height));
			sb.append(",Weight=" + Weight);
			sb.append(",LS=" + LS);
			sb.append(",ST=" + ST);
			sb.append(",RS=" + RS);
			sb.append(",LW=" + LW);
			sb.append(",LF=" + LF);
			sb.append(",CF=" + CF);
			sb.append(",RF=" + RF);
			sb.append(",RW=" + RW);
			sb.append(",LAM=" + LAM);
			sb.append(",CAM=" + CAM);
			sb.append(",RAM=" + RAM);
			sb.append(",LM=" + LM);
			sb.append(",LCM=" + LCM);
			sb.append(",CM=" + CM);
			sb.append(",RCM=" + RCM);
			sb.append(",RM=" + RM);
			sb.append(",LWB=" + LWB);
			sb.append(",LDM=" + LDM);
			sb.append(",CDM=" + CDM);
			sb.append(",RDM=" + RDM);
			sb.append(",RWB=" + RWB);
			sb.append(",LB=" + LB);
			sb.append(",LCB=" + LCB);
			sb.append(",CB=" + CB);
			sb.append(",RCB=" + RCB);
			sb.append(",RB=" + RB);
			sb.append(",Crossing=" + Crossing);
			sb.append(",Finishing=" + String.valueOf(Finishing));
			sb.append(",HeadingAccuracy=" + String.valueOf(HeadingAccuracy));
			sb.append(",ShortPassing=" + String.valueOf(ShortPassing));
			sb.append(",Volleys=" + String.valueOf(Volleys));
			sb.append(",Dribbling=" + String.valueOf(Dribbling));
			sb.append(",Curve=" + String.valueOf(Curve));
			sb.append(",FKAccuracy=" + String.valueOf(FKAccuracy));
			sb.append(",LongPassing=" + String.valueOf(LongPassing));
			sb.append(",BallControl=" + String.valueOf(BallControl));
			sb.append(",Acceleration=" + String.valueOf(Acceleration));
			sb.append(",SprintSpeed=" + String.valueOf(SprintSpeed));
			sb.append(",Agility=" + String.valueOf(Agility));
			sb.append(",Reactions=" + String.valueOf(Reactions));
			sb.append(",Balance=" + String.valueOf(Balance));
			sb.append(",ShotPower=" + String.valueOf(ShotPower));
			sb.append(",Jumping=" + String.valueOf(Jumping));
			sb.append(",Stamina=" + String.valueOf(Stamina));
			sb.append(",Strength=" + String.valueOf(Strength));
			sb.append(",LongShots=" + String.valueOf(LongShots));
			sb.append(",Aggression=" + String.valueOf(Aggression));
			sb.append(",Interceptions=" + String.valueOf(Interceptions));
			sb.append(",Positioning=" + String.valueOf(Positioning));
			sb.append(",Vision=" + String.valueOf(Vision));
			sb.append(",Penalties=" + String.valueOf(Penalties));
			sb.append(",Composure=" + String.valueOf(Composure));
			sb.append(",Marking=" + String.valueOf(Marking));
			sb.append(",StandingTackle=" + String.valueOf(StandingTackle));
			sb.append(",SlidingTackle=" + String.valueOf(SlidingTackle));
			sb.append(",GKDiving=" + String.valueOf(GKDiving));
			sb.append(",GKHandling=" + String.valueOf(GKHandling));
			sb.append(",GKKicking=" + String.valueOf(GKKicking));
			sb.append(",GKPositioning=" + String.valueOf(GKPositioning));
			sb.append(",GKReflexes=" + String.valueOf(GKReflexes));
			sb.append(",Release_Clause=" + String.valueOf(Release_Clause));
			sb.append(",Column88=" + Column88);
			sb.append("]");

			return sb.toString();
		}

		public String toLogString() {
			StringBuilder sb = new StringBuilder();

			if (ID == null) {
				sb.append("<null>");
			} else {
				sb.append(ID);
			}

			sb.append("|");

			if (Name == null) {
				sb.append("<null>");
			} else {
				sb.append(Name);
			}

			sb.append("|");

			if (Age == null) {
				sb.append("<null>");
			} else {
				sb.append(Age);
			}

			sb.append("|");

			if (Photo == null) {
				sb.append("<null>");
			} else {
				sb.append(Photo);
			}

			sb.append("|");

			if (Nationality == null) {
				sb.append("<null>");
			} else {
				sb.append(Nationality);
			}

			sb.append("|");

			if (Flag == null) {
				sb.append("<null>");
			} else {
				sb.append(Flag);
			}

			sb.append("|");

			if (Overall == null) {
				sb.append("<null>");
			} else {
				sb.append(Overall);
			}

			sb.append("|");

			if (Potential == null) {
				sb.append("<null>");
			} else {
				sb.append(Potential);
			}

			sb.append("|");

			if (Club == null) {
				sb.append("<null>");
			} else {
				sb.append(Club);
			}

			sb.append("|");

			if (Club_Logo == null) {
				sb.append("<null>");
			} else {
				sb.append(Club_Logo);
			}

			sb.append("|");

			if (Value == null) {
				sb.append("<null>");
			} else {
				sb.append(Value);
			}

			sb.append("|");

			if (Wage == null) {
				sb.append("<null>");
			} else {
				sb.append(Wage);
			}

			sb.append("|");

			if (Special == null) {
				sb.append("<null>");
			} else {
				sb.append(Special);
			}

			sb.append("|");

			if (Preferred_Foot == null) {
				sb.append("<null>");
			} else {
				sb.append(Preferred_Foot);
			}

			sb.append("|");

			if (International_Reputation == null) {
				sb.append("<null>");
			} else {
				sb.append(International_Reputation);
			}

			sb.append("|");

			if (Weak_Foot == null) {
				sb.append("<null>");
			} else {
				sb.append(Weak_Foot);
			}

			sb.append("|");

			if (Skill_Moves == null) {
				sb.append("<null>");
			} else {
				sb.append(Skill_Moves);
			}

			sb.append("|");

			if (Work_Rate == null) {
				sb.append("<null>");
			} else {
				sb.append(Work_Rate);
			}

			sb.append("|");

			if (Body_Type == null) {
				sb.append("<null>");
			} else {
				sb.append(Body_Type);
			}

			sb.append("|");

			if (Real_Face == null) {
				sb.append("<null>");
			} else {
				sb.append(Real_Face);
			}

			sb.append("|");

			if (Position == null) {
				sb.append("<null>");
			} else {
				sb.append(Position);
			}

			sb.append("|");

			if (Jersey_Number == null) {
				sb.append("<null>");
			} else {
				sb.append(Jersey_Number);
			}

			sb.append("|");

			if (Joined == null) {
				sb.append("<null>");
			} else {
				sb.append(Joined);
			}

			sb.append("|");

			if (Loaned_From == null) {
				sb.append("<null>");
			} else {
				sb.append(Loaned_From);
			}

			sb.append("|");

			if (Contract_Valid_Until == null) {
				sb.append("<null>");
			} else {
				sb.append(Contract_Valid_Until);
			}

			sb.append("|");

			if (Height == null) {
				sb.append("<null>");
			} else {
				sb.append(Height);
			}

			sb.append("|");

			if (Weight == null) {
				sb.append("<null>");
			} else {
				sb.append(Weight);
			}

			sb.append("|");

			if (LS == null) {
				sb.append("<null>");
			} else {
				sb.append(LS);
			}

			sb.append("|");

			if (ST == null) {
				sb.append("<null>");
			} else {
				sb.append(ST);
			}

			sb.append("|");

			if (RS == null) {
				sb.append("<null>");
			} else {
				sb.append(RS);
			}

			sb.append("|");

			if (LW == null) {
				sb.append("<null>");
			} else {
				sb.append(LW);
			}

			sb.append("|");

			if (LF == null) {
				sb.append("<null>");
			} else {
				sb.append(LF);
			}

			sb.append("|");

			if (CF == null) {
				sb.append("<null>");
			} else {
				sb.append(CF);
			}

			sb.append("|");

			if (RF == null) {
				sb.append("<null>");
			} else {
				sb.append(RF);
			}

			sb.append("|");

			if (RW == null) {
				sb.append("<null>");
			} else {
				sb.append(RW);
			}

			sb.append("|");

			if (LAM == null) {
				sb.append("<null>");
			} else {
				sb.append(LAM);
			}

			sb.append("|");

			if (CAM == null) {
				sb.append("<null>");
			} else {
				sb.append(CAM);
			}

			sb.append("|");

			if (RAM == null) {
				sb.append("<null>");
			} else {
				sb.append(RAM);
			}

			sb.append("|");

			if (LM == null) {
				sb.append("<null>");
			} else {
				sb.append(LM);
			}

			sb.append("|");

			if (LCM == null) {
				sb.append("<null>");
			} else {
				sb.append(LCM);
			}

			sb.append("|");

			if (CM == null) {
				sb.append("<null>");
			} else {
				sb.append(CM);
			}

			sb.append("|");

			if (RCM == null) {
				sb.append("<null>");
			} else {
				sb.append(RCM);
			}

			sb.append("|");

			if (RM == null) {
				sb.append("<null>");
			} else {
				sb.append(RM);
			}

			sb.append("|");

			if (LWB == null) {
				sb.append("<null>");
			} else {
				sb.append(LWB);
			}

			sb.append("|");

			if (LDM == null) {
				sb.append("<null>");
			} else {
				sb.append(LDM);
			}

			sb.append("|");

			if (CDM == null) {
				sb.append("<null>");
			} else {
				sb.append(CDM);
			}

			sb.append("|");

			if (RDM == null) {
				sb.append("<null>");
			} else {
				sb.append(RDM);
			}

			sb.append("|");

			if (RWB == null) {
				sb.append("<null>");
			} else {
				sb.append(RWB);
			}

			sb.append("|");

			if (LB == null) {
				sb.append("<null>");
			} else {
				sb.append(LB);
			}

			sb.append("|");

			if (LCB == null) {
				sb.append("<null>");
			} else {
				sb.append(LCB);
			}

			sb.append("|");

			if (CB == null) {
				sb.append("<null>");
			} else {
				sb.append(CB);
			}

			sb.append("|");

			if (RCB == null) {
				sb.append("<null>");
			} else {
				sb.append(RCB);
			}

			sb.append("|");

			if (RB == null) {
				sb.append("<null>");
			} else {
				sb.append(RB);
			}

			sb.append("|");

			if (Crossing == null) {
				sb.append("<null>");
			} else {
				sb.append(Crossing);
			}

			sb.append("|");

			if (Finishing == null) {
				sb.append("<null>");
			} else {
				sb.append(Finishing);
			}

			sb.append("|");

			if (HeadingAccuracy == null) {
				sb.append("<null>");
			} else {
				sb.append(HeadingAccuracy);
			}

			sb.append("|");

			if (ShortPassing == null) {
				sb.append("<null>");
			} else {
				sb.append(ShortPassing);
			}

			sb.append("|");

			if (Volleys == null) {
				sb.append("<null>");
			} else {
				sb.append(Volleys);
			}

			sb.append("|");

			if (Dribbling == null) {
				sb.append("<null>");
			} else {
				sb.append(Dribbling);
			}

			sb.append("|");

			if (Curve == null) {
				sb.append("<null>");
			} else {
				sb.append(Curve);
			}

			sb.append("|");

			if (FKAccuracy == null) {
				sb.append("<null>");
			} else {
				sb.append(FKAccuracy);
			}

			sb.append("|");

			if (LongPassing == null) {
				sb.append("<null>");
			} else {
				sb.append(LongPassing);
			}

			sb.append("|");

			if (BallControl == null) {
				sb.append("<null>");
			} else {
				sb.append(BallControl);
			}

			sb.append("|");

			if (Acceleration == null) {
				sb.append("<null>");
			} else {
				sb.append(Acceleration);
			}

			sb.append("|");

			if (SprintSpeed == null) {
				sb.append("<null>");
			} else {
				sb.append(SprintSpeed);
			}

			sb.append("|");

			if (Agility == null) {
				sb.append("<null>");
			} else {
				sb.append(Agility);
			}

			sb.append("|");

			if (Reactions == null) {
				sb.append("<null>");
			} else {
				sb.append(Reactions);
			}

			sb.append("|");

			if (Balance == null) {
				sb.append("<null>");
			} else {
				sb.append(Balance);
			}

			sb.append("|");

			if (ShotPower == null) {
				sb.append("<null>");
			} else {
				sb.append(ShotPower);
			}

			sb.append("|");

			if (Jumping == null) {
				sb.append("<null>");
			} else {
				sb.append(Jumping);
			}

			sb.append("|");

			if (Stamina == null) {
				sb.append("<null>");
			} else {
				sb.append(Stamina);
			}

			sb.append("|");

			if (Strength == null) {
				sb.append("<null>");
			} else {
				sb.append(Strength);
			}

			sb.append("|");

			if (LongShots == null) {
				sb.append("<null>");
			} else {
				sb.append(LongShots);
			}

			sb.append("|");

			if (Aggression == null) {
				sb.append("<null>");
			} else {
				sb.append(Aggression);
			}

			sb.append("|");

			if (Interceptions == null) {
				sb.append("<null>");
			} else {
				sb.append(Interceptions);
			}

			sb.append("|");

			if (Positioning == null) {
				sb.append("<null>");
			} else {
				sb.append(Positioning);
			}

			sb.append("|");

			if (Vision == null) {
				sb.append("<null>");
			} else {
				sb.append(Vision);
			}

			sb.append("|");

			if (Penalties == null) {
				sb.append("<null>");
			} else {
				sb.append(Penalties);
			}

			sb.append("|");

			if (Composure == null) {
				sb.append("<null>");
			} else {
				sb.append(Composure);
			}

			sb.append("|");

			if (Marking == null) {
				sb.append("<null>");
			} else {
				sb.append(Marking);
			}

			sb.append("|");

			if (StandingTackle == null) {
				sb.append("<null>");
			} else {
				sb.append(StandingTackle);
			}

			sb.append("|");

			if (SlidingTackle == null) {
				sb.append("<null>");
			} else {
				sb.append(SlidingTackle);
			}

			sb.append("|");

			if (GKDiving == null) {
				sb.append("<null>");
			} else {
				sb.append(GKDiving);
			}

			sb.append("|");

			if (GKHandling == null) {
				sb.append("<null>");
			} else {
				sb.append(GKHandling);
			}

			sb.append("|");

			if (GKKicking == null) {
				sb.append("<null>");
			} else {
				sb.append(GKKicking);
			}

			sb.append("|");

			if (GKPositioning == null) {
				sb.append("<null>");
			} else {
				sb.append(GKPositioning);
			}

			sb.append("|");

			if (GKReflexes == null) {
				sb.append("<null>");
			} else {
				sb.append(GKReflexes);
			}

			sb.append("|");

			if (Release_Clause == null) {
				sb.append("<null>");
			} else {
				sb.append(Release_Clause);
			}

			sb.append("|");

			if (Column88 == null) {
				sb.append("<null>");
			} else {
				sb.append(Column88);
			}

			sb.append("|");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID, other.ID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_DEMO_CSVReadNFilter = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer ID;

		public Integer getID() {
			return this.ID;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public Integer Age;

		public Integer getAge() {
			return this.Age;
		}

		public String Photo;

		public String getPhoto() {
			return this.Photo;
		}

		public String Nationality;

		public String getNationality() {
			return this.Nationality;
		}

		public String Flag;

		public String getFlag() {
			return this.Flag;
		}

		public Integer Overall;

		public Integer getOverall() {
			return this.Overall;
		}

		public Integer Potential;

		public Integer getPotential() {
			return this.Potential;
		}

		public String Club;

		public String getClub() {
			return this.Club;
		}

		public String Club_Logo;

		public String getClub_Logo() {
			return this.Club_Logo;
		}

		public String Value;

		public String getValue() {
			return this.Value;
		}

		public String Wage;

		public String getWage() {
			return this.Wage;
		}

		public Integer Special;

		public Integer getSpecial() {
			return this.Special;
		}

		public String Preferred_Foot;

		public String getPreferred_Foot() {
			return this.Preferred_Foot;
		}

		public Integer International_Reputation;

		public Integer getInternational_Reputation() {
			return this.International_Reputation;
		}

		public Integer Weak_Foot;

		public Integer getWeak_Foot() {
			return this.Weak_Foot;
		}

		public Integer Skill_Moves;

		public Integer getSkill_Moves() {
			return this.Skill_Moves;
		}

		public String Work_Rate;

		public String getWork_Rate() {
			return this.Work_Rate;
		}

		public String Body_Type;

		public String getBody_Type() {
			return this.Body_Type;
		}

		public String Real_Face;

		public String getReal_Face() {
			return this.Real_Face;
		}

		public String Position;

		public String getPosition() {
			return this.Position;
		}

		public Integer Jersey_Number;

		public Integer getJersey_Number() {
			return this.Jersey_Number;
		}

		public String Joined;

		public String getJoined() {
			return this.Joined;
		}

		public String Loaned_From;

		public String getLoaned_From() {
			return this.Loaned_From;
		}

		public String Contract_Valid_Until;

		public String getContract_Valid_Until() {
			return this.Contract_Valid_Until;
		}

		public Integer Height;

		public Integer getHeight() {
			return this.Height;
		}

		public String Weight;

		public String getWeight() {
			return this.Weight;
		}

		public String LS;

		public String getLS() {
			return this.LS;
		}

		public String ST;

		public String getST() {
			return this.ST;
		}

		public String RS;

		public String getRS() {
			return this.RS;
		}

		public String LW;

		public String getLW() {
			return this.LW;
		}

		public String LF;

		public String getLF() {
			return this.LF;
		}

		public String CF;

		public String getCF() {
			return this.CF;
		}

		public String RF;

		public String getRF() {
			return this.RF;
		}

		public String RW;

		public String getRW() {
			return this.RW;
		}

		public String LAM;

		public String getLAM() {
			return this.LAM;
		}

		public String CAM;

		public String getCAM() {
			return this.CAM;
		}

		public String RAM;

		public String getRAM() {
			return this.RAM;
		}

		public String LM;

		public String getLM() {
			return this.LM;
		}

		public String LCM;

		public String getLCM() {
			return this.LCM;
		}

		public String CM;

		public String getCM() {
			return this.CM;
		}

		public String RCM;

		public String getRCM() {
			return this.RCM;
		}

		public String RM;

		public String getRM() {
			return this.RM;
		}

		public String LWB;

		public String getLWB() {
			return this.LWB;
		}

		public String LDM;

		public String getLDM() {
			return this.LDM;
		}

		public String CDM;

		public String getCDM() {
			return this.CDM;
		}

		public String RDM;

		public String getRDM() {
			return this.RDM;
		}

		public String RWB;

		public String getRWB() {
			return this.RWB;
		}

		public String LB;

		public String getLB() {
			return this.LB;
		}

		public String LCB;

		public String getLCB() {
			return this.LCB;
		}

		public String CB;

		public String getCB() {
			return this.CB;
		}

		public String RCB;

		public String getRCB() {
			return this.RCB;
		}

		public String RB;

		public String getRB() {
			return this.RB;
		}

		public String Crossing;

		public String getCrossing() {
			return this.Crossing;
		}

		public Integer Finishing;

		public Integer getFinishing() {
			return this.Finishing;
		}

		public Integer HeadingAccuracy;

		public Integer getHeadingAccuracy() {
			return this.HeadingAccuracy;
		}

		public Integer ShortPassing;

		public Integer getShortPassing() {
			return this.ShortPassing;
		}

		public Integer Volleys;

		public Integer getVolleys() {
			return this.Volleys;
		}

		public Integer Dribbling;

		public Integer getDribbling() {
			return this.Dribbling;
		}

		public Integer Curve;

		public Integer getCurve() {
			return this.Curve;
		}

		public Integer FKAccuracy;

		public Integer getFKAccuracy() {
			return this.FKAccuracy;
		}

		public Integer LongPassing;

		public Integer getLongPassing() {
			return this.LongPassing;
		}

		public Integer BallControl;

		public Integer getBallControl() {
			return this.BallControl;
		}

		public Integer Acceleration;

		public Integer getAcceleration() {
			return this.Acceleration;
		}

		public Integer SprintSpeed;

		public Integer getSprintSpeed() {
			return this.SprintSpeed;
		}

		public Integer Agility;

		public Integer getAgility() {
			return this.Agility;
		}

		public Integer Reactions;

		public Integer getReactions() {
			return this.Reactions;
		}

		public Integer Balance;

		public Integer getBalance() {
			return this.Balance;
		}

		public Integer ShotPower;

		public Integer getShotPower() {
			return this.ShotPower;
		}

		public Integer Jumping;

		public Integer getJumping() {
			return this.Jumping;
		}

		public Integer Stamina;

		public Integer getStamina() {
			return this.Stamina;
		}

		public Integer Strength;

		public Integer getStrength() {
			return this.Strength;
		}

		public Integer LongShots;

		public Integer getLongShots() {
			return this.LongShots;
		}

		public Integer Aggression;

		public Integer getAggression() {
			return this.Aggression;
		}

		public Integer Interceptions;

		public Integer getInterceptions() {
			return this.Interceptions;
		}

		public Integer Positioning;

		public Integer getPositioning() {
			return this.Positioning;
		}

		public Integer Vision;

		public Integer getVision() {
			return this.Vision;
		}

		public Integer Penalties;

		public Integer getPenalties() {
			return this.Penalties;
		}

		public Integer Composure;

		public Integer getComposure() {
			return this.Composure;
		}

		public Integer Marking;

		public Integer getMarking() {
			return this.Marking;
		}

		public Integer StandingTackle;

		public Integer getStandingTackle() {
			return this.StandingTackle;
		}

		public Integer SlidingTackle;

		public Integer getSlidingTackle() {
			return this.SlidingTackle;
		}

		public Integer GKDiving;

		public Integer getGKDiving() {
			return this.GKDiving;
		}

		public Integer GKHandling;

		public Integer getGKHandling() {
			return this.GKHandling;
		}

		public Integer GKKicking;

		public Integer getGKKicking() {
			return this.GKKicking;
		}

		public Integer GKPositioning;

		public Integer getGKPositioning() {
			return this.GKPositioning;
		}

		public Integer GKReflexes;

		public Integer getGKReflexes() {
			return this.GKReflexes;
		}

		public Integer Release_Clause;

		public Integer getRelease_Clause() {
			return this.Release_Clause;
		}

		public String Column88;

		public String getColumn88() {
			return this.Column88;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row4Struct other = (row4Struct) obj;

			if (this.ID == null) {
				if (other.ID != null)
					return false;

			} else if (!this.ID.equals(other.ID))

				return false;

			return true;
		}

		public void copyDataTo(row4Struct other) {

			other.ID = this.ID;
			other.Name = this.Name;
			other.Age = this.Age;
			other.Photo = this.Photo;
			other.Nationality = this.Nationality;
			other.Flag = this.Flag;
			other.Overall = this.Overall;
			other.Potential = this.Potential;
			other.Club = this.Club;
			other.Club_Logo = this.Club_Logo;
			other.Value = this.Value;
			other.Wage = this.Wage;
			other.Special = this.Special;
			other.Preferred_Foot = this.Preferred_Foot;
			other.International_Reputation = this.International_Reputation;
			other.Weak_Foot = this.Weak_Foot;
			other.Skill_Moves = this.Skill_Moves;
			other.Work_Rate = this.Work_Rate;
			other.Body_Type = this.Body_Type;
			other.Real_Face = this.Real_Face;
			other.Position = this.Position;
			other.Jersey_Number = this.Jersey_Number;
			other.Joined = this.Joined;
			other.Loaned_From = this.Loaned_From;
			other.Contract_Valid_Until = this.Contract_Valid_Until;
			other.Height = this.Height;
			other.Weight = this.Weight;
			other.LS = this.LS;
			other.ST = this.ST;
			other.RS = this.RS;
			other.LW = this.LW;
			other.LF = this.LF;
			other.CF = this.CF;
			other.RF = this.RF;
			other.RW = this.RW;
			other.LAM = this.LAM;
			other.CAM = this.CAM;
			other.RAM = this.RAM;
			other.LM = this.LM;
			other.LCM = this.LCM;
			other.CM = this.CM;
			other.RCM = this.RCM;
			other.RM = this.RM;
			other.LWB = this.LWB;
			other.LDM = this.LDM;
			other.CDM = this.CDM;
			other.RDM = this.RDM;
			other.RWB = this.RWB;
			other.LB = this.LB;
			other.LCB = this.LCB;
			other.CB = this.CB;
			other.RCB = this.RCB;
			other.RB = this.RB;
			other.Crossing = this.Crossing;
			other.Finishing = this.Finishing;
			other.HeadingAccuracy = this.HeadingAccuracy;
			other.ShortPassing = this.ShortPassing;
			other.Volleys = this.Volleys;
			other.Dribbling = this.Dribbling;
			other.Curve = this.Curve;
			other.FKAccuracy = this.FKAccuracy;
			other.LongPassing = this.LongPassing;
			other.BallControl = this.BallControl;
			other.Acceleration = this.Acceleration;
			other.SprintSpeed = this.SprintSpeed;
			other.Agility = this.Agility;
			other.Reactions = this.Reactions;
			other.Balance = this.Balance;
			other.ShotPower = this.ShotPower;
			other.Jumping = this.Jumping;
			other.Stamina = this.Stamina;
			other.Strength = this.Strength;
			other.LongShots = this.LongShots;
			other.Aggression = this.Aggression;
			other.Interceptions = this.Interceptions;
			other.Positioning = this.Positioning;
			other.Vision = this.Vision;
			other.Penalties = this.Penalties;
			other.Composure = this.Composure;
			other.Marking = this.Marking;
			other.StandingTackle = this.StandingTackle;
			other.SlidingTackle = this.SlidingTackle;
			other.GKDiving = this.GKDiving;
			other.GKHandling = this.GKHandling;
			other.GKKicking = this.GKKicking;
			other.GKPositioning = this.GKPositioning;
			other.GKReflexes = this.GKReflexes;
			other.Release_Clause = this.Release_Clause;
			other.Column88 = this.Column88;

		}

		public void copyKeysDataTo(row4Struct other) {

			other.ID = this.ID;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter.length == 0) {
						commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter.length == 0) {
						commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_DEMO_CSVReadNFilter) {

				try {

					int length = 0;

					this.ID = readInteger(dis);

					this.Name = readString(dis);

					this.Age = readInteger(dis);

					this.Photo = readString(dis);

					this.Nationality = readString(dis);

					this.Flag = readString(dis);

					this.Overall = readInteger(dis);

					this.Potential = readInteger(dis);

					this.Club = readString(dis);

					this.Club_Logo = readString(dis);

					this.Value = readString(dis);

					this.Wage = readString(dis);

					this.Special = readInteger(dis);

					this.Preferred_Foot = readString(dis);

					this.International_Reputation = readInteger(dis);

					this.Weak_Foot = readInteger(dis);

					this.Skill_Moves = readInteger(dis);

					this.Work_Rate = readString(dis);

					this.Body_Type = readString(dis);

					this.Real_Face = readString(dis);

					this.Position = readString(dis);

					this.Jersey_Number = readInteger(dis);

					this.Joined = readString(dis);

					this.Loaned_From = readString(dis);

					this.Contract_Valid_Until = readString(dis);

					this.Height = readInteger(dis);

					this.Weight = readString(dis);

					this.LS = readString(dis);

					this.ST = readString(dis);

					this.RS = readString(dis);

					this.LW = readString(dis);

					this.LF = readString(dis);

					this.CF = readString(dis);

					this.RF = readString(dis);

					this.RW = readString(dis);

					this.LAM = readString(dis);

					this.CAM = readString(dis);

					this.RAM = readString(dis);

					this.LM = readString(dis);

					this.LCM = readString(dis);

					this.CM = readString(dis);

					this.RCM = readString(dis);

					this.RM = readString(dis);

					this.LWB = readString(dis);

					this.LDM = readString(dis);

					this.CDM = readString(dis);

					this.RDM = readString(dis);

					this.RWB = readString(dis);

					this.LB = readString(dis);

					this.LCB = readString(dis);

					this.CB = readString(dis);

					this.RCB = readString(dis);

					this.RB = readString(dis);

					this.Crossing = readString(dis);

					this.Finishing = readInteger(dis);

					this.HeadingAccuracy = readInteger(dis);

					this.ShortPassing = readInteger(dis);

					this.Volleys = readInteger(dis);

					this.Dribbling = readInteger(dis);

					this.Curve = readInteger(dis);

					this.FKAccuracy = readInteger(dis);

					this.LongPassing = readInteger(dis);

					this.BallControl = readInteger(dis);

					this.Acceleration = readInteger(dis);

					this.SprintSpeed = readInteger(dis);

					this.Agility = readInteger(dis);

					this.Reactions = readInteger(dis);

					this.Balance = readInteger(dis);

					this.ShotPower = readInteger(dis);

					this.Jumping = readInteger(dis);

					this.Stamina = readInteger(dis);

					this.Strength = readInteger(dis);

					this.LongShots = readInteger(dis);

					this.Aggression = readInteger(dis);

					this.Interceptions = readInteger(dis);

					this.Positioning = readInteger(dis);

					this.Vision = readInteger(dis);

					this.Penalties = readInteger(dis);

					this.Composure = readInteger(dis);

					this.Marking = readInteger(dis);

					this.StandingTackle = readInteger(dis);

					this.SlidingTackle = readInteger(dis);

					this.GKDiving = readInteger(dis);

					this.GKHandling = readInteger(dis);

					this.GKKicking = readInteger(dis);

					this.GKPositioning = readInteger(dis);

					this.GKReflexes = readInteger(dis);

					this.Release_Clause = readInteger(dis);

					this.Column88 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_DEMO_CSVReadNFilter) {

				try {

					int length = 0;

					this.ID = readInteger(dis);

					this.Name = readString(dis);

					this.Age = readInteger(dis);

					this.Photo = readString(dis);

					this.Nationality = readString(dis);

					this.Flag = readString(dis);

					this.Overall = readInteger(dis);

					this.Potential = readInteger(dis);

					this.Club = readString(dis);

					this.Club_Logo = readString(dis);

					this.Value = readString(dis);

					this.Wage = readString(dis);

					this.Special = readInteger(dis);

					this.Preferred_Foot = readString(dis);

					this.International_Reputation = readInteger(dis);

					this.Weak_Foot = readInteger(dis);

					this.Skill_Moves = readInteger(dis);

					this.Work_Rate = readString(dis);

					this.Body_Type = readString(dis);

					this.Real_Face = readString(dis);

					this.Position = readString(dis);

					this.Jersey_Number = readInteger(dis);

					this.Joined = readString(dis);

					this.Loaned_From = readString(dis);

					this.Contract_Valid_Until = readString(dis);

					this.Height = readInteger(dis);

					this.Weight = readString(dis);

					this.LS = readString(dis);

					this.ST = readString(dis);

					this.RS = readString(dis);

					this.LW = readString(dis);

					this.LF = readString(dis);

					this.CF = readString(dis);

					this.RF = readString(dis);

					this.RW = readString(dis);

					this.LAM = readString(dis);

					this.CAM = readString(dis);

					this.RAM = readString(dis);

					this.LM = readString(dis);

					this.LCM = readString(dis);

					this.CM = readString(dis);

					this.RCM = readString(dis);

					this.RM = readString(dis);

					this.LWB = readString(dis);

					this.LDM = readString(dis);

					this.CDM = readString(dis);

					this.RDM = readString(dis);

					this.RWB = readString(dis);

					this.LB = readString(dis);

					this.LCB = readString(dis);

					this.CB = readString(dis);

					this.RCB = readString(dis);

					this.RB = readString(dis);

					this.Crossing = readString(dis);

					this.Finishing = readInteger(dis);

					this.HeadingAccuracy = readInteger(dis);

					this.ShortPassing = readInteger(dis);

					this.Volleys = readInteger(dis);

					this.Dribbling = readInteger(dis);

					this.Curve = readInteger(dis);

					this.FKAccuracy = readInteger(dis);

					this.LongPassing = readInteger(dis);

					this.BallControl = readInteger(dis);

					this.Acceleration = readInteger(dis);

					this.SprintSpeed = readInteger(dis);

					this.Agility = readInteger(dis);

					this.Reactions = readInteger(dis);

					this.Balance = readInteger(dis);

					this.ShotPower = readInteger(dis);

					this.Jumping = readInteger(dis);

					this.Stamina = readInteger(dis);

					this.Strength = readInteger(dis);

					this.LongShots = readInteger(dis);

					this.Aggression = readInteger(dis);

					this.Interceptions = readInteger(dis);

					this.Positioning = readInteger(dis);

					this.Vision = readInteger(dis);

					this.Penalties = readInteger(dis);

					this.Composure = readInteger(dis);

					this.Marking = readInteger(dis);

					this.StandingTackle = readInteger(dis);

					this.SlidingTackle = readInteger(dis);

					this.GKDiving = readInteger(dis);

					this.GKHandling = readInteger(dis);

					this.GKKicking = readInteger(dis);

					this.GKPositioning = readInteger(dis);

					this.GKReflexes = readInteger(dis);

					this.Release_Clause = readInteger(dis);

					this.Column88 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.ID, dos);

				// String

				writeString(this.Name, dos);

				// Integer

				writeInteger(this.Age, dos);

				// String

				writeString(this.Photo, dos);

				// String

				writeString(this.Nationality, dos);

				// String

				writeString(this.Flag, dos);

				// Integer

				writeInteger(this.Overall, dos);

				// Integer

				writeInteger(this.Potential, dos);

				// String

				writeString(this.Club, dos);

				// String

				writeString(this.Club_Logo, dos);

				// String

				writeString(this.Value, dos);

				// String

				writeString(this.Wage, dos);

				// Integer

				writeInteger(this.Special, dos);

				// String

				writeString(this.Preferred_Foot, dos);

				// Integer

				writeInteger(this.International_Reputation, dos);

				// Integer

				writeInteger(this.Weak_Foot, dos);

				// Integer

				writeInteger(this.Skill_Moves, dos);

				// String

				writeString(this.Work_Rate, dos);

				// String

				writeString(this.Body_Type, dos);

				// String

				writeString(this.Real_Face, dos);

				// String

				writeString(this.Position, dos);

				// Integer

				writeInteger(this.Jersey_Number, dos);

				// String

				writeString(this.Joined, dos);

				// String

				writeString(this.Loaned_From, dos);

				// String

				writeString(this.Contract_Valid_Until, dos);

				// Integer

				writeInteger(this.Height, dos);

				// String

				writeString(this.Weight, dos);

				// String

				writeString(this.LS, dos);

				// String

				writeString(this.ST, dos);

				// String

				writeString(this.RS, dos);

				// String

				writeString(this.LW, dos);

				// String

				writeString(this.LF, dos);

				// String

				writeString(this.CF, dos);

				// String

				writeString(this.RF, dos);

				// String

				writeString(this.RW, dos);

				// String

				writeString(this.LAM, dos);

				// String

				writeString(this.CAM, dos);

				// String

				writeString(this.RAM, dos);

				// String

				writeString(this.LM, dos);

				// String

				writeString(this.LCM, dos);

				// String

				writeString(this.CM, dos);

				// String

				writeString(this.RCM, dos);

				// String

				writeString(this.RM, dos);

				// String

				writeString(this.LWB, dos);

				// String

				writeString(this.LDM, dos);

				// String

				writeString(this.CDM, dos);

				// String

				writeString(this.RDM, dos);

				// String

				writeString(this.RWB, dos);

				// String

				writeString(this.LB, dos);

				// String

				writeString(this.LCB, dos);

				// String

				writeString(this.CB, dos);

				// String

				writeString(this.RCB, dos);

				// String

				writeString(this.RB, dos);

				// String

				writeString(this.Crossing, dos);

				// Integer

				writeInteger(this.Finishing, dos);

				// Integer

				writeInteger(this.HeadingAccuracy, dos);

				// Integer

				writeInteger(this.ShortPassing, dos);

				// Integer

				writeInteger(this.Volleys, dos);

				// Integer

				writeInteger(this.Dribbling, dos);

				// Integer

				writeInteger(this.Curve, dos);

				// Integer

				writeInteger(this.FKAccuracy, dos);

				// Integer

				writeInteger(this.LongPassing, dos);

				// Integer

				writeInteger(this.BallControl, dos);

				// Integer

				writeInteger(this.Acceleration, dos);

				// Integer

				writeInteger(this.SprintSpeed, dos);

				// Integer

				writeInteger(this.Agility, dos);

				// Integer

				writeInteger(this.Reactions, dos);

				// Integer

				writeInteger(this.Balance, dos);

				// Integer

				writeInteger(this.ShotPower, dos);

				// Integer

				writeInteger(this.Jumping, dos);

				// Integer

				writeInteger(this.Stamina, dos);

				// Integer

				writeInteger(this.Strength, dos);

				// Integer

				writeInteger(this.LongShots, dos);

				// Integer

				writeInteger(this.Aggression, dos);

				// Integer

				writeInteger(this.Interceptions, dos);

				// Integer

				writeInteger(this.Positioning, dos);

				// Integer

				writeInteger(this.Vision, dos);

				// Integer

				writeInteger(this.Penalties, dos);

				// Integer

				writeInteger(this.Composure, dos);

				// Integer

				writeInteger(this.Marking, dos);

				// Integer

				writeInteger(this.StandingTackle, dos);

				// Integer

				writeInteger(this.SlidingTackle, dos);

				// Integer

				writeInteger(this.GKDiving, dos);

				// Integer

				writeInteger(this.GKHandling, dos);

				// Integer

				writeInteger(this.GKKicking, dos);

				// Integer

				writeInteger(this.GKPositioning, dos);

				// Integer

				writeInteger(this.GKReflexes, dos);

				// Integer

				writeInteger(this.Release_Clause, dos);

				// String

				writeString(this.Column88, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.ID, dos);

				// String

				writeString(this.Name, dos);

				// Integer

				writeInteger(this.Age, dos);

				// String

				writeString(this.Photo, dos);

				// String

				writeString(this.Nationality, dos);

				// String

				writeString(this.Flag, dos);

				// Integer

				writeInteger(this.Overall, dos);

				// Integer

				writeInteger(this.Potential, dos);

				// String

				writeString(this.Club, dos);

				// String

				writeString(this.Club_Logo, dos);

				// String

				writeString(this.Value, dos);

				// String

				writeString(this.Wage, dos);

				// Integer

				writeInteger(this.Special, dos);

				// String

				writeString(this.Preferred_Foot, dos);

				// Integer

				writeInteger(this.International_Reputation, dos);

				// Integer

				writeInteger(this.Weak_Foot, dos);

				// Integer

				writeInteger(this.Skill_Moves, dos);

				// String

				writeString(this.Work_Rate, dos);

				// String

				writeString(this.Body_Type, dos);

				// String

				writeString(this.Real_Face, dos);

				// String

				writeString(this.Position, dos);

				// Integer

				writeInteger(this.Jersey_Number, dos);

				// String

				writeString(this.Joined, dos);

				// String

				writeString(this.Loaned_From, dos);

				// String

				writeString(this.Contract_Valid_Until, dos);

				// Integer

				writeInteger(this.Height, dos);

				// String

				writeString(this.Weight, dos);

				// String

				writeString(this.LS, dos);

				// String

				writeString(this.ST, dos);

				// String

				writeString(this.RS, dos);

				// String

				writeString(this.LW, dos);

				// String

				writeString(this.LF, dos);

				// String

				writeString(this.CF, dos);

				// String

				writeString(this.RF, dos);

				// String

				writeString(this.RW, dos);

				// String

				writeString(this.LAM, dos);

				// String

				writeString(this.CAM, dos);

				// String

				writeString(this.RAM, dos);

				// String

				writeString(this.LM, dos);

				// String

				writeString(this.LCM, dos);

				// String

				writeString(this.CM, dos);

				// String

				writeString(this.RCM, dos);

				// String

				writeString(this.RM, dos);

				// String

				writeString(this.LWB, dos);

				// String

				writeString(this.LDM, dos);

				// String

				writeString(this.CDM, dos);

				// String

				writeString(this.RDM, dos);

				// String

				writeString(this.RWB, dos);

				// String

				writeString(this.LB, dos);

				// String

				writeString(this.LCB, dos);

				// String

				writeString(this.CB, dos);

				// String

				writeString(this.RCB, dos);

				// String

				writeString(this.RB, dos);

				// String

				writeString(this.Crossing, dos);

				// Integer

				writeInteger(this.Finishing, dos);

				// Integer

				writeInteger(this.HeadingAccuracy, dos);

				// Integer

				writeInteger(this.ShortPassing, dos);

				// Integer

				writeInteger(this.Volleys, dos);

				// Integer

				writeInteger(this.Dribbling, dos);

				// Integer

				writeInteger(this.Curve, dos);

				// Integer

				writeInteger(this.FKAccuracy, dos);

				// Integer

				writeInteger(this.LongPassing, dos);

				// Integer

				writeInteger(this.BallControl, dos);

				// Integer

				writeInteger(this.Acceleration, dos);

				// Integer

				writeInteger(this.SprintSpeed, dos);

				// Integer

				writeInteger(this.Agility, dos);

				// Integer

				writeInteger(this.Reactions, dos);

				// Integer

				writeInteger(this.Balance, dos);

				// Integer

				writeInteger(this.ShotPower, dos);

				// Integer

				writeInteger(this.Jumping, dos);

				// Integer

				writeInteger(this.Stamina, dos);

				// Integer

				writeInteger(this.Strength, dos);

				// Integer

				writeInteger(this.LongShots, dos);

				// Integer

				writeInteger(this.Aggression, dos);

				// Integer

				writeInteger(this.Interceptions, dos);

				// Integer

				writeInteger(this.Positioning, dos);

				// Integer

				writeInteger(this.Vision, dos);

				// Integer

				writeInteger(this.Penalties, dos);

				// Integer

				writeInteger(this.Composure, dos);

				// Integer

				writeInteger(this.Marking, dos);

				// Integer

				writeInteger(this.StandingTackle, dos);

				// Integer

				writeInteger(this.SlidingTackle, dos);

				// Integer

				writeInteger(this.GKDiving, dos);

				// Integer

				writeInteger(this.GKHandling, dos);

				// Integer

				writeInteger(this.GKKicking, dos);

				// Integer

				writeInteger(this.GKPositioning, dos);

				// Integer

				writeInteger(this.GKReflexes, dos);

				// Integer

				writeInteger(this.Release_Clause, dos);

				// String

				writeString(this.Column88, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID=" + String.valueOf(ID));
			sb.append(",Name=" + Name);
			sb.append(",Age=" + String.valueOf(Age));
			sb.append(",Photo=" + Photo);
			sb.append(",Nationality=" + Nationality);
			sb.append(",Flag=" + Flag);
			sb.append(",Overall=" + String.valueOf(Overall));
			sb.append(",Potential=" + String.valueOf(Potential));
			sb.append(",Club=" + Club);
			sb.append(",Club_Logo=" + Club_Logo);
			sb.append(",Value=" + Value);
			sb.append(",Wage=" + Wage);
			sb.append(",Special=" + String.valueOf(Special));
			sb.append(",Preferred_Foot=" + Preferred_Foot);
			sb.append(",International_Reputation=" + String.valueOf(International_Reputation));
			sb.append(",Weak_Foot=" + String.valueOf(Weak_Foot));
			sb.append(",Skill_Moves=" + String.valueOf(Skill_Moves));
			sb.append(",Work_Rate=" + Work_Rate);
			sb.append(",Body_Type=" + Body_Type);
			sb.append(",Real_Face=" + Real_Face);
			sb.append(",Position=" + Position);
			sb.append(",Jersey_Number=" + String.valueOf(Jersey_Number));
			sb.append(",Joined=" + Joined);
			sb.append(",Loaned_From=" + Loaned_From);
			sb.append(",Contract_Valid_Until=" + Contract_Valid_Until);
			sb.append(",Height=" + String.valueOf(Height));
			sb.append(",Weight=" + Weight);
			sb.append(",LS=" + LS);
			sb.append(",ST=" + ST);
			sb.append(",RS=" + RS);
			sb.append(",LW=" + LW);
			sb.append(",LF=" + LF);
			sb.append(",CF=" + CF);
			sb.append(",RF=" + RF);
			sb.append(",RW=" + RW);
			sb.append(",LAM=" + LAM);
			sb.append(",CAM=" + CAM);
			sb.append(",RAM=" + RAM);
			sb.append(",LM=" + LM);
			sb.append(",LCM=" + LCM);
			sb.append(",CM=" + CM);
			sb.append(",RCM=" + RCM);
			sb.append(",RM=" + RM);
			sb.append(",LWB=" + LWB);
			sb.append(",LDM=" + LDM);
			sb.append(",CDM=" + CDM);
			sb.append(",RDM=" + RDM);
			sb.append(",RWB=" + RWB);
			sb.append(",LB=" + LB);
			sb.append(",LCB=" + LCB);
			sb.append(",CB=" + CB);
			sb.append(",RCB=" + RCB);
			sb.append(",RB=" + RB);
			sb.append(",Crossing=" + Crossing);
			sb.append(",Finishing=" + String.valueOf(Finishing));
			sb.append(",HeadingAccuracy=" + String.valueOf(HeadingAccuracy));
			sb.append(",ShortPassing=" + String.valueOf(ShortPassing));
			sb.append(",Volleys=" + String.valueOf(Volleys));
			sb.append(",Dribbling=" + String.valueOf(Dribbling));
			sb.append(",Curve=" + String.valueOf(Curve));
			sb.append(",FKAccuracy=" + String.valueOf(FKAccuracy));
			sb.append(",LongPassing=" + String.valueOf(LongPassing));
			sb.append(",BallControl=" + String.valueOf(BallControl));
			sb.append(",Acceleration=" + String.valueOf(Acceleration));
			sb.append(",SprintSpeed=" + String.valueOf(SprintSpeed));
			sb.append(",Agility=" + String.valueOf(Agility));
			sb.append(",Reactions=" + String.valueOf(Reactions));
			sb.append(",Balance=" + String.valueOf(Balance));
			sb.append(",ShotPower=" + String.valueOf(ShotPower));
			sb.append(",Jumping=" + String.valueOf(Jumping));
			sb.append(",Stamina=" + String.valueOf(Stamina));
			sb.append(",Strength=" + String.valueOf(Strength));
			sb.append(",LongShots=" + String.valueOf(LongShots));
			sb.append(",Aggression=" + String.valueOf(Aggression));
			sb.append(",Interceptions=" + String.valueOf(Interceptions));
			sb.append(",Positioning=" + String.valueOf(Positioning));
			sb.append(",Vision=" + String.valueOf(Vision));
			sb.append(",Penalties=" + String.valueOf(Penalties));
			sb.append(",Composure=" + String.valueOf(Composure));
			sb.append(",Marking=" + String.valueOf(Marking));
			sb.append(",StandingTackle=" + String.valueOf(StandingTackle));
			sb.append(",SlidingTackle=" + String.valueOf(SlidingTackle));
			sb.append(",GKDiving=" + String.valueOf(GKDiving));
			sb.append(",GKHandling=" + String.valueOf(GKHandling));
			sb.append(",GKKicking=" + String.valueOf(GKKicking));
			sb.append(",GKPositioning=" + String.valueOf(GKPositioning));
			sb.append(",GKReflexes=" + String.valueOf(GKReflexes));
			sb.append(",Release_Clause=" + String.valueOf(Release_Clause));
			sb.append(",Column88=" + Column88);
			sb.append("]");

			return sb.toString();
		}

		public String toLogString() {
			StringBuilder sb = new StringBuilder();

			if (ID == null) {
				sb.append("<null>");
			} else {
				sb.append(ID);
			}

			sb.append("|");

			if (Name == null) {
				sb.append("<null>");
			} else {
				sb.append(Name);
			}

			sb.append("|");

			if (Age == null) {
				sb.append("<null>");
			} else {
				sb.append(Age);
			}

			sb.append("|");

			if (Photo == null) {
				sb.append("<null>");
			} else {
				sb.append(Photo);
			}

			sb.append("|");

			if (Nationality == null) {
				sb.append("<null>");
			} else {
				sb.append(Nationality);
			}

			sb.append("|");

			if (Flag == null) {
				sb.append("<null>");
			} else {
				sb.append(Flag);
			}

			sb.append("|");

			if (Overall == null) {
				sb.append("<null>");
			} else {
				sb.append(Overall);
			}

			sb.append("|");

			if (Potential == null) {
				sb.append("<null>");
			} else {
				sb.append(Potential);
			}

			sb.append("|");

			if (Club == null) {
				sb.append("<null>");
			} else {
				sb.append(Club);
			}

			sb.append("|");

			if (Club_Logo == null) {
				sb.append("<null>");
			} else {
				sb.append(Club_Logo);
			}

			sb.append("|");

			if (Value == null) {
				sb.append("<null>");
			} else {
				sb.append(Value);
			}

			sb.append("|");

			if (Wage == null) {
				sb.append("<null>");
			} else {
				sb.append(Wage);
			}

			sb.append("|");

			if (Special == null) {
				sb.append("<null>");
			} else {
				sb.append(Special);
			}

			sb.append("|");

			if (Preferred_Foot == null) {
				sb.append("<null>");
			} else {
				sb.append(Preferred_Foot);
			}

			sb.append("|");

			if (International_Reputation == null) {
				sb.append("<null>");
			} else {
				sb.append(International_Reputation);
			}

			sb.append("|");

			if (Weak_Foot == null) {
				sb.append("<null>");
			} else {
				sb.append(Weak_Foot);
			}

			sb.append("|");

			if (Skill_Moves == null) {
				sb.append("<null>");
			} else {
				sb.append(Skill_Moves);
			}

			sb.append("|");

			if (Work_Rate == null) {
				sb.append("<null>");
			} else {
				sb.append(Work_Rate);
			}

			sb.append("|");

			if (Body_Type == null) {
				sb.append("<null>");
			} else {
				sb.append(Body_Type);
			}

			sb.append("|");

			if (Real_Face == null) {
				sb.append("<null>");
			} else {
				sb.append(Real_Face);
			}

			sb.append("|");

			if (Position == null) {
				sb.append("<null>");
			} else {
				sb.append(Position);
			}

			sb.append("|");

			if (Jersey_Number == null) {
				sb.append("<null>");
			} else {
				sb.append(Jersey_Number);
			}

			sb.append("|");

			if (Joined == null) {
				sb.append("<null>");
			} else {
				sb.append(Joined);
			}

			sb.append("|");

			if (Loaned_From == null) {
				sb.append("<null>");
			} else {
				sb.append(Loaned_From);
			}

			sb.append("|");

			if (Contract_Valid_Until == null) {
				sb.append("<null>");
			} else {
				sb.append(Contract_Valid_Until);
			}

			sb.append("|");

			if (Height == null) {
				sb.append("<null>");
			} else {
				sb.append(Height);
			}

			sb.append("|");

			if (Weight == null) {
				sb.append("<null>");
			} else {
				sb.append(Weight);
			}

			sb.append("|");

			if (LS == null) {
				sb.append("<null>");
			} else {
				sb.append(LS);
			}

			sb.append("|");

			if (ST == null) {
				sb.append("<null>");
			} else {
				sb.append(ST);
			}

			sb.append("|");

			if (RS == null) {
				sb.append("<null>");
			} else {
				sb.append(RS);
			}

			sb.append("|");

			if (LW == null) {
				sb.append("<null>");
			} else {
				sb.append(LW);
			}

			sb.append("|");

			if (LF == null) {
				sb.append("<null>");
			} else {
				sb.append(LF);
			}

			sb.append("|");

			if (CF == null) {
				sb.append("<null>");
			} else {
				sb.append(CF);
			}

			sb.append("|");

			if (RF == null) {
				sb.append("<null>");
			} else {
				sb.append(RF);
			}

			sb.append("|");

			if (RW == null) {
				sb.append("<null>");
			} else {
				sb.append(RW);
			}

			sb.append("|");

			if (LAM == null) {
				sb.append("<null>");
			} else {
				sb.append(LAM);
			}

			sb.append("|");

			if (CAM == null) {
				sb.append("<null>");
			} else {
				sb.append(CAM);
			}

			sb.append("|");

			if (RAM == null) {
				sb.append("<null>");
			} else {
				sb.append(RAM);
			}

			sb.append("|");

			if (LM == null) {
				sb.append("<null>");
			} else {
				sb.append(LM);
			}

			sb.append("|");

			if (LCM == null) {
				sb.append("<null>");
			} else {
				sb.append(LCM);
			}

			sb.append("|");

			if (CM == null) {
				sb.append("<null>");
			} else {
				sb.append(CM);
			}

			sb.append("|");

			if (RCM == null) {
				sb.append("<null>");
			} else {
				sb.append(RCM);
			}

			sb.append("|");

			if (RM == null) {
				sb.append("<null>");
			} else {
				sb.append(RM);
			}

			sb.append("|");

			if (LWB == null) {
				sb.append("<null>");
			} else {
				sb.append(LWB);
			}

			sb.append("|");

			if (LDM == null) {
				sb.append("<null>");
			} else {
				sb.append(LDM);
			}

			sb.append("|");

			if (CDM == null) {
				sb.append("<null>");
			} else {
				sb.append(CDM);
			}

			sb.append("|");

			if (RDM == null) {
				sb.append("<null>");
			} else {
				sb.append(RDM);
			}

			sb.append("|");

			if (RWB == null) {
				sb.append("<null>");
			} else {
				sb.append(RWB);
			}

			sb.append("|");

			if (LB == null) {
				sb.append("<null>");
			} else {
				sb.append(LB);
			}

			sb.append("|");

			if (LCB == null) {
				sb.append("<null>");
			} else {
				sb.append(LCB);
			}

			sb.append("|");

			if (CB == null) {
				sb.append("<null>");
			} else {
				sb.append(CB);
			}

			sb.append("|");

			if (RCB == null) {
				sb.append("<null>");
			} else {
				sb.append(RCB);
			}

			sb.append("|");

			if (RB == null) {
				sb.append("<null>");
			} else {
				sb.append(RB);
			}

			sb.append("|");

			if (Crossing == null) {
				sb.append("<null>");
			} else {
				sb.append(Crossing);
			}

			sb.append("|");

			if (Finishing == null) {
				sb.append("<null>");
			} else {
				sb.append(Finishing);
			}

			sb.append("|");

			if (HeadingAccuracy == null) {
				sb.append("<null>");
			} else {
				sb.append(HeadingAccuracy);
			}

			sb.append("|");

			if (ShortPassing == null) {
				sb.append("<null>");
			} else {
				sb.append(ShortPassing);
			}

			sb.append("|");

			if (Volleys == null) {
				sb.append("<null>");
			} else {
				sb.append(Volleys);
			}

			sb.append("|");

			if (Dribbling == null) {
				sb.append("<null>");
			} else {
				sb.append(Dribbling);
			}

			sb.append("|");

			if (Curve == null) {
				sb.append("<null>");
			} else {
				sb.append(Curve);
			}

			sb.append("|");

			if (FKAccuracy == null) {
				sb.append("<null>");
			} else {
				sb.append(FKAccuracy);
			}

			sb.append("|");

			if (LongPassing == null) {
				sb.append("<null>");
			} else {
				sb.append(LongPassing);
			}

			sb.append("|");

			if (BallControl == null) {
				sb.append("<null>");
			} else {
				sb.append(BallControl);
			}

			sb.append("|");

			if (Acceleration == null) {
				sb.append("<null>");
			} else {
				sb.append(Acceleration);
			}

			sb.append("|");

			if (SprintSpeed == null) {
				sb.append("<null>");
			} else {
				sb.append(SprintSpeed);
			}

			sb.append("|");

			if (Agility == null) {
				sb.append("<null>");
			} else {
				sb.append(Agility);
			}

			sb.append("|");

			if (Reactions == null) {
				sb.append("<null>");
			} else {
				sb.append(Reactions);
			}

			sb.append("|");

			if (Balance == null) {
				sb.append("<null>");
			} else {
				sb.append(Balance);
			}

			sb.append("|");

			if (ShotPower == null) {
				sb.append("<null>");
			} else {
				sb.append(ShotPower);
			}

			sb.append("|");

			if (Jumping == null) {
				sb.append("<null>");
			} else {
				sb.append(Jumping);
			}

			sb.append("|");

			if (Stamina == null) {
				sb.append("<null>");
			} else {
				sb.append(Stamina);
			}

			sb.append("|");

			if (Strength == null) {
				sb.append("<null>");
			} else {
				sb.append(Strength);
			}

			sb.append("|");

			if (LongShots == null) {
				sb.append("<null>");
			} else {
				sb.append(LongShots);
			}

			sb.append("|");

			if (Aggression == null) {
				sb.append("<null>");
			} else {
				sb.append(Aggression);
			}

			sb.append("|");

			if (Interceptions == null) {
				sb.append("<null>");
			} else {
				sb.append(Interceptions);
			}

			sb.append("|");

			if (Positioning == null) {
				sb.append("<null>");
			} else {
				sb.append(Positioning);
			}

			sb.append("|");

			if (Vision == null) {
				sb.append("<null>");
			} else {
				sb.append(Vision);
			}

			sb.append("|");

			if (Penalties == null) {
				sb.append("<null>");
			} else {
				sb.append(Penalties);
			}

			sb.append("|");

			if (Composure == null) {
				sb.append("<null>");
			} else {
				sb.append(Composure);
			}

			sb.append("|");

			if (Marking == null) {
				sb.append("<null>");
			} else {
				sb.append(Marking);
			}

			sb.append("|");

			if (StandingTackle == null) {
				sb.append("<null>");
			} else {
				sb.append(StandingTackle);
			}

			sb.append("|");

			if (SlidingTackle == null) {
				sb.append("<null>");
			} else {
				sb.append(SlidingTackle);
			}

			sb.append("|");

			if (GKDiving == null) {
				sb.append("<null>");
			} else {
				sb.append(GKDiving);
			}

			sb.append("|");

			if (GKHandling == null) {
				sb.append("<null>");
			} else {
				sb.append(GKHandling);
			}

			sb.append("|");

			if (GKKicking == null) {
				sb.append("<null>");
			} else {
				sb.append(GKKicking);
			}

			sb.append("|");

			if (GKPositioning == null) {
				sb.append("<null>");
			} else {
				sb.append(GKPositioning);
			}

			sb.append("|");

			if (GKReflexes == null) {
				sb.append("<null>");
			} else {
				sb.append(GKReflexes);
			}

			sb.append("|");

			if (Release_Clause == null) {
				sb.append("<null>");
			} else {
				sb.append(Release_Clause);
			}

			sb.append("|");

			if (Column88 == null) {
				sb.append("<null>");
			} else {
				sb.append(Column88);
			}

			sb.append("|");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID, other.ID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_DEMO_CSVReadNFilter = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer ID;

		public Integer getID() {
			return this.ID;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public Integer Age;

		public Integer getAge() {
			return this.Age;
		}

		public String Photo;

		public String getPhoto() {
			return this.Photo;
		}

		public String Nationality;

		public String getNationality() {
			return this.Nationality;
		}

		public String Flag;

		public String getFlag() {
			return this.Flag;
		}

		public Integer Overall;

		public Integer getOverall() {
			return this.Overall;
		}

		public Integer Potential;

		public Integer getPotential() {
			return this.Potential;
		}

		public String Club;

		public String getClub() {
			return this.Club;
		}

		public String Club_Logo;

		public String getClub_Logo() {
			return this.Club_Logo;
		}

		public String Value;

		public String getValue() {
			return this.Value;
		}

		public String Wage;

		public String getWage() {
			return this.Wage;
		}

		public Integer Special;

		public Integer getSpecial() {
			return this.Special;
		}

		public String Preferred_Foot;

		public String getPreferred_Foot() {
			return this.Preferred_Foot;
		}

		public Integer International_Reputation;

		public Integer getInternational_Reputation() {
			return this.International_Reputation;
		}

		public Integer Weak_Foot;

		public Integer getWeak_Foot() {
			return this.Weak_Foot;
		}

		public Integer Skill_Moves;

		public Integer getSkill_Moves() {
			return this.Skill_Moves;
		}

		public String Work_Rate;

		public String getWork_Rate() {
			return this.Work_Rate;
		}

		public String Body_Type;

		public String getBody_Type() {
			return this.Body_Type;
		}

		public String Real_Face;

		public String getReal_Face() {
			return this.Real_Face;
		}

		public String Position;

		public String getPosition() {
			return this.Position;
		}

		public Integer Jersey_Number;

		public Integer getJersey_Number() {
			return this.Jersey_Number;
		}

		public String Joined;

		public String getJoined() {
			return this.Joined;
		}

		public String Loaned_From;

		public String getLoaned_From() {
			return this.Loaned_From;
		}

		public String Contract_Valid_Until;

		public String getContract_Valid_Until() {
			return this.Contract_Valid_Until;
		}

		public Integer Height;

		public Integer getHeight() {
			return this.Height;
		}

		public String Weight;

		public String getWeight() {
			return this.Weight;
		}

		public String LS;

		public String getLS() {
			return this.LS;
		}

		public String ST;

		public String getST() {
			return this.ST;
		}

		public String RS;

		public String getRS() {
			return this.RS;
		}

		public String LW;

		public String getLW() {
			return this.LW;
		}

		public String LF;

		public String getLF() {
			return this.LF;
		}

		public String CF;

		public String getCF() {
			return this.CF;
		}

		public String RF;

		public String getRF() {
			return this.RF;
		}

		public String RW;

		public String getRW() {
			return this.RW;
		}

		public String LAM;

		public String getLAM() {
			return this.LAM;
		}

		public String CAM;

		public String getCAM() {
			return this.CAM;
		}

		public String RAM;

		public String getRAM() {
			return this.RAM;
		}

		public String LM;

		public String getLM() {
			return this.LM;
		}

		public String LCM;

		public String getLCM() {
			return this.LCM;
		}

		public String CM;

		public String getCM() {
			return this.CM;
		}

		public String RCM;

		public String getRCM() {
			return this.RCM;
		}

		public String RM;

		public String getRM() {
			return this.RM;
		}

		public String LWB;

		public String getLWB() {
			return this.LWB;
		}

		public String LDM;

		public String getLDM() {
			return this.LDM;
		}

		public String CDM;

		public String getCDM() {
			return this.CDM;
		}

		public String RDM;

		public String getRDM() {
			return this.RDM;
		}

		public String RWB;

		public String getRWB() {
			return this.RWB;
		}

		public String LB;

		public String getLB() {
			return this.LB;
		}

		public String LCB;

		public String getLCB() {
			return this.LCB;
		}

		public String CB;

		public String getCB() {
			return this.CB;
		}

		public String RCB;

		public String getRCB() {
			return this.RCB;
		}

		public String RB;

		public String getRB() {
			return this.RB;
		}

		public String Crossing;

		public String getCrossing() {
			return this.Crossing;
		}

		public Integer Finishing;

		public Integer getFinishing() {
			return this.Finishing;
		}

		public Integer HeadingAccuracy;

		public Integer getHeadingAccuracy() {
			return this.HeadingAccuracy;
		}

		public Integer ShortPassing;

		public Integer getShortPassing() {
			return this.ShortPassing;
		}

		public Integer Volleys;

		public Integer getVolleys() {
			return this.Volleys;
		}

		public Integer Dribbling;

		public Integer getDribbling() {
			return this.Dribbling;
		}

		public Integer Curve;

		public Integer getCurve() {
			return this.Curve;
		}

		public Integer FKAccuracy;

		public Integer getFKAccuracy() {
			return this.FKAccuracy;
		}

		public Integer LongPassing;

		public Integer getLongPassing() {
			return this.LongPassing;
		}

		public Integer BallControl;

		public Integer getBallControl() {
			return this.BallControl;
		}

		public Integer Acceleration;

		public Integer getAcceleration() {
			return this.Acceleration;
		}

		public Integer SprintSpeed;

		public Integer getSprintSpeed() {
			return this.SprintSpeed;
		}

		public Integer Agility;

		public Integer getAgility() {
			return this.Agility;
		}

		public Integer Reactions;

		public Integer getReactions() {
			return this.Reactions;
		}

		public Integer Balance;

		public Integer getBalance() {
			return this.Balance;
		}

		public Integer ShotPower;

		public Integer getShotPower() {
			return this.ShotPower;
		}

		public Integer Jumping;

		public Integer getJumping() {
			return this.Jumping;
		}

		public Integer Stamina;

		public Integer getStamina() {
			return this.Stamina;
		}

		public Integer Strength;

		public Integer getStrength() {
			return this.Strength;
		}

		public Integer LongShots;

		public Integer getLongShots() {
			return this.LongShots;
		}

		public Integer Aggression;

		public Integer getAggression() {
			return this.Aggression;
		}

		public Integer Interceptions;

		public Integer getInterceptions() {
			return this.Interceptions;
		}

		public Integer Positioning;

		public Integer getPositioning() {
			return this.Positioning;
		}

		public Integer Vision;

		public Integer getVision() {
			return this.Vision;
		}

		public Integer Penalties;

		public Integer getPenalties() {
			return this.Penalties;
		}

		public Integer Composure;

		public Integer getComposure() {
			return this.Composure;
		}

		public Integer Marking;

		public Integer getMarking() {
			return this.Marking;
		}

		public Integer StandingTackle;

		public Integer getStandingTackle() {
			return this.StandingTackle;
		}

		public Integer SlidingTackle;

		public Integer getSlidingTackle() {
			return this.SlidingTackle;
		}

		public Integer GKDiving;

		public Integer getGKDiving() {
			return this.GKDiving;
		}

		public Integer GKHandling;

		public Integer getGKHandling() {
			return this.GKHandling;
		}

		public Integer GKKicking;

		public Integer getGKKicking() {
			return this.GKKicking;
		}

		public Integer GKPositioning;

		public Integer getGKPositioning() {
			return this.GKPositioning;
		}

		public Integer GKReflexes;

		public Integer getGKReflexes() {
			return this.GKReflexes;
		}

		public Integer Release_Clause;

		public Integer getRelease_Clause() {
			return this.Release_Clause;
		}

		public String Column88;

		public String getColumn88() {
			return this.Column88;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row5Struct other = (row5Struct) obj;

			if (this.ID == null) {
				if (other.ID != null)
					return false;

			} else if (!this.ID.equals(other.ID))

				return false;

			return true;
		}

		public void copyDataTo(row5Struct other) {

			other.ID = this.ID;
			other.Name = this.Name;
			other.Age = this.Age;
			other.Photo = this.Photo;
			other.Nationality = this.Nationality;
			other.Flag = this.Flag;
			other.Overall = this.Overall;
			other.Potential = this.Potential;
			other.Club = this.Club;
			other.Club_Logo = this.Club_Logo;
			other.Value = this.Value;
			other.Wage = this.Wage;
			other.Special = this.Special;
			other.Preferred_Foot = this.Preferred_Foot;
			other.International_Reputation = this.International_Reputation;
			other.Weak_Foot = this.Weak_Foot;
			other.Skill_Moves = this.Skill_Moves;
			other.Work_Rate = this.Work_Rate;
			other.Body_Type = this.Body_Type;
			other.Real_Face = this.Real_Face;
			other.Position = this.Position;
			other.Jersey_Number = this.Jersey_Number;
			other.Joined = this.Joined;
			other.Loaned_From = this.Loaned_From;
			other.Contract_Valid_Until = this.Contract_Valid_Until;
			other.Height = this.Height;
			other.Weight = this.Weight;
			other.LS = this.LS;
			other.ST = this.ST;
			other.RS = this.RS;
			other.LW = this.LW;
			other.LF = this.LF;
			other.CF = this.CF;
			other.RF = this.RF;
			other.RW = this.RW;
			other.LAM = this.LAM;
			other.CAM = this.CAM;
			other.RAM = this.RAM;
			other.LM = this.LM;
			other.LCM = this.LCM;
			other.CM = this.CM;
			other.RCM = this.RCM;
			other.RM = this.RM;
			other.LWB = this.LWB;
			other.LDM = this.LDM;
			other.CDM = this.CDM;
			other.RDM = this.RDM;
			other.RWB = this.RWB;
			other.LB = this.LB;
			other.LCB = this.LCB;
			other.CB = this.CB;
			other.RCB = this.RCB;
			other.RB = this.RB;
			other.Crossing = this.Crossing;
			other.Finishing = this.Finishing;
			other.HeadingAccuracy = this.HeadingAccuracy;
			other.ShortPassing = this.ShortPassing;
			other.Volleys = this.Volleys;
			other.Dribbling = this.Dribbling;
			other.Curve = this.Curve;
			other.FKAccuracy = this.FKAccuracy;
			other.LongPassing = this.LongPassing;
			other.BallControl = this.BallControl;
			other.Acceleration = this.Acceleration;
			other.SprintSpeed = this.SprintSpeed;
			other.Agility = this.Agility;
			other.Reactions = this.Reactions;
			other.Balance = this.Balance;
			other.ShotPower = this.ShotPower;
			other.Jumping = this.Jumping;
			other.Stamina = this.Stamina;
			other.Strength = this.Strength;
			other.LongShots = this.LongShots;
			other.Aggression = this.Aggression;
			other.Interceptions = this.Interceptions;
			other.Positioning = this.Positioning;
			other.Vision = this.Vision;
			other.Penalties = this.Penalties;
			other.Composure = this.Composure;
			other.Marking = this.Marking;
			other.StandingTackle = this.StandingTackle;
			other.SlidingTackle = this.SlidingTackle;
			other.GKDiving = this.GKDiving;
			other.GKHandling = this.GKHandling;
			other.GKKicking = this.GKKicking;
			other.GKPositioning = this.GKPositioning;
			other.GKReflexes = this.GKReflexes;
			other.Release_Clause = this.Release_Clause;
			other.Column88 = this.Column88;

		}

		public void copyKeysDataTo(row5Struct other) {

			other.ID = this.ID;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter.length == 0) {
						commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter.length == 0) {
						commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_DEMO_CSVReadNFilter) {

				try {

					int length = 0;

					this.ID = readInteger(dis);

					this.Name = readString(dis);

					this.Age = readInteger(dis);

					this.Photo = readString(dis);

					this.Nationality = readString(dis);

					this.Flag = readString(dis);

					this.Overall = readInteger(dis);

					this.Potential = readInteger(dis);

					this.Club = readString(dis);

					this.Club_Logo = readString(dis);

					this.Value = readString(dis);

					this.Wage = readString(dis);

					this.Special = readInteger(dis);

					this.Preferred_Foot = readString(dis);

					this.International_Reputation = readInteger(dis);

					this.Weak_Foot = readInteger(dis);

					this.Skill_Moves = readInteger(dis);

					this.Work_Rate = readString(dis);

					this.Body_Type = readString(dis);

					this.Real_Face = readString(dis);

					this.Position = readString(dis);

					this.Jersey_Number = readInteger(dis);

					this.Joined = readString(dis);

					this.Loaned_From = readString(dis);

					this.Contract_Valid_Until = readString(dis);

					this.Height = readInteger(dis);

					this.Weight = readString(dis);

					this.LS = readString(dis);

					this.ST = readString(dis);

					this.RS = readString(dis);

					this.LW = readString(dis);

					this.LF = readString(dis);

					this.CF = readString(dis);

					this.RF = readString(dis);

					this.RW = readString(dis);

					this.LAM = readString(dis);

					this.CAM = readString(dis);

					this.RAM = readString(dis);

					this.LM = readString(dis);

					this.LCM = readString(dis);

					this.CM = readString(dis);

					this.RCM = readString(dis);

					this.RM = readString(dis);

					this.LWB = readString(dis);

					this.LDM = readString(dis);

					this.CDM = readString(dis);

					this.RDM = readString(dis);

					this.RWB = readString(dis);

					this.LB = readString(dis);

					this.LCB = readString(dis);

					this.CB = readString(dis);

					this.RCB = readString(dis);

					this.RB = readString(dis);

					this.Crossing = readString(dis);

					this.Finishing = readInteger(dis);

					this.HeadingAccuracy = readInteger(dis);

					this.ShortPassing = readInteger(dis);

					this.Volleys = readInteger(dis);

					this.Dribbling = readInteger(dis);

					this.Curve = readInteger(dis);

					this.FKAccuracy = readInteger(dis);

					this.LongPassing = readInteger(dis);

					this.BallControl = readInteger(dis);

					this.Acceleration = readInteger(dis);

					this.SprintSpeed = readInteger(dis);

					this.Agility = readInteger(dis);

					this.Reactions = readInteger(dis);

					this.Balance = readInteger(dis);

					this.ShotPower = readInteger(dis);

					this.Jumping = readInteger(dis);

					this.Stamina = readInteger(dis);

					this.Strength = readInteger(dis);

					this.LongShots = readInteger(dis);

					this.Aggression = readInteger(dis);

					this.Interceptions = readInteger(dis);

					this.Positioning = readInteger(dis);

					this.Vision = readInteger(dis);

					this.Penalties = readInteger(dis);

					this.Composure = readInteger(dis);

					this.Marking = readInteger(dis);

					this.StandingTackle = readInteger(dis);

					this.SlidingTackle = readInteger(dis);

					this.GKDiving = readInteger(dis);

					this.GKHandling = readInteger(dis);

					this.GKKicking = readInteger(dis);

					this.GKPositioning = readInteger(dis);

					this.GKReflexes = readInteger(dis);

					this.Release_Clause = readInteger(dis);

					this.Column88 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_DEMO_CSVReadNFilter) {

				try {

					int length = 0;

					this.ID = readInteger(dis);

					this.Name = readString(dis);

					this.Age = readInteger(dis);

					this.Photo = readString(dis);

					this.Nationality = readString(dis);

					this.Flag = readString(dis);

					this.Overall = readInteger(dis);

					this.Potential = readInteger(dis);

					this.Club = readString(dis);

					this.Club_Logo = readString(dis);

					this.Value = readString(dis);

					this.Wage = readString(dis);

					this.Special = readInteger(dis);

					this.Preferred_Foot = readString(dis);

					this.International_Reputation = readInteger(dis);

					this.Weak_Foot = readInteger(dis);

					this.Skill_Moves = readInteger(dis);

					this.Work_Rate = readString(dis);

					this.Body_Type = readString(dis);

					this.Real_Face = readString(dis);

					this.Position = readString(dis);

					this.Jersey_Number = readInteger(dis);

					this.Joined = readString(dis);

					this.Loaned_From = readString(dis);

					this.Contract_Valid_Until = readString(dis);

					this.Height = readInteger(dis);

					this.Weight = readString(dis);

					this.LS = readString(dis);

					this.ST = readString(dis);

					this.RS = readString(dis);

					this.LW = readString(dis);

					this.LF = readString(dis);

					this.CF = readString(dis);

					this.RF = readString(dis);

					this.RW = readString(dis);

					this.LAM = readString(dis);

					this.CAM = readString(dis);

					this.RAM = readString(dis);

					this.LM = readString(dis);

					this.LCM = readString(dis);

					this.CM = readString(dis);

					this.RCM = readString(dis);

					this.RM = readString(dis);

					this.LWB = readString(dis);

					this.LDM = readString(dis);

					this.CDM = readString(dis);

					this.RDM = readString(dis);

					this.RWB = readString(dis);

					this.LB = readString(dis);

					this.LCB = readString(dis);

					this.CB = readString(dis);

					this.RCB = readString(dis);

					this.RB = readString(dis);

					this.Crossing = readString(dis);

					this.Finishing = readInteger(dis);

					this.HeadingAccuracy = readInteger(dis);

					this.ShortPassing = readInteger(dis);

					this.Volleys = readInteger(dis);

					this.Dribbling = readInteger(dis);

					this.Curve = readInteger(dis);

					this.FKAccuracy = readInteger(dis);

					this.LongPassing = readInteger(dis);

					this.BallControl = readInteger(dis);

					this.Acceleration = readInteger(dis);

					this.SprintSpeed = readInteger(dis);

					this.Agility = readInteger(dis);

					this.Reactions = readInteger(dis);

					this.Balance = readInteger(dis);

					this.ShotPower = readInteger(dis);

					this.Jumping = readInteger(dis);

					this.Stamina = readInteger(dis);

					this.Strength = readInteger(dis);

					this.LongShots = readInteger(dis);

					this.Aggression = readInteger(dis);

					this.Interceptions = readInteger(dis);

					this.Positioning = readInteger(dis);

					this.Vision = readInteger(dis);

					this.Penalties = readInteger(dis);

					this.Composure = readInteger(dis);

					this.Marking = readInteger(dis);

					this.StandingTackle = readInteger(dis);

					this.SlidingTackle = readInteger(dis);

					this.GKDiving = readInteger(dis);

					this.GKHandling = readInteger(dis);

					this.GKKicking = readInteger(dis);

					this.GKPositioning = readInteger(dis);

					this.GKReflexes = readInteger(dis);

					this.Release_Clause = readInteger(dis);

					this.Column88 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.ID, dos);

				// String

				writeString(this.Name, dos);

				// Integer

				writeInteger(this.Age, dos);

				// String

				writeString(this.Photo, dos);

				// String

				writeString(this.Nationality, dos);

				// String

				writeString(this.Flag, dos);

				// Integer

				writeInteger(this.Overall, dos);

				// Integer

				writeInteger(this.Potential, dos);

				// String

				writeString(this.Club, dos);

				// String

				writeString(this.Club_Logo, dos);

				// String

				writeString(this.Value, dos);

				// String

				writeString(this.Wage, dos);

				// Integer

				writeInteger(this.Special, dos);

				// String

				writeString(this.Preferred_Foot, dos);

				// Integer

				writeInteger(this.International_Reputation, dos);

				// Integer

				writeInteger(this.Weak_Foot, dos);

				// Integer

				writeInteger(this.Skill_Moves, dos);

				// String

				writeString(this.Work_Rate, dos);

				// String

				writeString(this.Body_Type, dos);

				// String

				writeString(this.Real_Face, dos);

				// String

				writeString(this.Position, dos);

				// Integer

				writeInteger(this.Jersey_Number, dos);

				// String

				writeString(this.Joined, dos);

				// String

				writeString(this.Loaned_From, dos);

				// String

				writeString(this.Contract_Valid_Until, dos);

				// Integer

				writeInteger(this.Height, dos);

				// String

				writeString(this.Weight, dos);

				// String

				writeString(this.LS, dos);

				// String

				writeString(this.ST, dos);

				// String

				writeString(this.RS, dos);

				// String

				writeString(this.LW, dos);

				// String

				writeString(this.LF, dos);

				// String

				writeString(this.CF, dos);

				// String

				writeString(this.RF, dos);

				// String

				writeString(this.RW, dos);

				// String

				writeString(this.LAM, dos);

				// String

				writeString(this.CAM, dos);

				// String

				writeString(this.RAM, dos);

				// String

				writeString(this.LM, dos);

				// String

				writeString(this.LCM, dos);

				// String

				writeString(this.CM, dos);

				// String

				writeString(this.RCM, dos);

				// String

				writeString(this.RM, dos);

				// String

				writeString(this.LWB, dos);

				// String

				writeString(this.LDM, dos);

				// String

				writeString(this.CDM, dos);

				// String

				writeString(this.RDM, dos);

				// String

				writeString(this.RWB, dos);

				// String

				writeString(this.LB, dos);

				// String

				writeString(this.LCB, dos);

				// String

				writeString(this.CB, dos);

				// String

				writeString(this.RCB, dos);

				// String

				writeString(this.RB, dos);

				// String

				writeString(this.Crossing, dos);

				// Integer

				writeInteger(this.Finishing, dos);

				// Integer

				writeInteger(this.HeadingAccuracy, dos);

				// Integer

				writeInteger(this.ShortPassing, dos);

				// Integer

				writeInteger(this.Volleys, dos);

				// Integer

				writeInteger(this.Dribbling, dos);

				// Integer

				writeInteger(this.Curve, dos);

				// Integer

				writeInteger(this.FKAccuracy, dos);

				// Integer

				writeInteger(this.LongPassing, dos);

				// Integer

				writeInteger(this.BallControl, dos);

				// Integer

				writeInteger(this.Acceleration, dos);

				// Integer

				writeInteger(this.SprintSpeed, dos);

				// Integer

				writeInteger(this.Agility, dos);

				// Integer

				writeInteger(this.Reactions, dos);

				// Integer

				writeInteger(this.Balance, dos);

				// Integer

				writeInteger(this.ShotPower, dos);

				// Integer

				writeInteger(this.Jumping, dos);

				// Integer

				writeInteger(this.Stamina, dos);

				// Integer

				writeInteger(this.Strength, dos);

				// Integer

				writeInteger(this.LongShots, dos);

				// Integer

				writeInteger(this.Aggression, dos);

				// Integer

				writeInteger(this.Interceptions, dos);

				// Integer

				writeInteger(this.Positioning, dos);

				// Integer

				writeInteger(this.Vision, dos);

				// Integer

				writeInteger(this.Penalties, dos);

				// Integer

				writeInteger(this.Composure, dos);

				// Integer

				writeInteger(this.Marking, dos);

				// Integer

				writeInteger(this.StandingTackle, dos);

				// Integer

				writeInteger(this.SlidingTackle, dos);

				// Integer

				writeInteger(this.GKDiving, dos);

				// Integer

				writeInteger(this.GKHandling, dos);

				// Integer

				writeInteger(this.GKKicking, dos);

				// Integer

				writeInteger(this.GKPositioning, dos);

				// Integer

				writeInteger(this.GKReflexes, dos);

				// Integer

				writeInteger(this.Release_Clause, dos);

				// String

				writeString(this.Column88, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.ID, dos);

				// String

				writeString(this.Name, dos);

				// Integer

				writeInteger(this.Age, dos);

				// String

				writeString(this.Photo, dos);

				// String

				writeString(this.Nationality, dos);

				// String

				writeString(this.Flag, dos);

				// Integer

				writeInteger(this.Overall, dos);

				// Integer

				writeInteger(this.Potential, dos);

				// String

				writeString(this.Club, dos);

				// String

				writeString(this.Club_Logo, dos);

				// String

				writeString(this.Value, dos);

				// String

				writeString(this.Wage, dos);

				// Integer

				writeInteger(this.Special, dos);

				// String

				writeString(this.Preferred_Foot, dos);

				// Integer

				writeInteger(this.International_Reputation, dos);

				// Integer

				writeInteger(this.Weak_Foot, dos);

				// Integer

				writeInteger(this.Skill_Moves, dos);

				// String

				writeString(this.Work_Rate, dos);

				// String

				writeString(this.Body_Type, dos);

				// String

				writeString(this.Real_Face, dos);

				// String

				writeString(this.Position, dos);

				// Integer

				writeInteger(this.Jersey_Number, dos);

				// String

				writeString(this.Joined, dos);

				// String

				writeString(this.Loaned_From, dos);

				// String

				writeString(this.Contract_Valid_Until, dos);

				// Integer

				writeInteger(this.Height, dos);

				// String

				writeString(this.Weight, dos);

				// String

				writeString(this.LS, dos);

				// String

				writeString(this.ST, dos);

				// String

				writeString(this.RS, dos);

				// String

				writeString(this.LW, dos);

				// String

				writeString(this.LF, dos);

				// String

				writeString(this.CF, dos);

				// String

				writeString(this.RF, dos);

				// String

				writeString(this.RW, dos);

				// String

				writeString(this.LAM, dos);

				// String

				writeString(this.CAM, dos);

				// String

				writeString(this.RAM, dos);

				// String

				writeString(this.LM, dos);

				// String

				writeString(this.LCM, dos);

				// String

				writeString(this.CM, dos);

				// String

				writeString(this.RCM, dos);

				// String

				writeString(this.RM, dos);

				// String

				writeString(this.LWB, dos);

				// String

				writeString(this.LDM, dos);

				// String

				writeString(this.CDM, dos);

				// String

				writeString(this.RDM, dos);

				// String

				writeString(this.RWB, dos);

				// String

				writeString(this.LB, dos);

				// String

				writeString(this.LCB, dos);

				// String

				writeString(this.CB, dos);

				// String

				writeString(this.RCB, dos);

				// String

				writeString(this.RB, dos);

				// String

				writeString(this.Crossing, dos);

				// Integer

				writeInteger(this.Finishing, dos);

				// Integer

				writeInteger(this.HeadingAccuracy, dos);

				// Integer

				writeInteger(this.ShortPassing, dos);

				// Integer

				writeInteger(this.Volleys, dos);

				// Integer

				writeInteger(this.Dribbling, dos);

				// Integer

				writeInteger(this.Curve, dos);

				// Integer

				writeInteger(this.FKAccuracy, dos);

				// Integer

				writeInteger(this.LongPassing, dos);

				// Integer

				writeInteger(this.BallControl, dos);

				// Integer

				writeInteger(this.Acceleration, dos);

				// Integer

				writeInteger(this.SprintSpeed, dos);

				// Integer

				writeInteger(this.Agility, dos);

				// Integer

				writeInteger(this.Reactions, dos);

				// Integer

				writeInteger(this.Balance, dos);

				// Integer

				writeInteger(this.ShotPower, dos);

				// Integer

				writeInteger(this.Jumping, dos);

				// Integer

				writeInteger(this.Stamina, dos);

				// Integer

				writeInteger(this.Strength, dos);

				// Integer

				writeInteger(this.LongShots, dos);

				// Integer

				writeInteger(this.Aggression, dos);

				// Integer

				writeInteger(this.Interceptions, dos);

				// Integer

				writeInteger(this.Positioning, dos);

				// Integer

				writeInteger(this.Vision, dos);

				// Integer

				writeInteger(this.Penalties, dos);

				// Integer

				writeInteger(this.Composure, dos);

				// Integer

				writeInteger(this.Marking, dos);

				// Integer

				writeInteger(this.StandingTackle, dos);

				// Integer

				writeInteger(this.SlidingTackle, dos);

				// Integer

				writeInteger(this.GKDiving, dos);

				// Integer

				writeInteger(this.GKHandling, dos);

				// Integer

				writeInteger(this.GKKicking, dos);

				// Integer

				writeInteger(this.GKPositioning, dos);

				// Integer

				writeInteger(this.GKReflexes, dos);

				// Integer

				writeInteger(this.Release_Clause, dos);

				// String

				writeString(this.Column88, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID=" + String.valueOf(ID));
			sb.append(",Name=" + Name);
			sb.append(",Age=" + String.valueOf(Age));
			sb.append(",Photo=" + Photo);
			sb.append(",Nationality=" + Nationality);
			sb.append(",Flag=" + Flag);
			sb.append(",Overall=" + String.valueOf(Overall));
			sb.append(",Potential=" + String.valueOf(Potential));
			sb.append(",Club=" + Club);
			sb.append(",Club_Logo=" + Club_Logo);
			sb.append(",Value=" + Value);
			sb.append(",Wage=" + Wage);
			sb.append(",Special=" + String.valueOf(Special));
			sb.append(",Preferred_Foot=" + Preferred_Foot);
			sb.append(",International_Reputation=" + String.valueOf(International_Reputation));
			sb.append(",Weak_Foot=" + String.valueOf(Weak_Foot));
			sb.append(",Skill_Moves=" + String.valueOf(Skill_Moves));
			sb.append(",Work_Rate=" + Work_Rate);
			sb.append(",Body_Type=" + Body_Type);
			sb.append(",Real_Face=" + Real_Face);
			sb.append(",Position=" + Position);
			sb.append(",Jersey_Number=" + String.valueOf(Jersey_Number));
			sb.append(",Joined=" + Joined);
			sb.append(",Loaned_From=" + Loaned_From);
			sb.append(",Contract_Valid_Until=" + Contract_Valid_Until);
			sb.append(",Height=" + String.valueOf(Height));
			sb.append(",Weight=" + Weight);
			sb.append(",LS=" + LS);
			sb.append(",ST=" + ST);
			sb.append(",RS=" + RS);
			sb.append(",LW=" + LW);
			sb.append(",LF=" + LF);
			sb.append(",CF=" + CF);
			sb.append(",RF=" + RF);
			sb.append(",RW=" + RW);
			sb.append(",LAM=" + LAM);
			sb.append(",CAM=" + CAM);
			sb.append(",RAM=" + RAM);
			sb.append(",LM=" + LM);
			sb.append(",LCM=" + LCM);
			sb.append(",CM=" + CM);
			sb.append(",RCM=" + RCM);
			sb.append(",RM=" + RM);
			sb.append(",LWB=" + LWB);
			sb.append(",LDM=" + LDM);
			sb.append(",CDM=" + CDM);
			sb.append(",RDM=" + RDM);
			sb.append(",RWB=" + RWB);
			sb.append(",LB=" + LB);
			sb.append(",LCB=" + LCB);
			sb.append(",CB=" + CB);
			sb.append(",RCB=" + RCB);
			sb.append(",RB=" + RB);
			sb.append(",Crossing=" + Crossing);
			sb.append(",Finishing=" + String.valueOf(Finishing));
			sb.append(",HeadingAccuracy=" + String.valueOf(HeadingAccuracy));
			sb.append(",ShortPassing=" + String.valueOf(ShortPassing));
			sb.append(",Volleys=" + String.valueOf(Volleys));
			sb.append(",Dribbling=" + String.valueOf(Dribbling));
			sb.append(",Curve=" + String.valueOf(Curve));
			sb.append(",FKAccuracy=" + String.valueOf(FKAccuracy));
			sb.append(",LongPassing=" + String.valueOf(LongPassing));
			sb.append(",BallControl=" + String.valueOf(BallControl));
			sb.append(",Acceleration=" + String.valueOf(Acceleration));
			sb.append(",SprintSpeed=" + String.valueOf(SprintSpeed));
			sb.append(",Agility=" + String.valueOf(Agility));
			sb.append(",Reactions=" + String.valueOf(Reactions));
			sb.append(",Balance=" + String.valueOf(Balance));
			sb.append(",ShotPower=" + String.valueOf(ShotPower));
			sb.append(",Jumping=" + String.valueOf(Jumping));
			sb.append(",Stamina=" + String.valueOf(Stamina));
			sb.append(",Strength=" + String.valueOf(Strength));
			sb.append(",LongShots=" + String.valueOf(LongShots));
			sb.append(",Aggression=" + String.valueOf(Aggression));
			sb.append(",Interceptions=" + String.valueOf(Interceptions));
			sb.append(",Positioning=" + String.valueOf(Positioning));
			sb.append(",Vision=" + String.valueOf(Vision));
			sb.append(",Penalties=" + String.valueOf(Penalties));
			sb.append(",Composure=" + String.valueOf(Composure));
			sb.append(",Marking=" + String.valueOf(Marking));
			sb.append(",StandingTackle=" + String.valueOf(StandingTackle));
			sb.append(",SlidingTackle=" + String.valueOf(SlidingTackle));
			sb.append(",GKDiving=" + String.valueOf(GKDiving));
			sb.append(",GKHandling=" + String.valueOf(GKHandling));
			sb.append(",GKKicking=" + String.valueOf(GKKicking));
			sb.append(",GKPositioning=" + String.valueOf(GKPositioning));
			sb.append(",GKReflexes=" + String.valueOf(GKReflexes));
			sb.append(",Release_Clause=" + String.valueOf(Release_Clause));
			sb.append(",Column88=" + Column88);
			sb.append("]");

			return sb.toString();
		}

		public String toLogString() {
			StringBuilder sb = new StringBuilder();

			if (ID == null) {
				sb.append("<null>");
			} else {
				sb.append(ID);
			}

			sb.append("|");

			if (Name == null) {
				sb.append("<null>");
			} else {
				sb.append(Name);
			}

			sb.append("|");

			if (Age == null) {
				sb.append("<null>");
			} else {
				sb.append(Age);
			}

			sb.append("|");

			if (Photo == null) {
				sb.append("<null>");
			} else {
				sb.append(Photo);
			}

			sb.append("|");

			if (Nationality == null) {
				sb.append("<null>");
			} else {
				sb.append(Nationality);
			}

			sb.append("|");

			if (Flag == null) {
				sb.append("<null>");
			} else {
				sb.append(Flag);
			}

			sb.append("|");

			if (Overall == null) {
				sb.append("<null>");
			} else {
				sb.append(Overall);
			}

			sb.append("|");

			if (Potential == null) {
				sb.append("<null>");
			} else {
				sb.append(Potential);
			}

			sb.append("|");

			if (Club == null) {
				sb.append("<null>");
			} else {
				sb.append(Club);
			}

			sb.append("|");

			if (Club_Logo == null) {
				sb.append("<null>");
			} else {
				sb.append(Club_Logo);
			}

			sb.append("|");

			if (Value == null) {
				sb.append("<null>");
			} else {
				sb.append(Value);
			}

			sb.append("|");

			if (Wage == null) {
				sb.append("<null>");
			} else {
				sb.append(Wage);
			}

			sb.append("|");

			if (Special == null) {
				sb.append("<null>");
			} else {
				sb.append(Special);
			}

			sb.append("|");

			if (Preferred_Foot == null) {
				sb.append("<null>");
			} else {
				sb.append(Preferred_Foot);
			}

			sb.append("|");

			if (International_Reputation == null) {
				sb.append("<null>");
			} else {
				sb.append(International_Reputation);
			}

			sb.append("|");

			if (Weak_Foot == null) {
				sb.append("<null>");
			} else {
				sb.append(Weak_Foot);
			}

			sb.append("|");

			if (Skill_Moves == null) {
				sb.append("<null>");
			} else {
				sb.append(Skill_Moves);
			}

			sb.append("|");

			if (Work_Rate == null) {
				sb.append("<null>");
			} else {
				sb.append(Work_Rate);
			}

			sb.append("|");

			if (Body_Type == null) {
				sb.append("<null>");
			} else {
				sb.append(Body_Type);
			}

			sb.append("|");

			if (Real_Face == null) {
				sb.append("<null>");
			} else {
				sb.append(Real_Face);
			}

			sb.append("|");

			if (Position == null) {
				sb.append("<null>");
			} else {
				sb.append(Position);
			}

			sb.append("|");

			if (Jersey_Number == null) {
				sb.append("<null>");
			} else {
				sb.append(Jersey_Number);
			}

			sb.append("|");

			if (Joined == null) {
				sb.append("<null>");
			} else {
				sb.append(Joined);
			}

			sb.append("|");

			if (Loaned_From == null) {
				sb.append("<null>");
			} else {
				sb.append(Loaned_From);
			}

			sb.append("|");

			if (Contract_Valid_Until == null) {
				sb.append("<null>");
			} else {
				sb.append(Contract_Valid_Until);
			}

			sb.append("|");

			if (Height == null) {
				sb.append("<null>");
			} else {
				sb.append(Height);
			}

			sb.append("|");

			if (Weight == null) {
				sb.append("<null>");
			} else {
				sb.append(Weight);
			}

			sb.append("|");

			if (LS == null) {
				sb.append("<null>");
			} else {
				sb.append(LS);
			}

			sb.append("|");

			if (ST == null) {
				sb.append("<null>");
			} else {
				sb.append(ST);
			}

			sb.append("|");

			if (RS == null) {
				sb.append("<null>");
			} else {
				sb.append(RS);
			}

			sb.append("|");

			if (LW == null) {
				sb.append("<null>");
			} else {
				sb.append(LW);
			}

			sb.append("|");

			if (LF == null) {
				sb.append("<null>");
			} else {
				sb.append(LF);
			}

			sb.append("|");

			if (CF == null) {
				sb.append("<null>");
			} else {
				sb.append(CF);
			}

			sb.append("|");

			if (RF == null) {
				sb.append("<null>");
			} else {
				sb.append(RF);
			}

			sb.append("|");

			if (RW == null) {
				sb.append("<null>");
			} else {
				sb.append(RW);
			}

			sb.append("|");

			if (LAM == null) {
				sb.append("<null>");
			} else {
				sb.append(LAM);
			}

			sb.append("|");

			if (CAM == null) {
				sb.append("<null>");
			} else {
				sb.append(CAM);
			}

			sb.append("|");

			if (RAM == null) {
				sb.append("<null>");
			} else {
				sb.append(RAM);
			}

			sb.append("|");

			if (LM == null) {
				sb.append("<null>");
			} else {
				sb.append(LM);
			}

			sb.append("|");

			if (LCM == null) {
				sb.append("<null>");
			} else {
				sb.append(LCM);
			}

			sb.append("|");

			if (CM == null) {
				sb.append("<null>");
			} else {
				sb.append(CM);
			}

			sb.append("|");

			if (RCM == null) {
				sb.append("<null>");
			} else {
				sb.append(RCM);
			}

			sb.append("|");

			if (RM == null) {
				sb.append("<null>");
			} else {
				sb.append(RM);
			}

			sb.append("|");

			if (LWB == null) {
				sb.append("<null>");
			} else {
				sb.append(LWB);
			}

			sb.append("|");

			if (LDM == null) {
				sb.append("<null>");
			} else {
				sb.append(LDM);
			}

			sb.append("|");

			if (CDM == null) {
				sb.append("<null>");
			} else {
				sb.append(CDM);
			}

			sb.append("|");

			if (RDM == null) {
				sb.append("<null>");
			} else {
				sb.append(RDM);
			}

			sb.append("|");

			if (RWB == null) {
				sb.append("<null>");
			} else {
				sb.append(RWB);
			}

			sb.append("|");

			if (LB == null) {
				sb.append("<null>");
			} else {
				sb.append(LB);
			}

			sb.append("|");

			if (LCB == null) {
				sb.append("<null>");
			} else {
				sb.append(LCB);
			}

			sb.append("|");

			if (CB == null) {
				sb.append("<null>");
			} else {
				sb.append(CB);
			}

			sb.append("|");

			if (RCB == null) {
				sb.append("<null>");
			} else {
				sb.append(RCB);
			}

			sb.append("|");

			if (RB == null) {
				sb.append("<null>");
			} else {
				sb.append(RB);
			}

			sb.append("|");

			if (Crossing == null) {
				sb.append("<null>");
			} else {
				sb.append(Crossing);
			}

			sb.append("|");

			if (Finishing == null) {
				sb.append("<null>");
			} else {
				sb.append(Finishing);
			}

			sb.append("|");

			if (HeadingAccuracy == null) {
				sb.append("<null>");
			} else {
				sb.append(HeadingAccuracy);
			}

			sb.append("|");

			if (ShortPassing == null) {
				sb.append("<null>");
			} else {
				sb.append(ShortPassing);
			}

			sb.append("|");

			if (Volleys == null) {
				sb.append("<null>");
			} else {
				sb.append(Volleys);
			}

			sb.append("|");

			if (Dribbling == null) {
				sb.append("<null>");
			} else {
				sb.append(Dribbling);
			}

			sb.append("|");

			if (Curve == null) {
				sb.append("<null>");
			} else {
				sb.append(Curve);
			}

			sb.append("|");

			if (FKAccuracy == null) {
				sb.append("<null>");
			} else {
				sb.append(FKAccuracy);
			}

			sb.append("|");

			if (LongPassing == null) {
				sb.append("<null>");
			} else {
				sb.append(LongPassing);
			}

			sb.append("|");

			if (BallControl == null) {
				sb.append("<null>");
			} else {
				sb.append(BallControl);
			}

			sb.append("|");

			if (Acceleration == null) {
				sb.append("<null>");
			} else {
				sb.append(Acceleration);
			}

			sb.append("|");

			if (SprintSpeed == null) {
				sb.append("<null>");
			} else {
				sb.append(SprintSpeed);
			}

			sb.append("|");

			if (Agility == null) {
				sb.append("<null>");
			} else {
				sb.append(Agility);
			}

			sb.append("|");

			if (Reactions == null) {
				sb.append("<null>");
			} else {
				sb.append(Reactions);
			}

			sb.append("|");

			if (Balance == null) {
				sb.append("<null>");
			} else {
				sb.append(Balance);
			}

			sb.append("|");

			if (ShotPower == null) {
				sb.append("<null>");
			} else {
				sb.append(ShotPower);
			}

			sb.append("|");

			if (Jumping == null) {
				sb.append("<null>");
			} else {
				sb.append(Jumping);
			}

			sb.append("|");

			if (Stamina == null) {
				sb.append("<null>");
			} else {
				sb.append(Stamina);
			}

			sb.append("|");

			if (Strength == null) {
				sb.append("<null>");
			} else {
				sb.append(Strength);
			}

			sb.append("|");

			if (LongShots == null) {
				sb.append("<null>");
			} else {
				sb.append(LongShots);
			}

			sb.append("|");

			if (Aggression == null) {
				sb.append("<null>");
			} else {
				sb.append(Aggression);
			}

			sb.append("|");

			if (Interceptions == null) {
				sb.append("<null>");
			} else {
				sb.append(Interceptions);
			}

			sb.append("|");

			if (Positioning == null) {
				sb.append("<null>");
			} else {
				sb.append(Positioning);
			}

			sb.append("|");

			if (Vision == null) {
				sb.append("<null>");
			} else {
				sb.append(Vision);
			}

			sb.append("|");

			if (Penalties == null) {
				sb.append("<null>");
			} else {
				sb.append(Penalties);
			}

			sb.append("|");

			if (Composure == null) {
				sb.append("<null>");
			} else {
				sb.append(Composure);
			}

			sb.append("|");

			if (Marking == null) {
				sb.append("<null>");
			} else {
				sb.append(Marking);
			}

			sb.append("|");

			if (StandingTackle == null) {
				sb.append("<null>");
			} else {
				sb.append(StandingTackle);
			}

			sb.append("|");

			if (SlidingTackle == null) {
				sb.append("<null>");
			} else {
				sb.append(SlidingTackle);
			}

			sb.append("|");

			if (GKDiving == null) {
				sb.append("<null>");
			} else {
				sb.append(GKDiving);
			}

			sb.append("|");

			if (GKHandling == null) {
				sb.append("<null>");
			} else {
				sb.append(GKHandling);
			}

			sb.append("|");

			if (GKKicking == null) {
				sb.append("<null>");
			} else {
				sb.append(GKKicking);
			}

			sb.append("|");

			if (GKPositioning == null) {
				sb.append("<null>");
			} else {
				sb.append(GKPositioning);
			}

			sb.append("|");

			if (GKReflexes == null) {
				sb.append("<null>");
			} else {
				sb.append(GKReflexes);
			}

			sb.append("|");

			if (Release_Clause == null) {
				sb.append("<null>");
			} else {
				sb.append(Release_Clause);
			}

			sb.append("|");

			if (Column88 == null) {
				sb.append("<null>");
			} else {
				sb.append(Column88);
			}

			sb.append("|");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID, other.ID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_DEMO_CSVReadNFilter = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer ID;

		public Integer getID() {
			return this.ID;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public Integer Age;

		public Integer getAge() {
			return this.Age;
		}

		public String Photo;

		public String getPhoto() {
			return this.Photo;
		}

		public String Nationality;

		public String getNationality() {
			return this.Nationality;
		}

		public String Flag;

		public String getFlag() {
			return this.Flag;
		}

		public Integer Overall;

		public Integer getOverall() {
			return this.Overall;
		}

		public Integer Potential;

		public Integer getPotential() {
			return this.Potential;
		}

		public String Club;

		public String getClub() {
			return this.Club;
		}

		public String Club_Logo;

		public String getClub_Logo() {
			return this.Club_Logo;
		}

		public String Value;

		public String getValue() {
			return this.Value;
		}

		public String Wage;

		public String getWage() {
			return this.Wage;
		}

		public Integer Special;

		public Integer getSpecial() {
			return this.Special;
		}

		public String Preferred_Foot;

		public String getPreferred_Foot() {
			return this.Preferred_Foot;
		}

		public Integer International_Reputation;

		public Integer getInternational_Reputation() {
			return this.International_Reputation;
		}

		public Integer Weak_Foot;

		public Integer getWeak_Foot() {
			return this.Weak_Foot;
		}

		public Integer Skill_Moves;

		public Integer getSkill_Moves() {
			return this.Skill_Moves;
		}

		public String Work_Rate;

		public String getWork_Rate() {
			return this.Work_Rate;
		}

		public String Body_Type;

		public String getBody_Type() {
			return this.Body_Type;
		}

		public String Real_Face;

		public String getReal_Face() {
			return this.Real_Face;
		}

		public String Position;

		public String getPosition() {
			return this.Position;
		}

		public Integer Jersey_Number;

		public Integer getJersey_Number() {
			return this.Jersey_Number;
		}

		public String Joined;

		public String getJoined() {
			return this.Joined;
		}

		public String Loaned_From;

		public String getLoaned_From() {
			return this.Loaned_From;
		}

		public String Contract_Valid_Until;

		public String getContract_Valid_Until() {
			return this.Contract_Valid_Until;
		}

		public Integer Height;

		public Integer getHeight() {
			return this.Height;
		}

		public String Weight;

		public String getWeight() {
			return this.Weight;
		}

		public String LS;

		public String getLS() {
			return this.LS;
		}

		public String ST;

		public String getST() {
			return this.ST;
		}

		public String RS;

		public String getRS() {
			return this.RS;
		}

		public String LW;

		public String getLW() {
			return this.LW;
		}

		public String LF;

		public String getLF() {
			return this.LF;
		}

		public String CF;

		public String getCF() {
			return this.CF;
		}

		public String RF;

		public String getRF() {
			return this.RF;
		}

		public String RW;

		public String getRW() {
			return this.RW;
		}

		public String LAM;

		public String getLAM() {
			return this.LAM;
		}

		public String CAM;

		public String getCAM() {
			return this.CAM;
		}

		public String RAM;

		public String getRAM() {
			return this.RAM;
		}

		public String LM;

		public String getLM() {
			return this.LM;
		}

		public String LCM;

		public String getLCM() {
			return this.LCM;
		}

		public String CM;

		public String getCM() {
			return this.CM;
		}

		public String RCM;

		public String getRCM() {
			return this.RCM;
		}

		public String RM;

		public String getRM() {
			return this.RM;
		}

		public String LWB;

		public String getLWB() {
			return this.LWB;
		}

		public String LDM;

		public String getLDM() {
			return this.LDM;
		}

		public String CDM;

		public String getCDM() {
			return this.CDM;
		}

		public String RDM;

		public String getRDM() {
			return this.RDM;
		}

		public String RWB;

		public String getRWB() {
			return this.RWB;
		}

		public String LB;

		public String getLB() {
			return this.LB;
		}

		public String LCB;

		public String getLCB() {
			return this.LCB;
		}

		public String CB;

		public String getCB() {
			return this.CB;
		}

		public String RCB;

		public String getRCB() {
			return this.RCB;
		}

		public String RB;

		public String getRB() {
			return this.RB;
		}

		public String Crossing;

		public String getCrossing() {
			return this.Crossing;
		}

		public Integer Finishing;

		public Integer getFinishing() {
			return this.Finishing;
		}

		public Integer HeadingAccuracy;

		public Integer getHeadingAccuracy() {
			return this.HeadingAccuracy;
		}

		public Integer ShortPassing;

		public Integer getShortPassing() {
			return this.ShortPassing;
		}

		public Integer Volleys;

		public Integer getVolleys() {
			return this.Volleys;
		}

		public Integer Dribbling;

		public Integer getDribbling() {
			return this.Dribbling;
		}

		public Integer Curve;

		public Integer getCurve() {
			return this.Curve;
		}

		public Integer FKAccuracy;

		public Integer getFKAccuracy() {
			return this.FKAccuracy;
		}

		public Integer LongPassing;

		public Integer getLongPassing() {
			return this.LongPassing;
		}

		public Integer BallControl;

		public Integer getBallControl() {
			return this.BallControl;
		}

		public Integer Acceleration;

		public Integer getAcceleration() {
			return this.Acceleration;
		}

		public Integer SprintSpeed;

		public Integer getSprintSpeed() {
			return this.SprintSpeed;
		}

		public Integer Agility;

		public Integer getAgility() {
			return this.Agility;
		}

		public Integer Reactions;

		public Integer getReactions() {
			return this.Reactions;
		}

		public Integer Balance;

		public Integer getBalance() {
			return this.Balance;
		}

		public Integer ShotPower;

		public Integer getShotPower() {
			return this.ShotPower;
		}

		public Integer Jumping;

		public Integer getJumping() {
			return this.Jumping;
		}

		public Integer Stamina;

		public Integer getStamina() {
			return this.Stamina;
		}

		public Integer Strength;

		public Integer getStrength() {
			return this.Strength;
		}

		public Integer LongShots;

		public Integer getLongShots() {
			return this.LongShots;
		}

		public Integer Aggression;

		public Integer getAggression() {
			return this.Aggression;
		}

		public Integer Interceptions;

		public Integer getInterceptions() {
			return this.Interceptions;
		}

		public Integer Positioning;

		public Integer getPositioning() {
			return this.Positioning;
		}

		public Integer Vision;

		public Integer getVision() {
			return this.Vision;
		}

		public Integer Penalties;

		public Integer getPenalties() {
			return this.Penalties;
		}

		public Integer Composure;

		public Integer getComposure() {
			return this.Composure;
		}

		public Integer Marking;

		public Integer getMarking() {
			return this.Marking;
		}

		public Integer StandingTackle;

		public Integer getStandingTackle() {
			return this.StandingTackle;
		}

		public Integer SlidingTackle;

		public Integer getSlidingTackle() {
			return this.SlidingTackle;
		}

		public Integer GKDiving;

		public Integer getGKDiving() {
			return this.GKDiving;
		}

		public Integer GKHandling;

		public Integer getGKHandling() {
			return this.GKHandling;
		}

		public Integer GKKicking;

		public Integer getGKKicking() {
			return this.GKKicking;
		}

		public Integer GKPositioning;

		public Integer getGKPositioning() {
			return this.GKPositioning;
		}

		public Integer GKReflexes;

		public Integer getGKReflexes() {
			return this.GKReflexes;
		}

		public Integer Release_Clause;

		public Integer getRelease_Clause() {
			return this.Release_Clause;
		}

		public String Column88;

		public String getColumn88() {
			return this.Column88;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row1Struct other = (row1Struct) obj;

			if (this.ID == null) {
				if (other.ID != null)
					return false;

			} else if (!this.ID.equals(other.ID))

				return false;

			return true;
		}

		public void copyDataTo(row1Struct other) {

			other.ID = this.ID;
			other.Name = this.Name;
			other.Age = this.Age;
			other.Photo = this.Photo;
			other.Nationality = this.Nationality;
			other.Flag = this.Flag;
			other.Overall = this.Overall;
			other.Potential = this.Potential;
			other.Club = this.Club;
			other.Club_Logo = this.Club_Logo;
			other.Value = this.Value;
			other.Wage = this.Wage;
			other.Special = this.Special;
			other.Preferred_Foot = this.Preferred_Foot;
			other.International_Reputation = this.International_Reputation;
			other.Weak_Foot = this.Weak_Foot;
			other.Skill_Moves = this.Skill_Moves;
			other.Work_Rate = this.Work_Rate;
			other.Body_Type = this.Body_Type;
			other.Real_Face = this.Real_Face;
			other.Position = this.Position;
			other.Jersey_Number = this.Jersey_Number;
			other.Joined = this.Joined;
			other.Loaned_From = this.Loaned_From;
			other.Contract_Valid_Until = this.Contract_Valid_Until;
			other.Height = this.Height;
			other.Weight = this.Weight;
			other.LS = this.LS;
			other.ST = this.ST;
			other.RS = this.RS;
			other.LW = this.LW;
			other.LF = this.LF;
			other.CF = this.CF;
			other.RF = this.RF;
			other.RW = this.RW;
			other.LAM = this.LAM;
			other.CAM = this.CAM;
			other.RAM = this.RAM;
			other.LM = this.LM;
			other.LCM = this.LCM;
			other.CM = this.CM;
			other.RCM = this.RCM;
			other.RM = this.RM;
			other.LWB = this.LWB;
			other.LDM = this.LDM;
			other.CDM = this.CDM;
			other.RDM = this.RDM;
			other.RWB = this.RWB;
			other.LB = this.LB;
			other.LCB = this.LCB;
			other.CB = this.CB;
			other.RCB = this.RCB;
			other.RB = this.RB;
			other.Crossing = this.Crossing;
			other.Finishing = this.Finishing;
			other.HeadingAccuracy = this.HeadingAccuracy;
			other.ShortPassing = this.ShortPassing;
			other.Volleys = this.Volleys;
			other.Dribbling = this.Dribbling;
			other.Curve = this.Curve;
			other.FKAccuracy = this.FKAccuracy;
			other.LongPassing = this.LongPassing;
			other.BallControl = this.BallControl;
			other.Acceleration = this.Acceleration;
			other.SprintSpeed = this.SprintSpeed;
			other.Agility = this.Agility;
			other.Reactions = this.Reactions;
			other.Balance = this.Balance;
			other.ShotPower = this.ShotPower;
			other.Jumping = this.Jumping;
			other.Stamina = this.Stamina;
			other.Strength = this.Strength;
			other.LongShots = this.LongShots;
			other.Aggression = this.Aggression;
			other.Interceptions = this.Interceptions;
			other.Positioning = this.Positioning;
			other.Vision = this.Vision;
			other.Penalties = this.Penalties;
			other.Composure = this.Composure;
			other.Marking = this.Marking;
			other.StandingTackle = this.StandingTackle;
			other.SlidingTackle = this.SlidingTackle;
			other.GKDiving = this.GKDiving;
			other.GKHandling = this.GKHandling;
			other.GKKicking = this.GKKicking;
			other.GKPositioning = this.GKPositioning;
			other.GKReflexes = this.GKReflexes;
			other.Release_Clause = this.Release_Clause;
			other.Column88 = this.Column88;

		}

		public void copyKeysDataTo(row1Struct other) {

			other.ID = this.ID;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter.length == 0) {
						commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter.length == 0) {
						commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_DEMO_CSVReadNFilter, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_DEMO_CSVReadNFilter) {

				try {

					int length = 0;

					this.ID = readInteger(dis);

					this.Name = readString(dis);

					this.Age = readInteger(dis);

					this.Photo = readString(dis);

					this.Nationality = readString(dis);

					this.Flag = readString(dis);

					this.Overall = readInteger(dis);

					this.Potential = readInteger(dis);

					this.Club = readString(dis);

					this.Club_Logo = readString(dis);

					this.Value = readString(dis);

					this.Wage = readString(dis);

					this.Special = readInteger(dis);

					this.Preferred_Foot = readString(dis);

					this.International_Reputation = readInteger(dis);

					this.Weak_Foot = readInteger(dis);

					this.Skill_Moves = readInteger(dis);

					this.Work_Rate = readString(dis);

					this.Body_Type = readString(dis);

					this.Real_Face = readString(dis);

					this.Position = readString(dis);

					this.Jersey_Number = readInteger(dis);

					this.Joined = readString(dis);

					this.Loaned_From = readString(dis);

					this.Contract_Valid_Until = readString(dis);

					this.Height = readInteger(dis);

					this.Weight = readString(dis);

					this.LS = readString(dis);

					this.ST = readString(dis);

					this.RS = readString(dis);

					this.LW = readString(dis);

					this.LF = readString(dis);

					this.CF = readString(dis);

					this.RF = readString(dis);

					this.RW = readString(dis);

					this.LAM = readString(dis);

					this.CAM = readString(dis);

					this.RAM = readString(dis);

					this.LM = readString(dis);

					this.LCM = readString(dis);

					this.CM = readString(dis);

					this.RCM = readString(dis);

					this.RM = readString(dis);

					this.LWB = readString(dis);

					this.LDM = readString(dis);

					this.CDM = readString(dis);

					this.RDM = readString(dis);

					this.RWB = readString(dis);

					this.LB = readString(dis);

					this.LCB = readString(dis);

					this.CB = readString(dis);

					this.RCB = readString(dis);

					this.RB = readString(dis);

					this.Crossing = readString(dis);

					this.Finishing = readInteger(dis);

					this.HeadingAccuracy = readInteger(dis);

					this.ShortPassing = readInteger(dis);

					this.Volleys = readInteger(dis);

					this.Dribbling = readInteger(dis);

					this.Curve = readInteger(dis);

					this.FKAccuracy = readInteger(dis);

					this.LongPassing = readInteger(dis);

					this.BallControl = readInteger(dis);

					this.Acceleration = readInteger(dis);

					this.SprintSpeed = readInteger(dis);

					this.Agility = readInteger(dis);

					this.Reactions = readInteger(dis);

					this.Balance = readInteger(dis);

					this.ShotPower = readInteger(dis);

					this.Jumping = readInteger(dis);

					this.Stamina = readInteger(dis);

					this.Strength = readInteger(dis);

					this.LongShots = readInteger(dis);

					this.Aggression = readInteger(dis);

					this.Interceptions = readInteger(dis);

					this.Positioning = readInteger(dis);

					this.Vision = readInteger(dis);

					this.Penalties = readInteger(dis);

					this.Composure = readInteger(dis);

					this.Marking = readInteger(dis);

					this.StandingTackle = readInteger(dis);

					this.SlidingTackle = readInteger(dis);

					this.GKDiving = readInteger(dis);

					this.GKHandling = readInteger(dis);

					this.GKKicking = readInteger(dis);

					this.GKPositioning = readInteger(dis);

					this.GKReflexes = readInteger(dis);

					this.Release_Clause = readInteger(dis);

					this.Column88 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_DEMO_CSVReadNFilter) {

				try {

					int length = 0;

					this.ID = readInteger(dis);

					this.Name = readString(dis);

					this.Age = readInteger(dis);

					this.Photo = readString(dis);

					this.Nationality = readString(dis);

					this.Flag = readString(dis);

					this.Overall = readInteger(dis);

					this.Potential = readInteger(dis);

					this.Club = readString(dis);

					this.Club_Logo = readString(dis);

					this.Value = readString(dis);

					this.Wage = readString(dis);

					this.Special = readInteger(dis);

					this.Preferred_Foot = readString(dis);

					this.International_Reputation = readInteger(dis);

					this.Weak_Foot = readInteger(dis);

					this.Skill_Moves = readInteger(dis);

					this.Work_Rate = readString(dis);

					this.Body_Type = readString(dis);

					this.Real_Face = readString(dis);

					this.Position = readString(dis);

					this.Jersey_Number = readInteger(dis);

					this.Joined = readString(dis);

					this.Loaned_From = readString(dis);

					this.Contract_Valid_Until = readString(dis);

					this.Height = readInteger(dis);

					this.Weight = readString(dis);

					this.LS = readString(dis);

					this.ST = readString(dis);

					this.RS = readString(dis);

					this.LW = readString(dis);

					this.LF = readString(dis);

					this.CF = readString(dis);

					this.RF = readString(dis);

					this.RW = readString(dis);

					this.LAM = readString(dis);

					this.CAM = readString(dis);

					this.RAM = readString(dis);

					this.LM = readString(dis);

					this.LCM = readString(dis);

					this.CM = readString(dis);

					this.RCM = readString(dis);

					this.RM = readString(dis);

					this.LWB = readString(dis);

					this.LDM = readString(dis);

					this.CDM = readString(dis);

					this.RDM = readString(dis);

					this.RWB = readString(dis);

					this.LB = readString(dis);

					this.LCB = readString(dis);

					this.CB = readString(dis);

					this.RCB = readString(dis);

					this.RB = readString(dis);

					this.Crossing = readString(dis);

					this.Finishing = readInteger(dis);

					this.HeadingAccuracy = readInteger(dis);

					this.ShortPassing = readInteger(dis);

					this.Volleys = readInteger(dis);

					this.Dribbling = readInteger(dis);

					this.Curve = readInteger(dis);

					this.FKAccuracy = readInteger(dis);

					this.LongPassing = readInteger(dis);

					this.BallControl = readInteger(dis);

					this.Acceleration = readInteger(dis);

					this.SprintSpeed = readInteger(dis);

					this.Agility = readInteger(dis);

					this.Reactions = readInteger(dis);

					this.Balance = readInteger(dis);

					this.ShotPower = readInteger(dis);

					this.Jumping = readInteger(dis);

					this.Stamina = readInteger(dis);

					this.Strength = readInteger(dis);

					this.LongShots = readInteger(dis);

					this.Aggression = readInteger(dis);

					this.Interceptions = readInteger(dis);

					this.Positioning = readInteger(dis);

					this.Vision = readInteger(dis);

					this.Penalties = readInteger(dis);

					this.Composure = readInteger(dis);

					this.Marking = readInteger(dis);

					this.StandingTackle = readInteger(dis);

					this.SlidingTackle = readInteger(dis);

					this.GKDiving = readInteger(dis);

					this.GKHandling = readInteger(dis);

					this.GKKicking = readInteger(dis);

					this.GKPositioning = readInteger(dis);

					this.GKReflexes = readInteger(dis);

					this.Release_Clause = readInteger(dis);

					this.Column88 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.ID, dos);

				// String

				writeString(this.Name, dos);

				// Integer

				writeInteger(this.Age, dos);

				// String

				writeString(this.Photo, dos);

				// String

				writeString(this.Nationality, dos);

				// String

				writeString(this.Flag, dos);

				// Integer

				writeInteger(this.Overall, dos);

				// Integer

				writeInteger(this.Potential, dos);

				// String

				writeString(this.Club, dos);

				// String

				writeString(this.Club_Logo, dos);

				// String

				writeString(this.Value, dos);

				// String

				writeString(this.Wage, dos);

				// Integer

				writeInteger(this.Special, dos);

				// String

				writeString(this.Preferred_Foot, dos);

				// Integer

				writeInteger(this.International_Reputation, dos);

				// Integer

				writeInteger(this.Weak_Foot, dos);

				// Integer

				writeInteger(this.Skill_Moves, dos);

				// String

				writeString(this.Work_Rate, dos);

				// String

				writeString(this.Body_Type, dos);

				// String

				writeString(this.Real_Face, dos);

				// String

				writeString(this.Position, dos);

				// Integer

				writeInteger(this.Jersey_Number, dos);

				// String

				writeString(this.Joined, dos);

				// String

				writeString(this.Loaned_From, dos);

				// String

				writeString(this.Contract_Valid_Until, dos);

				// Integer

				writeInteger(this.Height, dos);

				// String

				writeString(this.Weight, dos);

				// String

				writeString(this.LS, dos);

				// String

				writeString(this.ST, dos);

				// String

				writeString(this.RS, dos);

				// String

				writeString(this.LW, dos);

				// String

				writeString(this.LF, dos);

				// String

				writeString(this.CF, dos);

				// String

				writeString(this.RF, dos);

				// String

				writeString(this.RW, dos);

				// String

				writeString(this.LAM, dos);

				// String

				writeString(this.CAM, dos);

				// String

				writeString(this.RAM, dos);

				// String

				writeString(this.LM, dos);

				// String

				writeString(this.LCM, dos);

				// String

				writeString(this.CM, dos);

				// String

				writeString(this.RCM, dos);

				// String

				writeString(this.RM, dos);

				// String

				writeString(this.LWB, dos);

				// String

				writeString(this.LDM, dos);

				// String

				writeString(this.CDM, dos);

				// String

				writeString(this.RDM, dos);

				// String

				writeString(this.RWB, dos);

				// String

				writeString(this.LB, dos);

				// String

				writeString(this.LCB, dos);

				// String

				writeString(this.CB, dos);

				// String

				writeString(this.RCB, dos);

				// String

				writeString(this.RB, dos);

				// String

				writeString(this.Crossing, dos);

				// Integer

				writeInteger(this.Finishing, dos);

				// Integer

				writeInteger(this.HeadingAccuracy, dos);

				// Integer

				writeInteger(this.ShortPassing, dos);

				// Integer

				writeInteger(this.Volleys, dos);

				// Integer

				writeInteger(this.Dribbling, dos);

				// Integer

				writeInteger(this.Curve, dos);

				// Integer

				writeInteger(this.FKAccuracy, dos);

				// Integer

				writeInteger(this.LongPassing, dos);

				// Integer

				writeInteger(this.BallControl, dos);

				// Integer

				writeInteger(this.Acceleration, dos);

				// Integer

				writeInteger(this.SprintSpeed, dos);

				// Integer

				writeInteger(this.Agility, dos);

				// Integer

				writeInteger(this.Reactions, dos);

				// Integer

				writeInteger(this.Balance, dos);

				// Integer

				writeInteger(this.ShotPower, dos);

				// Integer

				writeInteger(this.Jumping, dos);

				// Integer

				writeInteger(this.Stamina, dos);

				// Integer

				writeInteger(this.Strength, dos);

				// Integer

				writeInteger(this.LongShots, dos);

				// Integer

				writeInteger(this.Aggression, dos);

				// Integer

				writeInteger(this.Interceptions, dos);

				// Integer

				writeInteger(this.Positioning, dos);

				// Integer

				writeInteger(this.Vision, dos);

				// Integer

				writeInteger(this.Penalties, dos);

				// Integer

				writeInteger(this.Composure, dos);

				// Integer

				writeInteger(this.Marking, dos);

				// Integer

				writeInteger(this.StandingTackle, dos);

				// Integer

				writeInteger(this.SlidingTackle, dos);

				// Integer

				writeInteger(this.GKDiving, dos);

				// Integer

				writeInteger(this.GKHandling, dos);

				// Integer

				writeInteger(this.GKKicking, dos);

				// Integer

				writeInteger(this.GKPositioning, dos);

				// Integer

				writeInteger(this.GKReflexes, dos);

				// Integer

				writeInteger(this.Release_Clause, dos);

				// String

				writeString(this.Column88, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.ID, dos);

				// String

				writeString(this.Name, dos);

				// Integer

				writeInteger(this.Age, dos);

				// String

				writeString(this.Photo, dos);

				// String

				writeString(this.Nationality, dos);

				// String

				writeString(this.Flag, dos);

				// Integer

				writeInteger(this.Overall, dos);

				// Integer

				writeInteger(this.Potential, dos);

				// String

				writeString(this.Club, dos);

				// String

				writeString(this.Club_Logo, dos);

				// String

				writeString(this.Value, dos);

				// String

				writeString(this.Wage, dos);

				// Integer

				writeInteger(this.Special, dos);

				// String

				writeString(this.Preferred_Foot, dos);

				// Integer

				writeInteger(this.International_Reputation, dos);

				// Integer

				writeInteger(this.Weak_Foot, dos);

				// Integer

				writeInteger(this.Skill_Moves, dos);

				// String

				writeString(this.Work_Rate, dos);

				// String

				writeString(this.Body_Type, dos);

				// String

				writeString(this.Real_Face, dos);

				// String

				writeString(this.Position, dos);

				// Integer

				writeInteger(this.Jersey_Number, dos);

				// String

				writeString(this.Joined, dos);

				// String

				writeString(this.Loaned_From, dos);

				// String

				writeString(this.Contract_Valid_Until, dos);

				// Integer

				writeInteger(this.Height, dos);

				// String

				writeString(this.Weight, dos);

				// String

				writeString(this.LS, dos);

				// String

				writeString(this.ST, dos);

				// String

				writeString(this.RS, dos);

				// String

				writeString(this.LW, dos);

				// String

				writeString(this.LF, dos);

				// String

				writeString(this.CF, dos);

				// String

				writeString(this.RF, dos);

				// String

				writeString(this.RW, dos);

				// String

				writeString(this.LAM, dos);

				// String

				writeString(this.CAM, dos);

				// String

				writeString(this.RAM, dos);

				// String

				writeString(this.LM, dos);

				// String

				writeString(this.LCM, dos);

				// String

				writeString(this.CM, dos);

				// String

				writeString(this.RCM, dos);

				// String

				writeString(this.RM, dos);

				// String

				writeString(this.LWB, dos);

				// String

				writeString(this.LDM, dos);

				// String

				writeString(this.CDM, dos);

				// String

				writeString(this.RDM, dos);

				// String

				writeString(this.RWB, dos);

				// String

				writeString(this.LB, dos);

				// String

				writeString(this.LCB, dos);

				// String

				writeString(this.CB, dos);

				// String

				writeString(this.RCB, dos);

				// String

				writeString(this.RB, dos);

				// String

				writeString(this.Crossing, dos);

				// Integer

				writeInteger(this.Finishing, dos);

				// Integer

				writeInteger(this.HeadingAccuracy, dos);

				// Integer

				writeInteger(this.ShortPassing, dos);

				// Integer

				writeInteger(this.Volleys, dos);

				// Integer

				writeInteger(this.Dribbling, dos);

				// Integer

				writeInteger(this.Curve, dos);

				// Integer

				writeInteger(this.FKAccuracy, dos);

				// Integer

				writeInteger(this.LongPassing, dos);

				// Integer

				writeInteger(this.BallControl, dos);

				// Integer

				writeInteger(this.Acceleration, dos);

				// Integer

				writeInteger(this.SprintSpeed, dos);

				// Integer

				writeInteger(this.Agility, dos);

				// Integer

				writeInteger(this.Reactions, dos);

				// Integer

				writeInteger(this.Balance, dos);

				// Integer

				writeInteger(this.ShotPower, dos);

				// Integer

				writeInteger(this.Jumping, dos);

				// Integer

				writeInteger(this.Stamina, dos);

				// Integer

				writeInteger(this.Strength, dos);

				// Integer

				writeInteger(this.LongShots, dos);

				// Integer

				writeInteger(this.Aggression, dos);

				// Integer

				writeInteger(this.Interceptions, dos);

				// Integer

				writeInteger(this.Positioning, dos);

				// Integer

				writeInteger(this.Vision, dos);

				// Integer

				writeInteger(this.Penalties, dos);

				// Integer

				writeInteger(this.Composure, dos);

				// Integer

				writeInteger(this.Marking, dos);

				// Integer

				writeInteger(this.StandingTackle, dos);

				// Integer

				writeInteger(this.SlidingTackle, dos);

				// Integer

				writeInteger(this.GKDiving, dos);

				// Integer

				writeInteger(this.GKHandling, dos);

				// Integer

				writeInteger(this.GKKicking, dos);

				// Integer

				writeInteger(this.GKPositioning, dos);

				// Integer

				writeInteger(this.GKReflexes, dos);

				// Integer

				writeInteger(this.Release_Clause, dos);

				// String

				writeString(this.Column88, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID=" + String.valueOf(ID));
			sb.append(",Name=" + Name);
			sb.append(",Age=" + String.valueOf(Age));
			sb.append(",Photo=" + Photo);
			sb.append(",Nationality=" + Nationality);
			sb.append(",Flag=" + Flag);
			sb.append(",Overall=" + String.valueOf(Overall));
			sb.append(",Potential=" + String.valueOf(Potential));
			sb.append(",Club=" + Club);
			sb.append(",Club_Logo=" + Club_Logo);
			sb.append(",Value=" + Value);
			sb.append(",Wage=" + Wage);
			sb.append(",Special=" + String.valueOf(Special));
			sb.append(",Preferred_Foot=" + Preferred_Foot);
			sb.append(",International_Reputation=" + String.valueOf(International_Reputation));
			sb.append(",Weak_Foot=" + String.valueOf(Weak_Foot));
			sb.append(",Skill_Moves=" + String.valueOf(Skill_Moves));
			sb.append(",Work_Rate=" + Work_Rate);
			sb.append(",Body_Type=" + Body_Type);
			sb.append(",Real_Face=" + Real_Face);
			sb.append(",Position=" + Position);
			sb.append(",Jersey_Number=" + String.valueOf(Jersey_Number));
			sb.append(",Joined=" + Joined);
			sb.append(",Loaned_From=" + Loaned_From);
			sb.append(",Contract_Valid_Until=" + Contract_Valid_Until);
			sb.append(",Height=" + String.valueOf(Height));
			sb.append(",Weight=" + Weight);
			sb.append(",LS=" + LS);
			sb.append(",ST=" + ST);
			sb.append(",RS=" + RS);
			sb.append(",LW=" + LW);
			sb.append(",LF=" + LF);
			sb.append(",CF=" + CF);
			sb.append(",RF=" + RF);
			sb.append(",RW=" + RW);
			sb.append(",LAM=" + LAM);
			sb.append(",CAM=" + CAM);
			sb.append(",RAM=" + RAM);
			sb.append(",LM=" + LM);
			sb.append(",LCM=" + LCM);
			sb.append(",CM=" + CM);
			sb.append(",RCM=" + RCM);
			sb.append(",RM=" + RM);
			sb.append(",LWB=" + LWB);
			sb.append(",LDM=" + LDM);
			sb.append(",CDM=" + CDM);
			sb.append(",RDM=" + RDM);
			sb.append(",RWB=" + RWB);
			sb.append(",LB=" + LB);
			sb.append(",LCB=" + LCB);
			sb.append(",CB=" + CB);
			sb.append(",RCB=" + RCB);
			sb.append(",RB=" + RB);
			sb.append(",Crossing=" + Crossing);
			sb.append(",Finishing=" + String.valueOf(Finishing));
			sb.append(",HeadingAccuracy=" + String.valueOf(HeadingAccuracy));
			sb.append(",ShortPassing=" + String.valueOf(ShortPassing));
			sb.append(",Volleys=" + String.valueOf(Volleys));
			sb.append(",Dribbling=" + String.valueOf(Dribbling));
			sb.append(",Curve=" + String.valueOf(Curve));
			sb.append(",FKAccuracy=" + String.valueOf(FKAccuracy));
			sb.append(",LongPassing=" + String.valueOf(LongPassing));
			sb.append(",BallControl=" + String.valueOf(BallControl));
			sb.append(",Acceleration=" + String.valueOf(Acceleration));
			sb.append(",SprintSpeed=" + String.valueOf(SprintSpeed));
			sb.append(",Agility=" + String.valueOf(Agility));
			sb.append(",Reactions=" + String.valueOf(Reactions));
			sb.append(",Balance=" + String.valueOf(Balance));
			sb.append(",ShotPower=" + String.valueOf(ShotPower));
			sb.append(",Jumping=" + String.valueOf(Jumping));
			sb.append(",Stamina=" + String.valueOf(Stamina));
			sb.append(",Strength=" + String.valueOf(Strength));
			sb.append(",LongShots=" + String.valueOf(LongShots));
			sb.append(",Aggression=" + String.valueOf(Aggression));
			sb.append(",Interceptions=" + String.valueOf(Interceptions));
			sb.append(",Positioning=" + String.valueOf(Positioning));
			sb.append(",Vision=" + String.valueOf(Vision));
			sb.append(",Penalties=" + String.valueOf(Penalties));
			sb.append(",Composure=" + String.valueOf(Composure));
			sb.append(",Marking=" + String.valueOf(Marking));
			sb.append(",StandingTackle=" + String.valueOf(StandingTackle));
			sb.append(",SlidingTackle=" + String.valueOf(SlidingTackle));
			sb.append(",GKDiving=" + String.valueOf(GKDiving));
			sb.append(",GKHandling=" + String.valueOf(GKHandling));
			sb.append(",GKKicking=" + String.valueOf(GKKicking));
			sb.append(",GKPositioning=" + String.valueOf(GKPositioning));
			sb.append(",GKReflexes=" + String.valueOf(GKReflexes));
			sb.append(",Release_Clause=" + String.valueOf(Release_Clause));
			sb.append(",Column88=" + Column88);
			sb.append("]");

			return sb.toString();
		}

		public String toLogString() {
			StringBuilder sb = new StringBuilder();

			if (ID == null) {
				sb.append("<null>");
			} else {
				sb.append(ID);
			}

			sb.append("|");

			if (Name == null) {
				sb.append("<null>");
			} else {
				sb.append(Name);
			}

			sb.append("|");

			if (Age == null) {
				sb.append("<null>");
			} else {
				sb.append(Age);
			}

			sb.append("|");

			if (Photo == null) {
				sb.append("<null>");
			} else {
				sb.append(Photo);
			}

			sb.append("|");

			if (Nationality == null) {
				sb.append("<null>");
			} else {
				sb.append(Nationality);
			}

			sb.append("|");

			if (Flag == null) {
				sb.append("<null>");
			} else {
				sb.append(Flag);
			}

			sb.append("|");

			if (Overall == null) {
				sb.append("<null>");
			} else {
				sb.append(Overall);
			}

			sb.append("|");

			if (Potential == null) {
				sb.append("<null>");
			} else {
				sb.append(Potential);
			}

			sb.append("|");

			if (Club == null) {
				sb.append("<null>");
			} else {
				sb.append(Club);
			}

			sb.append("|");

			if (Club_Logo == null) {
				sb.append("<null>");
			} else {
				sb.append(Club_Logo);
			}

			sb.append("|");

			if (Value == null) {
				sb.append("<null>");
			} else {
				sb.append(Value);
			}

			sb.append("|");

			if (Wage == null) {
				sb.append("<null>");
			} else {
				sb.append(Wage);
			}

			sb.append("|");

			if (Special == null) {
				sb.append("<null>");
			} else {
				sb.append(Special);
			}

			sb.append("|");

			if (Preferred_Foot == null) {
				sb.append("<null>");
			} else {
				sb.append(Preferred_Foot);
			}

			sb.append("|");

			if (International_Reputation == null) {
				sb.append("<null>");
			} else {
				sb.append(International_Reputation);
			}

			sb.append("|");

			if (Weak_Foot == null) {
				sb.append("<null>");
			} else {
				sb.append(Weak_Foot);
			}

			sb.append("|");

			if (Skill_Moves == null) {
				sb.append("<null>");
			} else {
				sb.append(Skill_Moves);
			}

			sb.append("|");

			if (Work_Rate == null) {
				sb.append("<null>");
			} else {
				sb.append(Work_Rate);
			}

			sb.append("|");

			if (Body_Type == null) {
				sb.append("<null>");
			} else {
				sb.append(Body_Type);
			}

			sb.append("|");

			if (Real_Face == null) {
				sb.append("<null>");
			} else {
				sb.append(Real_Face);
			}

			sb.append("|");

			if (Position == null) {
				sb.append("<null>");
			} else {
				sb.append(Position);
			}

			sb.append("|");

			if (Jersey_Number == null) {
				sb.append("<null>");
			} else {
				sb.append(Jersey_Number);
			}

			sb.append("|");

			if (Joined == null) {
				sb.append("<null>");
			} else {
				sb.append(Joined);
			}

			sb.append("|");

			if (Loaned_From == null) {
				sb.append("<null>");
			} else {
				sb.append(Loaned_From);
			}

			sb.append("|");

			if (Contract_Valid_Until == null) {
				sb.append("<null>");
			} else {
				sb.append(Contract_Valid_Until);
			}

			sb.append("|");

			if (Height == null) {
				sb.append("<null>");
			} else {
				sb.append(Height);
			}

			sb.append("|");

			if (Weight == null) {
				sb.append("<null>");
			} else {
				sb.append(Weight);
			}

			sb.append("|");

			if (LS == null) {
				sb.append("<null>");
			} else {
				sb.append(LS);
			}

			sb.append("|");

			if (ST == null) {
				sb.append("<null>");
			} else {
				sb.append(ST);
			}

			sb.append("|");

			if (RS == null) {
				sb.append("<null>");
			} else {
				sb.append(RS);
			}

			sb.append("|");

			if (LW == null) {
				sb.append("<null>");
			} else {
				sb.append(LW);
			}

			sb.append("|");

			if (LF == null) {
				sb.append("<null>");
			} else {
				sb.append(LF);
			}

			sb.append("|");

			if (CF == null) {
				sb.append("<null>");
			} else {
				sb.append(CF);
			}

			sb.append("|");

			if (RF == null) {
				sb.append("<null>");
			} else {
				sb.append(RF);
			}

			sb.append("|");

			if (RW == null) {
				sb.append("<null>");
			} else {
				sb.append(RW);
			}

			sb.append("|");

			if (LAM == null) {
				sb.append("<null>");
			} else {
				sb.append(LAM);
			}

			sb.append("|");

			if (CAM == null) {
				sb.append("<null>");
			} else {
				sb.append(CAM);
			}

			sb.append("|");

			if (RAM == null) {
				sb.append("<null>");
			} else {
				sb.append(RAM);
			}

			sb.append("|");

			if (LM == null) {
				sb.append("<null>");
			} else {
				sb.append(LM);
			}

			sb.append("|");

			if (LCM == null) {
				sb.append("<null>");
			} else {
				sb.append(LCM);
			}

			sb.append("|");

			if (CM == null) {
				sb.append("<null>");
			} else {
				sb.append(CM);
			}

			sb.append("|");

			if (RCM == null) {
				sb.append("<null>");
			} else {
				sb.append(RCM);
			}

			sb.append("|");

			if (RM == null) {
				sb.append("<null>");
			} else {
				sb.append(RM);
			}

			sb.append("|");

			if (LWB == null) {
				sb.append("<null>");
			} else {
				sb.append(LWB);
			}

			sb.append("|");

			if (LDM == null) {
				sb.append("<null>");
			} else {
				sb.append(LDM);
			}

			sb.append("|");

			if (CDM == null) {
				sb.append("<null>");
			} else {
				sb.append(CDM);
			}

			sb.append("|");

			if (RDM == null) {
				sb.append("<null>");
			} else {
				sb.append(RDM);
			}

			sb.append("|");

			if (RWB == null) {
				sb.append("<null>");
			} else {
				sb.append(RWB);
			}

			sb.append("|");

			if (LB == null) {
				sb.append("<null>");
			} else {
				sb.append(LB);
			}

			sb.append("|");

			if (LCB == null) {
				sb.append("<null>");
			} else {
				sb.append(LCB);
			}

			sb.append("|");

			if (CB == null) {
				sb.append("<null>");
			} else {
				sb.append(CB);
			}

			sb.append("|");

			if (RCB == null) {
				sb.append("<null>");
			} else {
				sb.append(RCB);
			}

			sb.append("|");

			if (RB == null) {
				sb.append("<null>");
			} else {
				sb.append(RB);
			}

			sb.append("|");

			if (Crossing == null) {
				sb.append("<null>");
			} else {
				sb.append(Crossing);
			}

			sb.append("|");

			if (Finishing == null) {
				sb.append("<null>");
			} else {
				sb.append(Finishing);
			}

			sb.append("|");

			if (HeadingAccuracy == null) {
				sb.append("<null>");
			} else {
				sb.append(HeadingAccuracy);
			}

			sb.append("|");

			if (ShortPassing == null) {
				sb.append("<null>");
			} else {
				sb.append(ShortPassing);
			}

			sb.append("|");

			if (Volleys == null) {
				sb.append("<null>");
			} else {
				sb.append(Volleys);
			}

			sb.append("|");

			if (Dribbling == null) {
				sb.append("<null>");
			} else {
				sb.append(Dribbling);
			}

			sb.append("|");

			if (Curve == null) {
				sb.append("<null>");
			} else {
				sb.append(Curve);
			}

			sb.append("|");

			if (FKAccuracy == null) {
				sb.append("<null>");
			} else {
				sb.append(FKAccuracy);
			}

			sb.append("|");

			if (LongPassing == null) {
				sb.append("<null>");
			} else {
				sb.append(LongPassing);
			}

			sb.append("|");

			if (BallControl == null) {
				sb.append("<null>");
			} else {
				sb.append(BallControl);
			}

			sb.append("|");

			if (Acceleration == null) {
				sb.append("<null>");
			} else {
				sb.append(Acceleration);
			}

			sb.append("|");

			if (SprintSpeed == null) {
				sb.append("<null>");
			} else {
				sb.append(SprintSpeed);
			}

			sb.append("|");

			if (Agility == null) {
				sb.append("<null>");
			} else {
				sb.append(Agility);
			}

			sb.append("|");

			if (Reactions == null) {
				sb.append("<null>");
			} else {
				sb.append(Reactions);
			}

			sb.append("|");

			if (Balance == null) {
				sb.append("<null>");
			} else {
				sb.append(Balance);
			}

			sb.append("|");

			if (ShotPower == null) {
				sb.append("<null>");
			} else {
				sb.append(ShotPower);
			}

			sb.append("|");

			if (Jumping == null) {
				sb.append("<null>");
			} else {
				sb.append(Jumping);
			}

			sb.append("|");

			if (Stamina == null) {
				sb.append("<null>");
			} else {
				sb.append(Stamina);
			}

			sb.append("|");

			if (Strength == null) {
				sb.append("<null>");
			} else {
				sb.append(Strength);
			}

			sb.append("|");

			if (LongShots == null) {
				sb.append("<null>");
			} else {
				sb.append(LongShots);
			}

			sb.append("|");

			if (Aggression == null) {
				sb.append("<null>");
			} else {
				sb.append(Aggression);
			}

			sb.append("|");

			if (Interceptions == null) {
				sb.append("<null>");
			} else {
				sb.append(Interceptions);
			}

			sb.append("|");

			if (Positioning == null) {
				sb.append("<null>");
			} else {
				sb.append(Positioning);
			}

			sb.append("|");

			if (Vision == null) {
				sb.append("<null>");
			} else {
				sb.append(Vision);
			}

			sb.append("|");

			if (Penalties == null) {
				sb.append("<null>");
			} else {
				sb.append(Penalties);
			}

			sb.append("|");

			if (Composure == null) {
				sb.append("<null>");
			} else {
				sb.append(Composure);
			}

			sb.append("|");

			if (Marking == null) {
				sb.append("<null>");
			} else {
				sb.append(Marking);
			}

			sb.append("|");

			if (StandingTackle == null) {
				sb.append("<null>");
			} else {
				sb.append(StandingTackle);
			}

			sb.append("|");

			if (SlidingTackle == null) {
				sb.append("<null>");
			} else {
				sb.append(SlidingTackle);
			}

			sb.append("|");

			if (GKDiving == null) {
				sb.append("<null>");
			} else {
				sb.append(GKDiving);
			}

			sb.append("|");

			if (GKHandling == null) {
				sb.append("<null>");
			} else {
				sb.append(GKHandling);
			}

			sb.append("|");

			if (GKKicking == null) {
				sb.append("<null>");
			} else {
				sb.append(GKKicking);
			}

			sb.append("|");

			if (GKPositioning == null) {
				sb.append("<null>");
			} else {
				sb.append(GKPositioning);
			}

			sb.append("|");

			if (GKReflexes == null) {
				sb.append("<null>");
			} else {
				sb.append(GKReflexes);
			}

			sb.append("|");

			if (Release_Clause == null) {
				sb.append("<null>");
			} else {
				sb.append(Release_Clause);
			}

			sb.append("|");

			if (Column88 == null) {
				sb.append("<null>");
			} else {
				sb.append(Column88);
			}

			sb.append("|");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID, other.ID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				row2Struct row2 = new row2Struct();
				row6Struct row6 = new row6Struct();
				row3Struct row3 = new row3Struct();
				row7Struct row7 = new row7Struct();
				row4Struct row4 = new row4Struct();
				row8Struct row8 = new row8Struct();
				row5Struct row5 = new row5Struct();
				row9Struct row9 = new row9Struct();

				/**
				 * [tDBOutput_1 begin ] start
				 */

				ok_Hash.put("tDBOutput_1", false);
				start_Hash.put("tDBOutput_1", System.currentTimeMillis());

				currentComponent = "tDBOutput_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row6");
				}

				int tos_count_tDBOutput_1 = 0;

				if (log.isDebugEnabled())
					log.debug("tDBOutput_1 - " + ("Start to work."));
				if (log.isDebugEnabled()) {
					class BytesLimit65535_tDBOutput_1 {
						public void limitLog4jByte() throws Exception {
							StringBuilder log4jParamters_tDBOutput_1 = new StringBuilder();
							log4jParamters_tDBOutput_1.append("Parameters:");
							log4jParamters_tDBOutput_1.append("USE_EXISTING_CONNECTION" + " = " + "true");
							log4jParamters_tDBOutput_1.append(" | ");
							log4jParamters_tDBOutput_1.append("CONNECTION" + " = " + "tDBConnection_1");
							log4jParamters_tDBOutput_1.append(" | ");
							log4jParamters_tDBOutput_1.append("TABLE" + " = " + "\"Goal_keepers\"");
							log4jParamters_tDBOutput_1.append(" | ");
							log4jParamters_tDBOutput_1.append("TABLE_ACTION" + " = " + "CREATE_IF_NOT_EXISTS");
							log4jParamters_tDBOutput_1.append(" | ");
							log4jParamters_tDBOutput_1.append("DATA_ACTION" + " = " + "INSERT_OR_UPDATE");
							log4jParamters_tDBOutput_1.append(" | ");
							log4jParamters_tDBOutput_1.append("DIE_ON_ERROR" + " = " + "false");
							log4jParamters_tDBOutput_1.append(" | ");
							log4jParamters_tDBOutput_1.append("ADD_COLS" + " = " + "[]");
							log4jParamters_tDBOutput_1.append(" | ");
							log4jParamters_tDBOutput_1.append("USE_FIELD_OPTIONS" + " = " + "false");
							log4jParamters_tDBOutput_1.append(" | ");
							log4jParamters_tDBOutput_1.append("USE_HINT_OPTIONS" + " = " + "false");
							log4jParamters_tDBOutput_1.append(" | ");
							log4jParamters_tDBOutput_1.append("ENABLE_DEBUG_MODE" + " = " + "false");
							log4jParamters_tDBOutput_1.append(" | ");
							log4jParamters_tDBOutput_1.append("SUPPORT_NULL_WHERE" + " = " + "false");
							log4jParamters_tDBOutput_1.append(" | ");
							log4jParamters_tDBOutput_1.append("UNIFIED_COMPONENTS" + " = " + "tMysqlOutput");
							log4jParamters_tDBOutput_1.append(" | ");
							if (log.isDebugEnabled())
								log.debug("tDBOutput_1 - " + (log4jParamters_tDBOutput_1));
						}
					}
					new BytesLimit65535_tDBOutput_1().limitLog4jByte();
				}

				int updateKeyCount_tDBOutput_1 = 1;
				if (updateKeyCount_tDBOutput_1 < 1) {
					throw new RuntimeException("For update, Schema must have a key");
				} else if (updateKeyCount_tDBOutput_1 == 89 && true) {
					log.warn("For update, every Schema column can not be a key");
				}

				int nb_line_tDBOutput_1 = 0;
				int nb_line_update_tDBOutput_1 = 0;
				int nb_line_inserted_tDBOutput_1 = 0;
				int nb_line_deleted_tDBOutput_1 = 0;
				int nb_line_rejected_tDBOutput_1 = 0;

				int deletedCount_tDBOutput_1 = 0;
				int updatedCount_tDBOutput_1 = 0;
				int insertedCount_tDBOutput_1 = 0;
				int rowsToCommitCount_tDBOutput_1 = 0;
				int rejectedCount_tDBOutput_1 = 0;

				String tableName_tDBOutput_1 = "Goal_keepers";
				boolean whetherReject_tDBOutput_1 = false;

				java.util.Calendar calendar_tDBOutput_1 = java.util.Calendar.getInstance();
				calendar_tDBOutput_1.set(1, 0, 1, 0, 0, 0);
				long year1_tDBOutput_1 = calendar_tDBOutput_1.getTime().getTime();
				calendar_tDBOutput_1.set(10000, 0, 1, 0, 0, 0);
				long year10000_tDBOutput_1 = calendar_tDBOutput_1.getTime().getTime();
				long date_tDBOutput_1;

				java.sql.Connection conn_tDBOutput_1 = null;
				conn_tDBOutput_1 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				if (log.isDebugEnabled())
					log.debug("tDBOutput_1 - " + ("Uses an existing connection with username '")
							+ (conn_tDBOutput_1.getMetaData().getUserName()) + ("'. Connection URL: ")
							+ (conn_tDBOutput_1.getMetaData().getURL()) + ("."));
				if (log.isDebugEnabled())
					log.debug("tDBOutput_1 - " + ("Connection is set auto commit to '")
							+ (conn_tDBOutput_1.getAutoCommit()) + ("'."));

				int count_tDBOutput_1 = 0;

				java.sql.DatabaseMetaData dbMetaData_tDBOutput_1 = conn_tDBOutput_1.getMetaData();
				java.sql.ResultSet rsTable_tDBOutput_1 = dbMetaData_tDBOutput_1.getTables("talend", null, null,
						new String[] { "TABLE" });
				boolean whetherExist_tDBOutput_1 = false;
				while (rsTable_tDBOutput_1.next()) {
					String table_tDBOutput_1 = rsTable_tDBOutput_1.getString("TABLE_NAME");
					if (table_tDBOutput_1.equalsIgnoreCase("Goal_keepers")) {
						whetherExist_tDBOutput_1 = true;
						break;
					}
				}
				if (!whetherExist_tDBOutput_1) {
					try (java.sql.Statement stmtCreate_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
						if (log.isDebugEnabled())
							log.debug(
									"tDBOutput_1 - " + ("Creating") + (" table '") + (tableName_tDBOutput_1) + ("'."));
						stmtCreate_tDBOutput_1.execute("CREATE TABLE `" + tableName_tDBOutput_1
								+ "`(`ID` INT(5)  ,`Name` VARCHAR(17)  ,`Age` INT(2)  ,`Photo` VARCHAR(45)  ,`Nationality` VARCHAR(19)  ,`Flag` VARCHAR(35)  ,`Overall` INT(2)  ,`Potential` INT(2)  ,`Club` VARCHAR(23)  ,`Club_Logo` VARCHAR(47)  ,`Value` VARCHAR(8)  ,`Wage` VARCHAR(7)  ,`Special` INT(4)  ,`Preferred_Foot` VARCHAR(5)  ,`International_Reputation` INT(1)  ,`Weak_Foot` INT(1)  ,`Skill_Moves` INT(1)  ,`Work_Rate` VARCHAR(14)  ,`Body_Type` VARCHAR(10)  ,`Real_Face` VARCHAR(3)  ,`Position` VARCHAR(3)  ,`Jersey_Number` INT(2)  ,`Joined` VARCHAR(7)  ,`Loaned_From` VARCHAR(6)  ,`Contract_Valid_Until` VARCHAR(0)  ,`Height` INT(4)  ,`Weight` VARCHAR(4)  ,`LS` VARCHAR(6)  ,`ST` VARCHAR(4)  ,`RS` VARCHAR(4)  ,`LW` VARCHAR(4)  ,`LF` VARCHAR(4)  ,`CF` VARCHAR(4)  ,`RF` VARCHAR(4)  ,`RW` VARCHAR(4)  ,`LAM` VARCHAR(4)  ,`CAM` VARCHAR(4)  ,`RAM` VARCHAR(4)  ,`LM` VARCHAR(4)  ,`LCM` VARCHAR(4)  ,`CM` VARCHAR(4)  ,`RCM` VARCHAR(4)  ,`RM` VARCHAR(4)  ,`LWB` VARCHAR(4)  ,`LDM` VARCHAR(4)  ,`CDM` VARCHAR(4)  ,`RDM` VARCHAR(4)  ,`RWB` VARCHAR(4)  ,`LB` VARCHAR(4)  ,`LCB` VARCHAR(4)  ,`CB` VARCHAR(4)  ,`RCB` VARCHAR(4)  ,`RB` VARCHAR(4)  ,`Crossing` VARCHAR(4)  ,`Finishing` INT(2)  ,`HeadingAccuracy` INT(2)  ,`ShortPassing` INT(2)  ,`Volleys` INT(2)  ,`Dribbling` INT(2)  ,`Curve` INT(2)  ,`FKAccuracy` INT(2)  ,`LongPassing` INT(2)  ,`BallControl` INT(2)  ,`Acceleration` INT(2)  ,`SprintSpeed` INT(2)  ,`Agility` INT(2)  ,`Reactions` INT(2)  ,`Balance` INT(2)  ,`ShotPower` INT(2)  ,`Jumping` INT(2)  ,`Stamina` INT(2)  ,`Strength` INT(2)  ,`LongShots` INT(2)  ,`Aggression` INT(2)  ,`Interceptions` INT(2)  ,`Positioning` INT(2)  ,`Vision` INT(2)  ,`Penalties` INT(2)  ,`Composure` INT(2)  ,`Marking` INT(2)  ,`StandingTackle` INT(2)  ,`SlidingTackle` INT(2)  ,`GKDiving` INT(2)  ,`GKHandling` INT(2)  ,`GKKicking` INT(2)  ,`GKPositioning` INT(2)  ,`GKReflexes` INT(2)  ,`Release_Clause` INT(2)  ,`Column88` VARCHAR(9)  ,primary key(`ID`))");
						if (log.isDebugEnabled())
							log.debug("tDBOutput_1 - " + ("Create") + (" table '") + (tableName_tDBOutput_1)
									+ ("' has succeeded."));
					}
				}
				java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1
						.prepareStatement("SELECT COUNT(1) FROM `" + "Goal_keepers" + "` WHERE `ID` = ?");
				resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);
				String insert_tDBOutput_1 = "INSERT INTO `" + "Goal_keepers"
						+ "` (`ID`,`Name`,`Age`,`Photo`,`Nationality`,`Flag`,`Overall`,`Potential`,`Club`,`Club_Logo`,`Value`,`Wage`,`Special`,`Preferred_Foot`,`International_Reputation`,`Weak_Foot`,`Skill_Moves`,`Work_Rate`,`Body_Type`,`Real_Face`,`Position`,`Jersey_Number`,`Joined`,`Loaned_From`,`Contract_Valid_Until`,`Height`,`Weight`,`LS`,`ST`,`RS`,`LW`,`LF`,`CF`,`RF`,`RW`,`LAM`,`CAM`,`RAM`,`LM`,`LCM`,`CM`,`RCM`,`RM`,`LWB`,`LDM`,`CDM`,`RDM`,`RWB`,`LB`,`LCB`,`CB`,`RCB`,`RB`,`Crossing`,`Finishing`,`HeadingAccuracy`,`ShortPassing`,`Volleys`,`Dribbling`,`Curve`,`FKAccuracy`,`LongPassing`,`BallControl`,`Acceleration`,`SprintSpeed`,`Agility`,`Reactions`,`Balance`,`ShotPower`,`Jumping`,`Stamina`,`Strength`,`LongShots`,`Aggression`,`Interceptions`,`Positioning`,`Vision`,`Penalties`,`Composure`,`Marking`,`StandingTackle`,`SlidingTackle`,`GKDiving`,`GKHandling`,`GKKicking`,`GKPositioning`,`GKReflexes`,`Release_Clause`,`Column88`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmtInsert_tDBOutput_1 = conn_tDBOutput_1
						.prepareStatement(insert_tDBOutput_1);
				resourceMap.put("pstmtInsert_tDBOutput_1", pstmtInsert_tDBOutput_1);
				String update_tDBOutput_1 = "UPDATE `" + "Goal_keepers"
						+ "` SET `Name` = ?,`Age` = ?,`Photo` = ?,`Nationality` = ?,`Flag` = ?,`Overall` = ?,`Potential` = ?,`Club` = ?,`Club_Logo` = ?,`Value` = ?,`Wage` = ?,`Special` = ?,`Preferred_Foot` = ?,`International_Reputation` = ?,`Weak_Foot` = ?,`Skill_Moves` = ?,`Work_Rate` = ?,`Body_Type` = ?,`Real_Face` = ?,`Position` = ?,`Jersey_Number` = ?,`Joined` = ?,`Loaned_From` = ?,`Contract_Valid_Until` = ?,`Height` = ?,`Weight` = ?,`LS` = ?,`ST` = ?,`RS` = ?,`LW` = ?,`LF` = ?,`CF` = ?,`RF` = ?,`RW` = ?,`LAM` = ?,`CAM` = ?,`RAM` = ?,`LM` = ?,`LCM` = ?,`CM` = ?,`RCM` = ?,`RM` = ?,`LWB` = ?,`LDM` = ?,`CDM` = ?,`RDM` = ?,`RWB` = ?,`LB` = ?,`LCB` = ?,`CB` = ?,`RCB` = ?,`RB` = ?,`Crossing` = ?,`Finishing` = ?,`HeadingAccuracy` = ?,`ShortPassing` = ?,`Volleys` = ?,`Dribbling` = ?,`Curve` = ?,`FKAccuracy` = ?,`LongPassing` = ?,`BallControl` = ?,`Acceleration` = ?,`SprintSpeed` = ?,`Agility` = ?,`Reactions` = ?,`Balance` = ?,`ShotPower` = ?,`Jumping` = ?,`Stamina` = ?,`Strength` = ?,`LongShots` = ?,`Aggression` = ?,`Interceptions` = ?,`Positioning` = ?,`Vision` = ?,`Penalties` = ?,`Composure` = ?,`Marking` = ?,`StandingTackle` = ?,`SlidingTackle` = ?,`GKDiving` = ?,`GKHandling` = ?,`GKKicking` = ?,`GKPositioning` = ?,`GKReflexes` = ?,`Release_Clause` = ?,`Column88` = ? WHERE `ID` = ?";

				java.sql.PreparedStatement pstmtUpdate_tDBOutput_1 = conn_tDBOutput_1
						.prepareStatement(update_tDBOutput_1);
				resourceMap.put("pstmtUpdate_tDBOutput_1", pstmtUpdate_tDBOutput_1);

				/**
				 * [tDBOutput_1 begin ] stop
				 */

				/**
				 * [tFilterRow_1 begin ] start
				 */

				ok_Hash.put("tFilterRow_1", false);
				start_Hash.put("tFilterRow_1", System.currentTimeMillis());

				currentComponent = "tFilterRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row2");
				}

				int tos_count_tFilterRow_1 = 0;

				if (log.isDebugEnabled())
					log.debug("tFilterRow_1 - " + ("Start to work."));
				if (log.isDebugEnabled()) {
					class BytesLimit65535_tFilterRow_1 {
						public void limitLog4jByte() throws Exception {
							StringBuilder log4jParamters_tFilterRow_1 = new StringBuilder();
							log4jParamters_tFilterRow_1.append("Parameters:");
							log4jParamters_tFilterRow_1.append("LOGICAL_OP" + " = " + "&&");
							log4jParamters_tFilterRow_1.append(" | ");
							log4jParamters_tFilterRow_1.append("CONDITIONS" + " = " + "[{OPERATOR=" + ("==")
									+ ", RVALUE=" + ("\"GK\"") + ", INPUT_COLUMN=" + ("Position") + ", FUNCTION="
									+ ("$source == null? false : $source.matches($target) $operator true") + "}]");
							log4jParamters_tFilterRow_1.append(" | ");
							log4jParamters_tFilterRow_1.append("USE_ADVANCED" + " = " + "false");
							log4jParamters_tFilterRow_1.append(" | ");
							if (log.isDebugEnabled())
								log.debug("tFilterRow_1 - " + (log4jParamters_tFilterRow_1));
						}
					}
					new BytesLimit65535_tFilterRow_1().limitLog4jByte();
				}
				int nb_line_tFilterRow_1 = 0;
				int nb_line_ok_tFilterRow_1 = 0;
				int nb_line_reject_tFilterRow_1 = 0;

				class Operator_tFilterRow_1 {
					private String sErrorMsg = "";
					private boolean bMatchFlag = true;
					private String sUnionFlag = "&&";

					public Operator_tFilterRow_1(String unionFlag) {
						sUnionFlag = unionFlag;
						bMatchFlag = "||".equals(unionFlag) ? false : true;
					}

					public String getErrorMsg() {
						if (sErrorMsg != null && sErrorMsg.length() > 1)
							return sErrorMsg.substring(1);
						else
							return null;
					}

					public boolean getMatchFlag() {
						return bMatchFlag;
					}

					public void matches(boolean partMatched, String reason) {
						// no need to care about the next judgement
						if ("||".equals(sUnionFlag) && bMatchFlag) {
							return;
						}

						if (!partMatched) {
							sErrorMsg += "|" + reason;
						}

						if ("||".equals(sUnionFlag))
							bMatchFlag = bMatchFlag || partMatched;
						else
							bMatchFlag = bMatchFlag && partMatched;
					}
				}

				/**
				 * [tFilterRow_1 begin ] stop
				 */

				/**
				 * [tDBOutput_2 begin ] start
				 */

				ok_Hash.put("tDBOutput_2", false);
				start_Hash.put("tDBOutput_2", System.currentTimeMillis());

				currentComponent = "tDBOutput_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row7");
				}

				int tos_count_tDBOutput_2 = 0;

				if (log.isDebugEnabled())
					log.debug("tDBOutput_2 - " + ("Start to work."));
				if (log.isDebugEnabled()) {
					class BytesLimit65535_tDBOutput_2 {
						public void limitLog4jByte() throws Exception {
							StringBuilder log4jParamters_tDBOutput_2 = new StringBuilder();
							log4jParamters_tDBOutput_2.append("Parameters:");
							log4jParamters_tDBOutput_2.append("USE_EXISTING_CONNECTION" + " = " + "true");
							log4jParamters_tDBOutput_2.append(" | ");
							log4jParamters_tDBOutput_2.append("CONNECTION" + " = " + "tDBConnection_1");
							log4jParamters_tDBOutput_2.append(" | ");
							log4jParamters_tDBOutput_2.append("TABLE" + " = " + "\"Defenders\"");
							log4jParamters_tDBOutput_2.append(" | ");
							log4jParamters_tDBOutput_2.append("TABLE_ACTION" + " = " + "CREATE_IF_NOT_EXISTS");
							log4jParamters_tDBOutput_2.append(" | ");
							log4jParamters_tDBOutput_2.append("DATA_ACTION" + " = " + "INSERT_OR_UPDATE");
							log4jParamters_tDBOutput_2.append(" | ");
							log4jParamters_tDBOutput_2.append("DIE_ON_ERROR" + " = " + "false");
							log4jParamters_tDBOutput_2.append(" | ");
							log4jParamters_tDBOutput_2.append("ADD_COLS" + " = " + "[]");
							log4jParamters_tDBOutput_2.append(" | ");
							log4jParamters_tDBOutput_2.append("USE_FIELD_OPTIONS" + " = " + "false");
							log4jParamters_tDBOutput_2.append(" | ");
							log4jParamters_tDBOutput_2.append("USE_HINT_OPTIONS" + " = " + "false");
							log4jParamters_tDBOutput_2.append(" | ");
							log4jParamters_tDBOutput_2.append("ENABLE_DEBUG_MODE" + " = " + "false");
							log4jParamters_tDBOutput_2.append(" | ");
							log4jParamters_tDBOutput_2.append("SUPPORT_NULL_WHERE" + " = " + "false");
							log4jParamters_tDBOutput_2.append(" | ");
							log4jParamters_tDBOutput_2.append("UNIFIED_COMPONENTS" + " = " + "tMysqlOutput");
							log4jParamters_tDBOutput_2.append(" | ");
							if (log.isDebugEnabled())
								log.debug("tDBOutput_2 - " + (log4jParamters_tDBOutput_2));
						}
					}
					new BytesLimit65535_tDBOutput_2().limitLog4jByte();
				}

				int updateKeyCount_tDBOutput_2 = 1;
				if (updateKeyCount_tDBOutput_2 < 1) {
					throw new RuntimeException("For update, Schema must have a key");
				} else if (updateKeyCount_tDBOutput_2 == 89 && true) {
					log.warn("For update, every Schema column can not be a key");
				}

				int nb_line_tDBOutput_2 = 0;
				int nb_line_update_tDBOutput_2 = 0;
				int nb_line_inserted_tDBOutput_2 = 0;
				int nb_line_deleted_tDBOutput_2 = 0;
				int nb_line_rejected_tDBOutput_2 = 0;

				int deletedCount_tDBOutput_2 = 0;
				int updatedCount_tDBOutput_2 = 0;
				int insertedCount_tDBOutput_2 = 0;
				int rowsToCommitCount_tDBOutput_2 = 0;
				int rejectedCount_tDBOutput_2 = 0;

				String tableName_tDBOutput_2 = "Defenders";
				boolean whetherReject_tDBOutput_2 = false;

				java.util.Calendar calendar_tDBOutput_2 = java.util.Calendar.getInstance();
				calendar_tDBOutput_2.set(1, 0, 1, 0, 0, 0);
				long year1_tDBOutput_2 = calendar_tDBOutput_2.getTime().getTime();
				calendar_tDBOutput_2.set(10000, 0, 1, 0, 0, 0);
				long year10000_tDBOutput_2 = calendar_tDBOutput_2.getTime().getTime();
				long date_tDBOutput_2;

				java.sql.Connection conn_tDBOutput_2 = null;
				conn_tDBOutput_2 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				if (log.isDebugEnabled())
					log.debug("tDBOutput_2 - " + ("Uses an existing connection with username '")
							+ (conn_tDBOutput_2.getMetaData().getUserName()) + ("'. Connection URL: ")
							+ (conn_tDBOutput_2.getMetaData().getURL()) + ("."));
				if (log.isDebugEnabled())
					log.debug("tDBOutput_2 - " + ("Connection is set auto commit to '")
							+ (conn_tDBOutput_2.getAutoCommit()) + ("'."));

				int count_tDBOutput_2 = 0;

				java.sql.DatabaseMetaData dbMetaData_tDBOutput_2 = conn_tDBOutput_2.getMetaData();
				java.sql.ResultSet rsTable_tDBOutput_2 = dbMetaData_tDBOutput_2.getTables("talend", null, null,
						new String[] { "TABLE" });
				boolean whetherExist_tDBOutput_2 = false;
				while (rsTable_tDBOutput_2.next()) {
					String table_tDBOutput_2 = rsTable_tDBOutput_2.getString("TABLE_NAME");
					if (table_tDBOutput_2.equalsIgnoreCase("Defenders")) {
						whetherExist_tDBOutput_2 = true;
						break;
					}
				}
				if (!whetherExist_tDBOutput_2) {
					try (java.sql.Statement stmtCreate_tDBOutput_2 = conn_tDBOutput_2.createStatement()) {
						if (log.isDebugEnabled())
							log.debug(
									"tDBOutput_2 - " + ("Creating") + (" table '") + (tableName_tDBOutput_2) + ("'."));
						stmtCreate_tDBOutput_2.execute("CREATE TABLE `" + tableName_tDBOutput_2
								+ "`(`ID` INT(5)  ,`Name` VARCHAR(17)  ,`Age` INT(2)  ,`Photo` VARCHAR(45)  ,`Nationality` VARCHAR(19)  ,`Flag` VARCHAR(35)  ,`Overall` INT(2)  ,`Potential` INT(2)  ,`Club` VARCHAR(23)  ,`Club_Logo` VARCHAR(47)  ,`Value` VARCHAR(8)  ,`Wage` VARCHAR(7)  ,`Special` INT(4)  ,`Preferred_Foot` VARCHAR(5)  ,`International_Reputation` INT(1)  ,`Weak_Foot` INT(1)  ,`Skill_Moves` INT(1)  ,`Work_Rate` VARCHAR(14)  ,`Body_Type` VARCHAR(10)  ,`Real_Face` VARCHAR(3)  ,`Position` VARCHAR(3)  ,`Jersey_Number` INT(2)  ,`Joined` VARCHAR(7)  ,`Loaned_From` VARCHAR(6)  ,`Contract_Valid_Until` VARCHAR(0)  ,`Height` INT(4)  ,`Weight` VARCHAR(4)  ,`LS` VARCHAR(6)  ,`ST` VARCHAR(4)  ,`RS` VARCHAR(4)  ,`LW` VARCHAR(4)  ,`LF` VARCHAR(4)  ,`CF` VARCHAR(4)  ,`RF` VARCHAR(4)  ,`RW` VARCHAR(4)  ,`LAM` VARCHAR(4)  ,`CAM` VARCHAR(4)  ,`RAM` VARCHAR(4)  ,`LM` VARCHAR(4)  ,`LCM` VARCHAR(4)  ,`CM` VARCHAR(4)  ,`RCM` VARCHAR(4)  ,`RM` VARCHAR(4)  ,`LWB` VARCHAR(4)  ,`LDM` VARCHAR(4)  ,`CDM` VARCHAR(4)  ,`RDM` VARCHAR(4)  ,`RWB` VARCHAR(4)  ,`LB` VARCHAR(4)  ,`LCB` VARCHAR(4)  ,`CB` VARCHAR(4)  ,`RCB` VARCHAR(4)  ,`RB` VARCHAR(4)  ,`Crossing` VARCHAR(4)  ,`Finishing` INT(2)  ,`HeadingAccuracy` INT(2)  ,`ShortPassing` INT(2)  ,`Volleys` INT(2)  ,`Dribbling` INT(2)  ,`Curve` INT(2)  ,`FKAccuracy` INT(2)  ,`LongPassing` INT(2)  ,`BallControl` INT(2)  ,`Acceleration` INT(2)  ,`SprintSpeed` INT(2)  ,`Agility` INT(2)  ,`Reactions` INT(2)  ,`Balance` INT(2)  ,`ShotPower` INT(2)  ,`Jumping` INT(2)  ,`Stamina` INT(2)  ,`Strength` INT(2)  ,`LongShots` INT(2)  ,`Aggression` INT(2)  ,`Interceptions` INT(2)  ,`Positioning` INT(2)  ,`Vision` INT(2)  ,`Penalties` INT(2)  ,`Composure` INT(2)  ,`Marking` INT(2)  ,`StandingTackle` INT(2)  ,`SlidingTackle` INT(2)  ,`GKDiving` INT(2)  ,`GKHandling` INT(2)  ,`GKKicking` INT(2)  ,`GKPositioning` INT(2)  ,`GKReflexes` INT(2)  ,`Release_Clause` INT(2)  ,`Column88` VARCHAR(9)  ,primary key(`ID`))");
						if (log.isDebugEnabled())
							log.debug("tDBOutput_2 - " + ("Create") + (" table '") + (tableName_tDBOutput_2)
									+ ("' has succeeded."));
					}
				}
				java.sql.PreparedStatement pstmt_tDBOutput_2 = conn_tDBOutput_2
						.prepareStatement("SELECT COUNT(1) FROM `" + "Defenders" + "` WHERE `ID` = ?");
				resourceMap.put("pstmt_tDBOutput_2", pstmt_tDBOutput_2);
				String insert_tDBOutput_2 = "INSERT INTO `" + "Defenders"
						+ "` (`ID`,`Name`,`Age`,`Photo`,`Nationality`,`Flag`,`Overall`,`Potential`,`Club`,`Club_Logo`,`Value`,`Wage`,`Special`,`Preferred_Foot`,`International_Reputation`,`Weak_Foot`,`Skill_Moves`,`Work_Rate`,`Body_Type`,`Real_Face`,`Position`,`Jersey_Number`,`Joined`,`Loaned_From`,`Contract_Valid_Until`,`Height`,`Weight`,`LS`,`ST`,`RS`,`LW`,`LF`,`CF`,`RF`,`RW`,`LAM`,`CAM`,`RAM`,`LM`,`LCM`,`CM`,`RCM`,`RM`,`LWB`,`LDM`,`CDM`,`RDM`,`RWB`,`LB`,`LCB`,`CB`,`RCB`,`RB`,`Crossing`,`Finishing`,`HeadingAccuracy`,`ShortPassing`,`Volleys`,`Dribbling`,`Curve`,`FKAccuracy`,`LongPassing`,`BallControl`,`Acceleration`,`SprintSpeed`,`Agility`,`Reactions`,`Balance`,`ShotPower`,`Jumping`,`Stamina`,`Strength`,`LongShots`,`Aggression`,`Interceptions`,`Positioning`,`Vision`,`Penalties`,`Composure`,`Marking`,`StandingTackle`,`SlidingTackle`,`GKDiving`,`GKHandling`,`GKKicking`,`GKPositioning`,`GKReflexes`,`Release_Clause`,`Column88`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmtInsert_tDBOutput_2 = conn_tDBOutput_2
						.prepareStatement(insert_tDBOutput_2);
				resourceMap.put("pstmtInsert_tDBOutput_2", pstmtInsert_tDBOutput_2);
				String update_tDBOutput_2 = "UPDATE `" + "Defenders"
						+ "` SET `Name` = ?,`Age` = ?,`Photo` = ?,`Nationality` = ?,`Flag` = ?,`Overall` = ?,`Potential` = ?,`Club` = ?,`Club_Logo` = ?,`Value` = ?,`Wage` = ?,`Special` = ?,`Preferred_Foot` = ?,`International_Reputation` = ?,`Weak_Foot` = ?,`Skill_Moves` = ?,`Work_Rate` = ?,`Body_Type` = ?,`Real_Face` = ?,`Position` = ?,`Jersey_Number` = ?,`Joined` = ?,`Loaned_From` = ?,`Contract_Valid_Until` = ?,`Height` = ?,`Weight` = ?,`LS` = ?,`ST` = ?,`RS` = ?,`LW` = ?,`LF` = ?,`CF` = ?,`RF` = ?,`RW` = ?,`LAM` = ?,`CAM` = ?,`RAM` = ?,`LM` = ?,`LCM` = ?,`CM` = ?,`RCM` = ?,`RM` = ?,`LWB` = ?,`LDM` = ?,`CDM` = ?,`RDM` = ?,`RWB` = ?,`LB` = ?,`LCB` = ?,`CB` = ?,`RCB` = ?,`RB` = ?,`Crossing` = ?,`Finishing` = ?,`HeadingAccuracy` = ?,`ShortPassing` = ?,`Volleys` = ?,`Dribbling` = ?,`Curve` = ?,`FKAccuracy` = ?,`LongPassing` = ?,`BallControl` = ?,`Acceleration` = ?,`SprintSpeed` = ?,`Agility` = ?,`Reactions` = ?,`Balance` = ?,`ShotPower` = ?,`Jumping` = ?,`Stamina` = ?,`Strength` = ?,`LongShots` = ?,`Aggression` = ?,`Interceptions` = ?,`Positioning` = ?,`Vision` = ?,`Penalties` = ?,`Composure` = ?,`Marking` = ?,`StandingTackle` = ?,`SlidingTackle` = ?,`GKDiving` = ?,`GKHandling` = ?,`GKKicking` = ?,`GKPositioning` = ?,`GKReflexes` = ?,`Release_Clause` = ?,`Column88` = ? WHERE `ID` = ?";

				java.sql.PreparedStatement pstmtUpdate_tDBOutput_2 = conn_tDBOutput_2
						.prepareStatement(update_tDBOutput_2);
				resourceMap.put("pstmtUpdate_tDBOutput_2", pstmtUpdate_tDBOutput_2);

				/**
				 * [tDBOutput_2 begin ] stop
				 */

				/**
				 * [tFilterRow_2 begin ] start
				 */

				ok_Hash.put("tFilterRow_2", false);
				start_Hash.put("tFilterRow_2", System.currentTimeMillis());

				currentComponent = "tFilterRow_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row3");
				}

				int tos_count_tFilterRow_2 = 0;

				if (log.isDebugEnabled())
					log.debug("tFilterRow_2 - " + ("Start to work."));
				if (log.isDebugEnabled()) {
					class BytesLimit65535_tFilterRow_2 {
						public void limitLog4jByte() throws Exception {
							StringBuilder log4jParamters_tFilterRow_2 = new StringBuilder();
							log4jParamters_tFilterRow_2.append("Parameters:");
							log4jParamters_tFilterRow_2.append("LOGICAL_OP" + " = " + "||");
							log4jParamters_tFilterRow_2.append(" | ");
							log4jParamters_tFilterRow_2.append("CONDITIONS" + " = " + "[{OPERATOR=" + ("==")
									+ ", RVALUE=" + ("\"RB\"") + ", INPUT_COLUMN=" + ("Position") + ", FUNCTION="
									+ ("$source == null? false : $source.matches($target) $operator true")
									+ "}, {OPERATOR=" + ("==") + ", RVALUE=" + ("\"RWB\"") + ", INPUT_COLUMN="
									+ ("Position") + ", FUNCTION="
									+ ("$source == null? false : $source.matches($target) $operator true")
									+ "}, {OPERATOR=" + ("==") + ", RVALUE=" + ("\"RCB\"") + ", INPUT_COLUMN="
									+ ("Position") + ", FUNCTION="
									+ ("$source == null? false : $source.matches($target) $operator true")
									+ "}, {OPERATOR=" + ("==") + ", RVALUE=" + ("\"CB\"") + ", INPUT_COLUMN="
									+ ("Position") + ", FUNCTION="
									+ ("$source == null? false : $source.matches($target) $operator true")
									+ "}, {OPERATOR=" + ("==") + ", RVALUE=" + ("\"LB\"") + ", INPUT_COLUMN="
									+ ("Position") + ", FUNCTION="
									+ ("$source == null? false : $source.matches($target) $operator true")
									+ "}, {OPERATOR=" + ("==") + ", RVALUE=" + ("\"LCB\"") + ", INPUT_COLUMN="
									+ ("Position") + ", FUNCTION="
									+ ("$source == null? false : $source.matches($target) $operator true")
									+ "}, {OPERATOR=" + ("==") + ", RVALUE=" + ("\"LWB\"") + ", INPUT_COLUMN="
									+ ("Position") + ", FUNCTION="
									+ ("$source == null? false : $source.matches($target) $operator true") + "}]");
							log4jParamters_tFilterRow_2.append(" | ");
							log4jParamters_tFilterRow_2.append("USE_ADVANCED" + " = " + "false");
							log4jParamters_tFilterRow_2.append(" | ");
							if (log.isDebugEnabled())
								log.debug("tFilterRow_2 - " + (log4jParamters_tFilterRow_2));
						}
					}
					new BytesLimit65535_tFilterRow_2().limitLog4jByte();
				}
				int nb_line_tFilterRow_2 = 0;
				int nb_line_ok_tFilterRow_2 = 0;
				int nb_line_reject_tFilterRow_2 = 0;

				class Operator_tFilterRow_2 {
					private String sErrorMsg = "";
					private boolean bMatchFlag = true;
					private String sUnionFlag = "&&";

					public Operator_tFilterRow_2(String unionFlag) {
						sUnionFlag = unionFlag;
						bMatchFlag = "||".equals(unionFlag) ? false : true;
					}

					public String getErrorMsg() {
						if (sErrorMsg != null && sErrorMsg.length() > 1)
							return sErrorMsg.substring(1);
						else
							return null;
					}

					public boolean getMatchFlag() {
						return bMatchFlag;
					}

					public void matches(boolean partMatched, String reason) {
						// no need to care about the next judgement
						if ("||".equals(sUnionFlag) && bMatchFlag) {
							return;
						}

						if (!partMatched) {
							sErrorMsg += "|" + reason;
						}

						if ("||".equals(sUnionFlag))
							bMatchFlag = bMatchFlag || partMatched;
						else
							bMatchFlag = bMatchFlag && partMatched;
					}
				}

				/**
				 * [tFilterRow_2 begin ] stop
				 */

				/**
				 * [tDBOutput_3 begin ] start
				 */

				ok_Hash.put("tDBOutput_3", false);
				start_Hash.put("tDBOutput_3", System.currentTimeMillis());

				currentComponent = "tDBOutput_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row8");
				}

				int tos_count_tDBOutput_3 = 0;

				if (log.isDebugEnabled())
					log.debug("tDBOutput_3 - " + ("Start to work."));
				if (log.isDebugEnabled()) {
					class BytesLimit65535_tDBOutput_3 {
						public void limitLog4jByte() throws Exception {
							StringBuilder log4jParamters_tDBOutput_3 = new StringBuilder();
							log4jParamters_tDBOutput_3.append("Parameters:");
							log4jParamters_tDBOutput_3.append("USE_EXISTING_CONNECTION" + " = " + "true");
							log4jParamters_tDBOutput_3.append(" | ");
							log4jParamters_tDBOutput_3.append("CONNECTION" + " = " + "tDBConnection_1");
							log4jParamters_tDBOutput_3.append(" | ");
							log4jParamters_tDBOutput_3.append("TABLE" + " = " + "\"Midfielders\"");
							log4jParamters_tDBOutput_3.append(" | ");
							log4jParamters_tDBOutput_3.append("TABLE_ACTION" + " = " + "CREATE_IF_NOT_EXISTS");
							log4jParamters_tDBOutput_3.append(" | ");
							log4jParamters_tDBOutput_3.append("DATA_ACTION" + " = " + "INSERT_OR_UPDATE");
							log4jParamters_tDBOutput_3.append(" | ");
							log4jParamters_tDBOutput_3.append("DIE_ON_ERROR" + " = " + "false");
							log4jParamters_tDBOutput_3.append(" | ");
							log4jParamters_tDBOutput_3.append("ADD_COLS" + " = " + "[]");
							log4jParamters_tDBOutput_3.append(" | ");
							log4jParamters_tDBOutput_3.append("USE_FIELD_OPTIONS" + " = " + "false");
							log4jParamters_tDBOutput_3.append(" | ");
							log4jParamters_tDBOutput_3.append("USE_HINT_OPTIONS" + " = " + "false");
							log4jParamters_tDBOutput_3.append(" | ");
							log4jParamters_tDBOutput_3.append("ENABLE_DEBUG_MODE" + " = " + "false");
							log4jParamters_tDBOutput_3.append(" | ");
							log4jParamters_tDBOutput_3.append("SUPPORT_NULL_WHERE" + " = " + "false");
							log4jParamters_tDBOutput_3.append(" | ");
							log4jParamters_tDBOutput_3.append("UNIFIED_COMPONENTS" + " = " + "tMysqlOutput");
							log4jParamters_tDBOutput_3.append(" | ");
							if (log.isDebugEnabled())
								log.debug("tDBOutput_3 - " + (log4jParamters_tDBOutput_3));
						}
					}
					new BytesLimit65535_tDBOutput_3().limitLog4jByte();
				}

				int updateKeyCount_tDBOutput_3 = 1;
				if (updateKeyCount_tDBOutput_3 < 1) {
					throw new RuntimeException("For update, Schema must have a key");
				} else if (updateKeyCount_tDBOutput_3 == 89 && true) {
					log.warn("For update, every Schema column can not be a key");
				}

				int nb_line_tDBOutput_3 = 0;
				int nb_line_update_tDBOutput_3 = 0;
				int nb_line_inserted_tDBOutput_3 = 0;
				int nb_line_deleted_tDBOutput_3 = 0;
				int nb_line_rejected_tDBOutput_3 = 0;

				int deletedCount_tDBOutput_3 = 0;
				int updatedCount_tDBOutput_3 = 0;
				int insertedCount_tDBOutput_3 = 0;
				int rowsToCommitCount_tDBOutput_3 = 0;
				int rejectedCount_tDBOutput_3 = 0;

				String tableName_tDBOutput_3 = "Midfielders";
				boolean whetherReject_tDBOutput_3 = false;

				java.util.Calendar calendar_tDBOutput_3 = java.util.Calendar.getInstance();
				calendar_tDBOutput_3.set(1, 0, 1, 0, 0, 0);
				long year1_tDBOutput_3 = calendar_tDBOutput_3.getTime().getTime();
				calendar_tDBOutput_3.set(10000, 0, 1, 0, 0, 0);
				long year10000_tDBOutput_3 = calendar_tDBOutput_3.getTime().getTime();
				long date_tDBOutput_3;

				java.sql.Connection conn_tDBOutput_3 = null;
				conn_tDBOutput_3 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				if (log.isDebugEnabled())
					log.debug("tDBOutput_3 - " + ("Uses an existing connection with username '")
							+ (conn_tDBOutput_3.getMetaData().getUserName()) + ("'. Connection URL: ")
							+ (conn_tDBOutput_3.getMetaData().getURL()) + ("."));
				if (log.isDebugEnabled())
					log.debug("tDBOutput_3 - " + ("Connection is set auto commit to '")
							+ (conn_tDBOutput_3.getAutoCommit()) + ("'."));

				int count_tDBOutput_3 = 0;

				java.sql.DatabaseMetaData dbMetaData_tDBOutput_3 = conn_tDBOutput_3.getMetaData();
				java.sql.ResultSet rsTable_tDBOutput_3 = dbMetaData_tDBOutput_3.getTables("talend", null, null,
						new String[] { "TABLE" });
				boolean whetherExist_tDBOutput_3 = false;
				while (rsTable_tDBOutput_3.next()) {
					String table_tDBOutput_3 = rsTable_tDBOutput_3.getString("TABLE_NAME");
					if (table_tDBOutput_3.equalsIgnoreCase("Midfielders")) {
						whetherExist_tDBOutput_3 = true;
						break;
					}
				}
				if (!whetherExist_tDBOutput_3) {
					try (java.sql.Statement stmtCreate_tDBOutput_3 = conn_tDBOutput_3.createStatement()) {
						if (log.isDebugEnabled())
							log.debug(
									"tDBOutput_3 - " + ("Creating") + (" table '") + (tableName_tDBOutput_3) + ("'."));
						stmtCreate_tDBOutput_3.execute("CREATE TABLE `" + tableName_tDBOutput_3
								+ "`(`ID` INT(5)  ,`Name` VARCHAR(17)  ,`Age` INT(2)  ,`Photo` VARCHAR(45)  ,`Nationality` VARCHAR(19)  ,`Flag` VARCHAR(35)  ,`Overall` INT(2)  ,`Potential` INT(2)  ,`Club` VARCHAR(23)  ,`Club_Logo` VARCHAR(47)  ,`Value` VARCHAR(8)  ,`Wage` VARCHAR(7)  ,`Special` INT(4)  ,`Preferred_Foot` VARCHAR(5)  ,`International_Reputation` INT(1)  ,`Weak_Foot` INT(1)  ,`Skill_Moves` INT(1)  ,`Work_Rate` VARCHAR(14)  ,`Body_Type` VARCHAR(10)  ,`Real_Face` VARCHAR(3)  ,`Position` VARCHAR(3)  ,`Jersey_Number` INT(2)  ,`Joined` VARCHAR(7)  ,`Loaned_From` VARCHAR(6)  ,`Contract_Valid_Until` VARCHAR(0)  ,`Height` INT(4)  ,`Weight` VARCHAR(4)  ,`LS` VARCHAR(6)  ,`ST` VARCHAR(4)  ,`RS` VARCHAR(4)  ,`LW` VARCHAR(4)  ,`LF` VARCHAR(4)  ,`CF` VARCHAR(4)  ,`RF` VARCHAR(4)  ,`RW` VARCHAR(4)  ,`LAM` VARCHAR(4)  ,`CAM` VARCHAR(4)  ,`RAM` VARCHAR(4)  ,`LM` VARCHAR(4)  ,`LCM` VARCHAR(4)  ,`CM` VARCHAR(4)  ,`RCM` VARCHAR(4)  ,`RM` VARCHAR(4)  ,`LWB` VARCHAR(4)  ,`LDM` VARCHAR(4)  ,`CDM` VARCHAR(4)  ,`RDM` VARCHAR(4)  ,`RWB` VARCHAR(4)  ,`LB` VARCHAR(4)  ,`LCB` VARCHAR(4)  ,`CB` VARCHAR(4)  ,`RCB` VARCHAR(4)  ,`RB` VARCHAR(4)  ,`Crossing` VARCHAR(4)  ,`Finishing` INT(2)  ,`HeadingAccuracy` INT(2)  ,`ShortPassing` INT(2)  ,`Volleys` INT(2)  ,`Dribbling` INT(2)  ,`Curve` INT(2)  ,`FKAccuracy` INT(2)  ,`LongPassing` INT(2)  ,`BallControl` INT(2)  ,`Acceleration` INT(2)  ,`SprintSpeed` INT(2)  ,`Agility` INT(2)  ,`Reactions` INT(2)  ,`Balance` INT(2)  ,`ShotPower` INT(2)  ,`Jumping` INT(2)  ,`Stamina` INT(2)  ,`Strength` INT(2)  ,`LongShots` INT(2)  ,`Aggression` INT(2)  ,`Interceptions` INT(2)  ,`Positioning` INT(2)  ,`Vision` INT(2)  ,`Penalties` INT(2)  ,`Composure` INT(2)  ,`Marking` INT(2)  ,`StandingTackle` INT(2)  ,`SlidingTackle` INT(2)  ,`GKDiving` INT(2)  ,`GKHandling` INT(2)  ,`GKKicking` INT(2)  ,`GKPositioning` INT(2)  ,`GKReflexes` INT(2)  ,`Release_Clause` INT(2)  ,`Column88` VARCHAR(9)  ,primary key(`ID`))");
						if (log.isDebugEnabled())
							log.debug("tDBOutput_3 - " + ("Create") + (" table '") + (tableName_tDBOutput_3)
									+ ("' has succeeded."));
					}
				}
				java.sql.PreparedStatement pstmt_tDBOutput_3 = conn_tDBOutput_3
						.prepareStatement("SELECT COUNT(1) FROM `" + "Midfielders" + "` WHERE `ID` = ?");
				resourceMap.put("pstmt_tDBOutput_3", pstmt_tDBOutput_3);
				String insert_tDBOutput_3 = "INSERT INTO `" + "Midfielders"
						+ "` (`ID`,`Name`,`Age`,`Photo`,`Nationality`,`Flag`,`Overall`,`Potential`,`Club`,`Club_Logo`,`Value`,`Wage`,`Special`,`Preferred_Foot`,`International_Reputation`,`Weak_Foot`,`Skill_Moves`,`Work_Rate`,`Body_Type`,`Real_Face`,`Position`,`Jersey_Number`,`Joined`,`Loaned_From`,`Contract_Valid_Until`,`Height`,`Weight`,`LS`,`ST`,`RS`,`LW`,`LF`,`CF`,`RF`,`RW`,`LAM`,`CAM`,`RAM`,`LM`,`LCM`,`CM`,`RCM`,`RM`,`LWB`,`LDM`,`CDM`,`RDM`,`RWB`,`LB`,`LCB`,`CB`,`RCB`,`RB`,`Crossing`,`Finishing`,`HeadingAccuracy`,`ShortPassing`,`Volleys`,`Dribbling`,`Curve`,`FKAccuracy`,`LongPassing`,`BallControl`,`Acceleration`,`SprintSpeed`,`Agility`,`Reactions`,`Balance`,`ShotPower`,`Jumping`,`Stamina`,`Strength`,`LongShots`,`Aggression`,`Interceptions`,`Positioning`,`Vision`,`Penalties`,`Composure`,`Marking`,`StandingTackle`,`SlidingTackle`,`GKDiving`,`GKHandling`,`GKKicking`,`GKPositioning`,`GKReflexes`,`Release_Clause`,`Column88`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmtInsert_tDBOutput_3 = conn_tDBOutput_3
						.prepareStatement(insert_tDBOutput_3);
				resourceMap.put("pstmtInsert_tDBOutput_3", pstmtInsert_tDBOutput_3);
				String update_tDBOutput_3 = "UPDATE `" + "Midfielders"
						+ "` SET `Name` = ?,`Age` = ?,`Photo` = ?,`Nationality` = ?,`Flag` = ?,`Overall` = ?,`Potential` = ?,`Club` = ?,`Club_Logo` = ?,`Value` = ?,`Wage` = ?,`Special` = ?,`Preferred_Foot` = ?,`International_Reputation` = ?,`Weak_Foot` = ?,`Skill_Moves` = ?,`Work_Rate` = ?,`Body_Type` = ?,`Real_Face` = ?,`Position` = ?,`Jersey_Number` = ?,`Joined` = ?,`Loaned_From` = ?,`Contract_Valid_Until` = ?,`Height` = ?,`Weight` = ?,`LS` = ?,`ST` = ?,`RS` = ?,`LW` = ?,`LF` = ?,`CF` = ?,`RF` = ?,`RW` = ?,`LAM` = ?,`CAM` = ?,`RAM` = ?,`LM` = ?,`LCM` = ?,`CM` = ?,`RCM` = ?,`RM` = ?,`LWB` = ?,`LDM` = ?,`CDM` = ?,`RDM` = ?,`RWB` = ?,`LB` = ?,`LCB` = ?,`CB` = ?,`RCB` = ?,`RB` = ?,`Crossing` = ?,`Finishing` = ?,`HeadingAccuracy` = ?,`ShortPassing` = ?,`Volleys` = ?,`Dribbling` = ?,`Curve` = ?,`FKAccuracy` = ?,`LongPassing` = ?,`BallControl` = ?,`Acceleration` = ?,`SprintSpeed` = ?,`Agility` = ?,`Reactions` = ?,`Balance` = ?,`ShotPower` = ?,`Jumping` = ?,`Stamina` = ?,`Strength` = ?,`LongShots` = ?,`Aggression` = ?,`Interceptions` = ?,`Positioning` = ?,`Vision` = ?,`Penalties` = ?,`Composure` = ?,`Marking` = ?,`StandingTackle` = ?,`SlidingTackle` = ?,`GKDiving` = ?,`GKHandling` = ?,`GKKicking` = ?,`GKPositioning` = ?,`GKReflexes` = ?,`Release_Clause` = ?,`Column88` = ? WHERE `ID` = ?";

				java.sql.PreparedStatement pstmtUpdate_tDBOutput_3 = conn_tDBOutput_3
						.prepareStatement(update_tDBOutput_3);
				resourceMap.put("pstmtUpdate_tDBOutput_3", pstmtUpdate_tDBOutput_3);

				/**
				 * [tDBOutput_3 begin ] stop
				 */

				/**
				 * [tFilterRow_3 begin ] start
				 */

				ok_Hash.put("tFilterRow_3", false);
				start_Hash.put("tFilterRow_3", System.currentTimeMillis());

				currentComponent = "tFilterRow_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row4");
				}

				int tos_count_tFilterRow_3 = 0;

				if (log.isDebugEnabled())
					log.debug("tFilterRow_3 - " + ("Start to work."));
				if (log.isDebugEnabled()) {
					class BytesLimit65535_tFilterRow_3 {
						public void limitLog4jByte() throws Exception {
							StringBuilder log4jParamters_tFilterRow_3 = new StringBuilder();
							log4jParamters_tFilterRow_3.append("Parameters:");
							log4jParamters_tFilterRow_3.append("LOGICAL_OP" + " = " + "||");
							log4jParamters_tFilterRow_3.append(" | ");
							log4jParamters_tFilterRow_3.append("CONDITIONS" + " = " + "[{OPERATOR=" + ("==")
									+ ", RVALUE=" + ("\"CM\"") + ", INPUT_COLUMN=" + ("Position") + ", FUNCTION="
									+ ("$source == null? false : $source.matches($target) $operator true")
									+ "}, {OPERATOR=" + ("==") + ", RVALUE=" + ("\"DM\"") + ", INPUT_COLUMN="
									+ ("Position") + ", FUNCTION="
									+ ("$source == null? false : $source.matches($target) $operator true")
									+ "}, {OPERATOR=" + ("==") + ", RVALUE=" + ("\"CAM\"") + ", INPUT_COLUMN="
									+ ("Position") + ", FUNCTION="
									+ ("$source == null? false : $source.matches($target) $operator true")
									+ "}, {OPERATOR=" + ("==") + ", RVALUE=" + ("\"LM\"") + ", INPUT_COLUMN="
									+ ("Position") + ", FUNCTION="
									+ ("$source == null? false : $source.matches($target) $operator true")
									+ "}, {OPERATOR=" + ("==") + ", RVALUE=" + ("\"RM\"") + ", INPUT_COLUMN="
									+ ("Position") + ", FUNCTION="
									+ ("$source == null? false : $source.matches($target) $operator true")
									+ "}, {OPERATOR=" + ("==") + ", RVALUE=" + ("\"LAM\"") + ", INPUT_COLUMN="
									+ ("Position") + ", FUNCTION="
									+ ("$source == null? false : $source.matches($target) $operator true")
									+ "}, {OPERATOR=" + ("==") + ", RVALUE=" + ("\"RAM\"") + ", INPUT_COLUMN="
									+ ("Position") + ", FUNCTION="
									+ ("$source == null? false : $source.matches($target) $operator true")
									+ "}, {OPERATOR=" + ("==") + ", RVALUE=" + ("\"LCM\"") + ", INPUT_COLUMN="
									+ ("Position") + ", FUNCTION="
									+ ("$source == null? false : $source.matches($target) $operator true")
									+ "}, {OPERATOR=" + ("==") + ", RVALUE=" + ("\"RCM\"") + ", INPUT_COLUMN="
									+ ("Position") + ", FUNCTION="
									+ ("$source == null? false : $source.matches($target) $operator true")
									+ "}, {OPERATOR=" + ("==") + ", RVALUE=" + ("\"LDM\"") + ", INPUT_COLUMN="
									+ ("Position") + ", FUNCTION="
									+ ("$source == null? false : $source.matches($target) $operator true")
									+ "}, {OPERATOR=" + ("==") + ", RVALUE=" + ("\"RDM\"") + ", INPUT_COLUMN="
									+ ("Position") + ", FUNCTION="
									+ ("$source == null? false : $source.matches($target) $operator true") + "}]");
							log4jParamters_tFilterRow_3.append(" | ");
							log4jParamters_tFilterRow_3.append("USE_ADVANCED" + " = " + "false");
							log4jParamters_tFilterRow_3.append(" | ");
							if (log.isDebugEnabled())
								log.debug("tFilterRow_3 - " + (log4jParamters_tFilterRow_3));
						}
					}
					new BytesLimit65535_tFilterRow_3().limitLog4jByte();
				}
				int nb_line_tFilterRow_3 = 0;
				int nb_line_ok_tFilterRow_3 = 0;
				int nb_line_reject_tFilterRow_3 = 0;

				class Operator_tFilterRow_3 {
					private String sErrorMsg = "";
					private boolean bMatchFlag = true;
					private String sUnionFlag = "&&";

					public Operator_tFilterRow_3(String unionFlag) {
						sUnionFlag = unionFlag;
						bMatchFlag = "||".equals(unionFlag) ? false : true;
					}

					public String getErrorMsg() {
						if (sErrorMsg != null && sErrorMsg.length() > 1)
							return sErrorMsg.substring(1);
						else
							return null;
					}

					public boolean getMatchFlag() {
						return bMatchFlag;
					}

					public void matches(boolean partMatched, String reason) {
						// no need to care about the next judgement
						if ("||".equals(sUnionFlag) && bMatchFlag) {
							return;
						}

						if (!partMatched) {
							sErrorMsg += "|" + reason;
						}

						if ("||".equals(sUnionFlag))
							bMatchFlag = bMatchFlag || partMatched;
						else
							bMatchFlag = bMatchFlag && partMatched;
					}
				}

				/**
				 * [tFilterRow_3 begin ] stop
				 */

				/**
				 * [tDBOutput_4 begin ] start
				 */

				ok_Hash.put("tDBOutput_4", false);
				start_Hash.put("tDBOutput_4", System.currentTimeMillis());

				currentComponent = "tDBOutput_4";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row9");
				}

				int tos_count_tDBOutput_4 = 0;

				if (log.isDebugEnabled())
					log.debug("tDBOutput_4 - " + ("Start to work."));
				if (log.isDebugEnabled()) {
					class BytesLimit65535_tDBOutput_4 {
						public void limitLog4jByte() throws Exception {
							StringBuilder log4jParamters_tDBOutput_4 = new StringBuilder();
							log4jParamters_tDBOutput_4.append("Parameters:");
							log4jParamters_tDBOutput_4.append("USE_EXISTING_CONNECTION" + " = " + "true");
							log4jParamters_tDBOutput_4.append(" | ");
							log4jParamters_tDBOutput_4.append("CONNECTION" + " = " + "tDBConnection_1");
							log4jParamters_tDBOutput_4.append(" | ");
							log4jParamters_tDBOutput_4.append("TABLE" + " = " + "\"Attackers\"");
							log4jParamters_tDBOutput_4.append(" | ");
							log4jParamters_tDBOutput_4.append("TABLE_ACTION" + " = " + "CREATE_IF_NOT_EXISTS");
							log4jParamters_tDBOutput_4.append(" | ");
							log4jParamters_tDBOutput_4.append("DATA_ACTION" + " = " + "INSERT_OR_UPDATE");
							log4jParamters_tDBOutput_4.append(" | ");
							log4jParamters_tDBOutput_4.append("DIE_ON_ERROR" + " = " + "false");
							log4jParamters_tDBOutput_4.append(" | ");
							log4jParamters_tDBOutput_4.append("ADD_COLS" + " = " + "[]");
							log4jParamters_tDBOutput_4.append(" | ");
							log4jParamters_tDBOutput_4.append("USE_FIELD_OPTIONS" + " = " + "false");
							log4jParamters_tDBOutput_4.append(" | ");
							log4jParamters_tDBOutput_4.append("USE_HINT_OPTIONS" + " = " + "false");
							log4jParamters_tDBOutput_4.append(" | ");
							log4jParamters_tDBOutput_4.append("ENABLE_DEBUG_MODE" + " = " + "false");
							log4jParamters_tDBOutput_4.append(" | ");
							log4jParamters_tDBOutput_4.append("SUPPORT_NULL_WHERE" + " = " + "false");
							log4jParamters_tDBOutput_4.append(" | ");
							log4jParamters_tDBOutput_4.append("UNIFIED_COMPONENTS" + " = " + "tMysqlOutput");
							log4jParamters_tDBOutput_4.append(" | ");
							if (log.isDebugEnabled())
								log.debug("tDBOutput_4 - " + (log4jParamters_tDBOutput_4));
						}
					}
					new BytesLimit65535_tDBOutput_4().limitLog4jByte();
				}

				int updateKeyCount_tDBOutput_4 = 1;
				if (updateKeyCount_tDBOutput_4 < 1) {
					throw new RuntimeException("For update, Schema must have a key");
				} else if (updateKeyCount_tDBOutput_4 == 89 && true) {
					log.warn("For update, every Schema column can not be a key");
				}

				int nb_line_tDBOutput_4 = 0;
				int nb_line_update_tDBOutput_4 = 0;
				int nb_line_inserted_tDBOutput_4 = 0;
				int nb_line_deleted_tDBOutput_4 = 0;
				int nb_line_rejected_tDBOutput_4 = 0;

				int deletedCount_tDBOutput_4 = 0;
				int updatedCount_tDBOutput_4 = 0;
				int insertedCount_tDBOutput_4 = 0;
				int rowsToCommitCount_tDBOutput_4 = 0;
				int rejectedCount_tDBOutput_4 = 0;

				String tableName_tDBOutput_4 = "Attackers";
				boolean whetherReject_tDBOutput_4 = false;

				java.util.Calendar calendar_tDBOutput_4 = java.util.Calendar.getInstance();
				calendar_tDBOutput_4.set(1, 0, 1, 0, 0, 0);
				long year1_tDBOutput_4 = calendar_tDBOutput_4.getTime().getTime();
				calendar_tDBOutput_4.set(10000, 0, 1, 0, 0, 0);
				long year10000_tDBOutput_4 = calendar_tDBOutput_4.getTime().getTime();
				long date_tDBOutput_4;

				java.sql.Connection conn_tDBOutput_4 = null;
				conn_tDBOutput_4 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				if (log.isDebugEnabled())
					log.debug("tDBOutput_4 - " + ("Uses an existing connection with username '")
							+ (conn_tDBOutput_4.getMetaData().getUserName()) + ("'. Connection URL: ")
							+ (conn_tDBOutput_4.getMetaData().getURL()) + ("."));
				if (log.isDebugEnabled())
					log.debug("tDBOutput_4 - " + ("Connection is set auto commit to '")
							+ (conn_tDBOutput_4.getAutoCommit()) + ("'."));

				int count_tDBOutput_4 = 0;

				java.sql.DatabaseMetaData dbMetaData_tDBOutput_4 = conn_tDBOutput_4.getMetaData();
				java.sql.ResultSet rsTable_tDBOutput_4 = dbMetaData_tDBOutput_4.getTables("talend", null, null,
						new String[] { "TABLE" });
				boolean whetherExist_tDBOutput_4 = false;
				while (rsTable_tDBOutput_4.next()) {
					String table_tDBOutput_4 = rsTable_tDBOutput_4.getString("TABLE_NAME");
					if (table_tDBOutput_4.equalsIgnoreCase("Attackers")) {
						whetherExist_tDBOutput_4 = true;
						break;
					}
				}
				if (!whetherExist_tDBOutput_4) {
					try (java.sql.Statement stmtCreate_tDBOutput_4 = conn_tDBOutput_4.createStatement()) {
						if (log.isDebugEnabled())
							log.debug(
									"tDBOutput_4 - " + ("Creating") + (" table '") + (tableName_tDBOutput_4) + ("'."));
						stmtCreate_tDBOutput_4.execute("CREATE TABLE `" + tableName_tDBOutput_4
								+ "`(`ID` INT(5)  ,`Name` VARCHAR(17)  ,`Age` INT(2)  ,`Photo` VARCHAR(45)  ,`Nationality` VARCHAR(19)  ,`Flag` VARCHAR(35)  ,`Overall` INT(2)  ,`Potential` INT(2)  ,`Club` VARCHAR(23)  ,`Club_Logo` VARCHAR(47)  ,`Value` VARCHAR(8)  ,`Wage` VARCHAR(7)  ,`Special` INT(4)  ,`Preferred_Foot` VARCHAR(5)  ,`International_Reputation` INT(1)  ,`Weak_Foot` INT(1)  ,`Skill_Moves` INT(1)  ,`Work_Rate` VARCHAR(14)  ,`Body_Type` VARCHAR(10)  ,`Real_Face` VARCHAR(3)  ,`Position` VARCHAR(3)  ,`Jersey_Number` INT(2)  ,`Joined` VARCHAR(7)  ,`Loaned_From` VARCHAR(6)  ,`Contract_Valid_Until` VARCHAR(0)  ,`Height` INT(4)  ,`Weight` VARCHAR(4)  ,`LS` VARCHAR(6)  ,`ST` VARCHAR(4)  ,`RS` VARCHAR(4)  ,`LW` VARCHAR(4)  ,`LF` VARCHAR(4)  ,`CF` VARCHAR(4)  ,`RF` VARCHAR(4)  ,`RW` VARCHAR(4)  ,`LAM` VARCHAR(4)  ,`CAM` VARCHAR(4)  ,`RAM` VARCHAR(4)  ,`LM` VARCHAR(4)  ,`LCM` VARCHAR(4)  ,`CM` VARCHAR(4)  ,`RCM` VARCHAR(4)  ,`RM` VARCHAR(4)  ,`LWB` VARCHAR(4)  ,`LDM` VARCHAR(4)  ,`CDM` VARCHAR(4)  ,`RDM` VARCHAR(4)  ,`RWB` VARCHAR(4)  ,`LB` VARCHAR(4)  ,`LCB` VARCHAR(4)  ,`CB` VARCHAR(4)  ,`RCB` VARCHAR(4)  ,`RB` VARCHAR(4)  ,`Crossing` VARCHAR(4)  ,`Finishing` INT(2)  ,`HeadingAccuracy` INT(2)  ,`ShortPassing` INT(2)  ,`Volleys` INT(2)  ,`Dribbling` INT(2)  ,`Curve` INT(2)  ,`FKAccuracy` INT(2)  ,`LongPassing` INT(2)  ,`BallControl` INT(2)  ,`Acceleration` INT(2)  ,`SprintSpeed` INT(2)  ,`Agility` INT(2)  ,`Reactions` INT(2)  ,`Balance` INT(2)  ,`ShotPower` INT(2)  ,`Jumping` INT(2)  ,`Stamina` INT(2)  ,`Strength` INT(2)  ,`LongShots` INT(2)  ,`Aggression` INT(2)  ,`Interceptions` INT(2)  ,`Positioning` INT(2)  ,`Vision` INT(2)  ,`Penalties` INT(2)  ,`Composure` INT(2)  ,`Marking` INT(2)  ,`StandingTackle` INT(2)  ,`SlidingTackle` INT(2)  ,`GKDiving` INT(2)  ,`GKHandling` INT(2)  ,`GKKicking` INT(2)  ,`GKPositioning` INT(2)  ,`GKReflexes` INT(2)  ,`Release_Clause` INT(2)  ,`Column88` VARCHAR(9)  ,primary key(`ID`))");
						if (log.isDebugEnabled())
							log.debug("tDBOutput_4 - " + ("Create") + (" table '") + (tableName_tDBOutput_4)
									+ ("' has succeeded."));
					}
				}
				java.sql.PreparedStatement pstmt_tDBOutput_4 = conn_tDBOutput_4
						.prepareStatement("SELECT COUNT(1) FROM `" + "Attackers" + "` WHERE `ID` = ?");
				resourceMap.put("pstmt_tDBOutput_4", pstmt_tDBOutput_4);
				String insert_tDBOutput_4 = "INSERT INTO `" + "Attackers"
						+ "` (`ID`,`Name`,`Age`,`Photo`,`Nationality`,`Flag`,`Overall`,`Potential`,`Club`,`Club_Logo`,`Value`,`Wage`,`Special`,`Preferred_Foot`,`International_Reputation`,`Weak_Foot`,`Skill_Moves`,`Work_Rate`,`Body_Type`,`Real_Face`,`Position`,`Jersey_Number`,`Joined`,`Loaned_From`,`Contract_Valid_Until`,`Height`,`Weight`,`LS`,`ST`,`RS`,`LW`,`LF`,`CF`,`RF`,`RW`,`LAM`,`CAM`,`RAM`,`LM`,`LCM`,`CM`,`RCM`,`RM`,`LWB`,`LDM`,`CDM`,`RDM`,`RWB`,`LB`,`LCB`,`CB`,`RCB`,`RB`,`Crossing`,`Finishing`,`HeadingAccuracy`,`ShortPassing`,`Volleys`,`Dribbling`,`Curve`,`FKAccuracy`,`LongPassing`,`BallControl`,`Acceleration`,`SprintSpeed`,`Agility`,`Reactions`,`Balance`,`ShotPower`,`Jumping`,`Stamina`,`Strength`,`LongShots`,`Aggression`,`Interceptions`,`Positioning`,`Vision`,`Penalties`,`Composure`,`Marking`,`StandingTackle`,`SlidingTackle`,`GKDiving`,`GKHandling`,`GKKicking`,`GKPositioning`,`GKReflexes`,`Release_Clause`,`Column88`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmtInsert_tDBOutput_4 = conn_tDBOutput_4
						.prepareStatement(insert_tDBOutput_4);
				resourceMap.put("pstmtInsert_tDBOutput_4", pstmtInsert_tDBOutput_4);
				String update_tDBOutput_4 = "UPDATE `" + "Attackers"
						+ "` SET `Name` = ?,`Age` = ?,`Photo` = ?,`Nationality` = ?,`Flag` = ?,`Overall` = ?,`Potential` = ?,`Club` = ?,`Club_Logo` = ?,`Value` = ?,`Wage` = ?,`Special` = ?,`Preferred_Foot` = ?,`International_Reputation` = ?,`Weak_Foot` = ?,`Skill_Moves` = ?,`Work_Rate` = ?,`Body_Type` = ?,`Real_Face` = ?,`Position` = ?,`Jersey_Number` = ?,`Joined` = ?,`Loaned_From` = ?,`Contract_Valid_Until` = ?,`Height` = ?,`Weight` = ?,`LS` = ?,`ST` = ?,`RS` = ?,`LW` = ?,`LF` = ?,`CF` = ?,`RF` = ?,`RW` = ?,`LAM` = ?,`CAM` = ?,`RAM` = ?,`LM` = ?,`LCM` = ?,`CM` = ?,`RCM` = ?,`RM` = ?,`LWB` = ?,`LDM` = ?,`CDM` = ?,`RDM` = ?,`RWB` = ?,`LB` = ?,`LCB` = ?,`CB` = ?,`RCB` = ?,`RB` = ?,`Crossing` = ?,`Finishing` = ?,`HeadingAccuracy` = ?,`ShortPassing` = ?,`Volleys` = ?,`Dribbling` = ?,`Curve` = ?,`FKAccuracy` = ?,`LongPassing` = ?,`BallControl` = ?,`Acceleration` = ?,`SprintSpeed` = ?,`Agility` = ?,`Reactions` = ?,`Balance` = ?,`ShotPower` = ?,`Jumping` = ?,`Stamina` = ?,`Strength` = ?,`LongShots` = ?,`Aggression` = ?,`Interceptions` = ?,`Positioning` = ?,`Vision` = ?,`Penalties` = ?,`Composure` = ?,`Marking` = ?,`StandingTackle` = ?,`SlidingTackle` = ?,`GKDiving` = ?,`GKHandling` = ?,`GKKicking` = ?,`GKPositioning` = ?,`GKReflexes` = ?,`Release_Clause` = ?,`Column88` = ? WHERE `ID` = ?";

				java.sql.PreparedStatement pstmtUpdate_tDBOutput_4 = conn_tDBOutput_4
						.prepareStatement(update_tDBOutput_4);
				resourceMap.put("pstmtUpdate_tDBOutput_4", pstmtUpdate_tDBOutput_4);

				/**
				 * [tDBOutput_4 begin ] stop
				 */

				/**
				 * [tFilterRow_4 begin ] start
				 */

				ok_Hash.put("tFilterRow_4", false);
				start_Hash.put("tFilterRow_4", System.currentTimeMillis());

				currentComponent = "tFilterRow_4";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row5");
				}

				int tos_count_tFilterRow_4 = 0;

				if (log.isDebugEnabled())
					log.debug("tFilterRow_4 - " + ("Start to work."));
				if (log.isDebugEnabled()) {
					class BytesLimit65535_tFilterRow_4 {
						public void limitLog4jByte() throws Exception {
							StringBuilder log4jParamters_tFilterRow_4 = new StringBuilder();
							log4jParamters_tFilterRow_4.append("Parameters:");
							log4jParamters_tFilterRow_4.append("LOGICAL_OP" + " = " + "||");
							log4jParamters_tFilterRow_4.append(" | ");
							log4jParamters_tFilterRow_4.append("CONDITIONS" + " = " + "[{OPERATOR=" + ("==")
									+ ", RVALUE=" + ("\"CF\"") + ", INPUT_COLUMN=" + ("Position") + ", FUNCTION="
									+ ("$source == null? false : $source.matches($target) $operator true")
									+ "}, {OPERATOR=" + ("==") + ", RVALUE=" + ("\"ST\"") + ", INPUT_COLUMN="
									+ ("Position") + ", FUNCTION="
									+ ("$source == null? false : $source.matches($target) $operator true")
									+ "}, {OPERATOR=" + ("==") + ", RVALUE=" + ("\"LW\"") + ", INPUT_COLUMN="
									+ ("Position") + ", FUNCTION="
									+ ("$source == null? false : $source.matches($target) $operator true")
									+ "}, {OPERATOR=" + ("==") + ", RVALUE=" + ("\"RW\"") + ", INPUT_COLUMN="
									+ ("Position") + ", FUNCTION="
									+ ("$source == null? false : $source.matches($target) $operator true")
									+ "}, {OPERATOR=" + ("==") + ", RVALUE=" + ("\"LF\"") + ", INPUT_COLUMN="
									+ ("Position") + ", FUNCTION="
									+ ("$source == null? false : $source.matches($target) $operator true")
									+ "}, {OPERATOR=" + ("==") + ", RVALUE=" + ("\"LS\"") + ", INPUT_COLUMN="
									+ ("Position") + ", FUNCTION="
									+ ("$source == null? false : $source.matches($target) $operator true")
									+ "}, {OPERATOR=" + ("==") + ", RVALUE=" + ("\"RF\"") + ", INPUT_COLUMN="
									+ ("Position") + ", FUNCTION="
									+ ("$source == null? false : $source.matches($target) $operator true")
									+ "}, {OPERATOR=" + ("==") + ", RVALUE=" + ("\"RS\"") + ", INPUT_COLUMN="
									+ ("Position") + ", FUNCTION="
									+ ("$source == null? false : $source.matches($target) $operator true") + "}]");
							log4jParamters_tFilterRow_4.append(" | ");
							log4jParamters_tFilterRow_4.append("USE_ADVANCED" + " = " + "false");
							log4jParamters_tFilterRow_4.append(" | ");
							if (log.isDebugEnabled())
								log.debug("tFilterRow_4 - " + (log4jParamters_tFilterRow_4));
						}
					}
					new BytesLimit65535_tFilterRow_4().limitLog4jByte();
				}
				int nb_line_tFilterRow_4 = 0;
				int nb_line_ok_tFilterRow_4 = 0;
				int nb_line_reject_tFilterRow_4 = 0;

				class Operator_tFilterRow_4 {
					private String sErrorMsg = "";
					private boolean bMatchFlag = true;
					private String sUnionFlag = "&&";

					public Operator_tFilterRow_4(String unionFlag) {
						sUnionFlag = unionFlag;
						bMatchFlag = "||".equals(unionFlag) ? false : true;
					}

					public String getErrorMsg() {
						if (sErrorMsg != null && sErrorMsg.length() > 1)
							return sErrorMsg.substring(1);
						else
							return null;
					}

					public boolean getMatchFlag() {
						return bMatchFlag;
					}

					public void matches(boolean partMatched, String reason) {
						// no need to care about the next judgement
						if ("||".equals(sUnionFlag) && bMatchFlag) {
							return;
						}

						if (!partMatched) {
							sErrorMsg += "|" + reason;
						}

						if ("||".equals(sUnionFlag))
							bMatchFlag = bMatchFlag || partMatched;
						else
							bMatchFlag = bMatchFlag && partMatched;
					}
				}

				/**
				 * [tFilterRow_4 begin ] stop
				 */

				/**
				 * [tReplicate_1 begin ] start
				 */

				ok_Hash.put("tReplicate_1", false);
				start_Hash.put("tReplicate_1", System.currentTimeMillis());

				currentComponent = "tReplicate_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
				}

				int tos_count_tReplicate_1 = 0;

				if (log.isDebugEnabled())
					log.debug("tReplicate_1 - " + ("Start to work."));
				if (log.isDebugEnabled()) {
					class BytesLimit65535_tReplicate_1 {
						public void limitLog4jByte() throws Exception {
							StringBuilder log4jParamters_tReplicate_1 = new StringBuilder();
							log4jParamters_tReplicate_1.append("Parameters:");
							if (log.isDebugEnabled())
								log.debug("tReplicate_1 - " + (log4jParamters_tReplicate_1));
						}
					}
					new BytesLimit65535_tReplicate_1().limitLog4jByte();
				}

				/**
				 * [tReplicate_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				if (log.isDebugEnabled())
					log.debug("tFileInputDelimited_1 - " + ("Start to work."));
				if (log.isDebugEnabled()) {
					class BytesLimit65535_tFileInputDelimited_1 {
						public void limitLog4jByte() throws Exception {
							StringBuilder log4jParamters_tFileInputDelimited_1 = new StringBuilder();
							log4jParamters_tFileInputDelimited_1.append("Parameters:");
							log4jParamters_tFileInputDelimited_1
									.append("FILENAME" + " = " + "\"F:/job/Talend/csvfiles/FIFA19-post.csv\"");
							log4jParamters_tFileInputDelimited_1.append(" | ");
							log4jParamters_tFileInputDelimited_1.append("CSV_OPTION" + " = " + "false");
							log4jParamters_tFileInputDelimited_1.append(" | ");
							log4jParamters_tFileInputDelimited_1.append("ROWSEPARATOR" + " = " + "\"\\n\"");
							log4jParamters_tFileInputDelimited_1.append(" | ");
							log4jParamters_tFileInputDelimited_1.append("FIELDSEPARATOR" + " = " + "\",\"");
							log4jParamters_tFileInputDelimited_1.append(" | ");
							log4jParamters_tFileInputDelimited_1.append("HEADER" + " = " + "1");
							log4jParamters_tFileInputDelimited_1.append(" | ");
							log4jParamters_tFileInputDelimited_1.append("FOOTER" + " = " + "0");
							log4jParamters_tFileInputDelimited_1.append(" | ");
							log4jParamters_tFileInputDelimited_1.append("LIMIT" + " = " + "");
							log4jParamters_tFileInputDelimited_1.append(" | ");
							log4jParamters_tFileInputDelimited_1.append("REMOVE_EMPTY_ROW" + " = " + "false");
							log4jParamters_tFileInputDelimited_1.append(" | ");
							log4jParamters_tFileInputDelimited_1.append("UNCOMPRESS" + " = " + "false");
							log4jParamters_tFileInputDelimited_1.append(" | ");
							log4jParamters_tFileInputDelimited_1.append("DIE_ON_ERROR" + " = " + "false");
							log4jParamters_tFileInputDelimited_1.append(" | ");
							log4jParamters_tFileInputDelimited_1.append("ADVANCED_SEPARATOR" + " = " + "false");
							log4jParamters_tFileInputDelimited_1.append(" | ");
							log4jParamters_tFileInputDelimited_1.append("RANDOM" + " = " + "false");
							log4jParamters_tFileInputDelimited_1.append(" | ");
							log4jParamters_tFileInputDelimited_1.append("TRIMALL" + " = " + "false");
							log4jParamters_tFileInputDelimited_1.append(" | ");
							log4jParamters_tFileInputDelimited_1.append("TRIMSELECT" + " = " + "[{TRIM=" + ("false")
									+ ", SCHEMA_COLUMN=" + ("ID") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN="
									+ ("Name") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("Age") + "}, {TRIM="
									+ ("false") + ", SCHEMA_COLUMN=" + ("Photo") + "}, {TRIM=" + ("false")
									+ ", SCHEMA_COLUMN=" + ("Nationality") + "}, {TRIM=" + ("false")
									+ ", SCHEMA_COLUMN=" + ("Flag") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN="
									+ ("Overall") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("Potential")
									+ "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("Club") + "}, {TRIM=" + ("false")
									+ ", SCHEMA_COLUMN=" + ("Club_Logo") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN="
									+ ("Value") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("Wage") + "}, {TRIM="
									+ ("false") + ", SCHEMA_COLUMN=" + ("Special") + "}, {TRIM=" + ("false")
									+ ", SCHEMA_COLUMN=" + ("Preferred_Foot") + "}, {TRIM=" + ("false")
									+ ", SCHEMA_COLUMN=" + ("International_Reputation") + "}, {TRIM=" + ("false")
									+ ", SCHEMA_COLUMN=" + ("Weak_Foot") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN="
									+ ("Skill_Moves") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("Work_Rate")
									+ "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("Body_Type") + "}, {TRIM="
									+ ("false") + ", SCHEMA_COLUMN=" + ("Real_Face") + "}, {TRIM=" + ("false")
									+ ", SCHEMA_COLUMN=" + ("Position") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN="
									+ ("Jersey_Number") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("Joined")
									+ "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("Loaned_From") + "}, {TRIM="
									+ ("false") + ", SCHEMA_COLUMN=" + ("Contract_Valid_Until") + "}, {TRIM="
									+ ("false") + ", SCHEMA_COLUMN=" + ("Height") + "}, {TRIM=" + ("false")
									+ ", SCHEMA_COLUMN=" + ("Weight") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN="
									+ ("LS") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("ST") + "}, {TRIM="
									+ ("false") + ", SCHEMA_COLUMN=" + ("RS") + "}, {TRIM=" + ("false")
									+ ", SCHEMA_COLUMN=" + ("LW") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN="
									+ ("LF") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("CF") + "}, {TRIM="
									+ ("false") + ", SCHEMA_COLUMN=" + ("RF") + "}, {TRIM=" + ("false")
									+ ", SCHEMA_COLUMN=" + ("RW") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN="
									+ ("LAM") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("CAM") + "}, {TRIM="
									+ ("false") + ", SCHEMA_COLUMN=" + ("RAM") + "}, {TRIM=" + ("false")
									+ ", SCHEMA_COLUMN=" + ("LM") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN="
									+ ("LCM") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("CM") + "}, {TRIM="
									+ ("false") + ", SCHEMA_COLUMN=" + ("RCM") + "}, {TRIM=" + ("false")
									+ ", SCHEMA_COLUMN=" + ("RM") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN="
									+ ("LWB") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("LDM") + "}, {TRIM="
									+ ("false") + ", SCHEMA_COLUMN=" + ("CDM") + "}, {TRIM=" + ("false")
									+ ", SCHEMA_COLUMN=" + ("RDM") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN="
									+ ("RWB") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("LB") + "}, {TRIM="
									+ ("false") + ", SCHEMA_COLUMN=" + ("LCB") + "}, {TRIM=" + ("false")
									+ ", SCHEMA_COLUMN=" + ("CB") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN="
									+ ("RCB") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("RB") + "}, {TRIM="
									+ ("false") + ", SCHEMA_COLUMN=" + ("Crossing") + "}, {TRIM=" + ("false")
									+ ", SCHEMA_COLUMN=" + ("Finishing") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN="
									+ ("HeadingAccuracy") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN="
									+ ("ShortPassing") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("Volleys")
									+ "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("Dribbling") + "}, {TRIM="
									+ ("false") + ", SCHEMA_COLUMN=" + ("Curve") + "}, {TRIM=" + ("false")
									+ ", SCHEMA_COLUMN=" + ("FKAccuracy") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN="
									+ ("LongPassing") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("BallControl")
									+ "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("Acceleration") + "}, {TRIM="
									+ ("false") + ", SCHEMA_COLUMN=" + ("SprintSpeed") + "}, {TRIM=" + ("false")
									+ ", SCHEMA_COLUMN=" + ("Agility") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN="
									+ ("Reactions") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("Balance")
									+ "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("ShotPower") + "}, {TRIM="
									+ ("false") + ", SCHEMA_COLUMN=" + ("Jumping") + "}, {TRIM=" + ("false")
									+ ", SCHEMA_COLUMN=" + ("Stamina") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN="
									+ ("Strength") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("LongShots")
									+ "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("Aggression") + "}, {TRIM="
									+ ("false") + ", SCHEMA_COLUMN=" + ("Interceptions") + "}, {TRIM=" + ("false")
									+ ", SCHEMA_COLUMN=" + ("Positioning") + "}, {TRIM=" + ("false")
									+ ", SCHEMA_COLUMN=" + ("Vision") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN="
									+ ("Penalties") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("Composure")
									+ "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("Marking") + "}, {TRIM="
									+ ("false") + ", SCHEMA_COLUMN=" + ("StandingTackle") + "}, {TRIM=" + ("false")
									+ ", SCHEMA_COLUMN=" + ("SlidingTackle") + "}, {TRIM=" + ("false")
									+ ", SCHEMA_COLUMN=" + ("GKDiving") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN="
									+ ("GKHandling") + "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("GKKicking")
									+ "}, {TRIM=" + ("false") + ", SCHEMA_COLUMN=" + ("GKPositioning") + "}, {TRIM="
									+ ("false") + ", SCHEMA_COLUMN=" + ("GKReflexes") + "}, {TRIM=" + ("false")
									+ ", SCHEMA_COLUMN=" + ("Release_Clause") + "}, {TRIM=" + ("false")
									+ ", SCHEMA_COLUMN=" + ("Column88") + "}]");
							log4jParamters_tFileInputDelimited_1.append(" | ");
							log4jParamters_tFileInputDelimited_1.append("CHECK_FIELDS_NUM" + " = " + "false");
							log4jParamters_tFileInputDelimited_1.append(" | ");
							log4jParamters_tFileInputDelimited_1.append("CHECK_DATE" + " = " + "false");
							log4jParamters_tFileInputDelimited_1.append(" | ");
							log4jParamters_tFileInputDelimited_1.append("ENCODING" + " = " + "\"UTF-8\"");
							log4jParamters_tFileInputDelimited_1.append(" | ");
							log4jParamters_tFileInputDelimited_1.append("SPLITRECORD" + " = " + "false");
							log4jParamters_tFileInputDelimited_1.append(" | ");
							log4jParamters_tFileInputDelimited_1.append("ENABLE_DECODE" + " = " + "false");
							log4jParamters_tFileInputDelimited_1.append(" | ");
							if (log.isDebugEnabled())
								log.debug("tFileInputDelimited_1 - " + (log4jParamters_tFileInputDelimited_1));
						}
					}
					new BytesLimit65535_tFileInputDelimited_1().limitLog4jByte();
				}

				final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				int limit_tFileInputDelimited_1 = -1;
				try {

					Object filename_tFileInputDelimited_1 = "F:/job/Talend/csvfiles/FIFA19-post.csv";
					if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
						if (footer_value_tFileInputDelimited_1 > 0 || random_value_tFileInputDelimited_1 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(
								"F:/job/Talend/csvfiles/FIFA19-post.csv", "UTF-8", ",", "\n", false, 1, 0,
								limit_tFileInputDelimited_1, -1, false);
					} catch (java.lang.Exception e) {
						globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE", e.getMessage());

						log.error("tFileInputDelimited_1 - " + e.getMessage());

						System.err.println(e.getMessage());

					}

					log.info("tFileInputDelimited_1 - Retrieving records from the datasource.");

					while (fid_tFileInputDelimited_1 != null && fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();

						row1 = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						row1 = new row1Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_1 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_1 = 0;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.ID = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"ID", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}

							} else {

								row1.ID = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 1;

							row1.Name = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 2;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.Age = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Age", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}

							} else {

								row1.Age = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 3;

							row1.Photo = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 4;

							row1.Nationality = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 5;

							row1.Flag = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 6;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.Overall = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Overall", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.Overall = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 7;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.Potential = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Potential", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.Potential = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 8;

							row1.Club = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 9;

							row1.Club_Logo = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 10;

							row1.Value = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 11;

							row1.Wage = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 12;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.Special = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Special", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.Special = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 13;

							row1.Preferred_Foot = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 14;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.International_Reputation = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"International_Reputation", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.International_Reputation = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 15;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.Weak_Foot = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Weak_Foot", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.Weak_Foot = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 16;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.Skill_Moves = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Skill_Moves", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.Skill_Moves = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 17;

							row1.Work_Rate = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 18;

							row1.Body_Type = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 19;

							row1.Real_Face = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 20;

							row1.Position = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 21;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.Jersey_Number = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Jersey_Number", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.Jersey_Number = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 22;

							row1.Joined = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 23;

							row1.Loaned_From = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 24;

							row1.Contract_Valid_Until = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 25;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.Height = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Height", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.Height = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 26;

							row1.Weight = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 27;

							row1.LS = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 28;

							row1.ST = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 29;

							row1.RS = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 30;

							row1.LW = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 31;

							row1.LF = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 32;

							row1.CF = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 33;

							row1.RF = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 34;

							row1.RW = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 35;

							row1.LAM = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 36;

							row1.CAM = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 37;

							row1.RAM = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 38;

							row1.LM = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 39;

							row1.LCM = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 40;

							row1.CM = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 41;

							row1.RCM = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 42;

							row1.RM = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 43;

							row1.LWB = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 44;

							row1.LDM = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 45;

							row1.CDM = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 46;

							row1.RDM = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 47;

							row1.RWB = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 48;

							row1.LB = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 49;

							row1.LCB = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 50;

							row1.CB = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 51;

							row1.RCB = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 52;

							row1.RB = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 53;

							row1.Crossing = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 54;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.Finishing = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Finishing", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.Finishing = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 55;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.HeadingAccuracy = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"HeadingAccuracy", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.HeadingAccuracy = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 56;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.ShortPassing = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"ShortPassing", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.ShortPassing = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 57;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.Volleys = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Volleys", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.Volleys = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 58;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.Dribbling = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Dribbling", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.Dribbling = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 59;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.Curve = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Curve", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.Curve = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 60;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.FKAccuracy = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"FKAccuracy", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.FKAccuracy = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 61;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.LongPassing = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"LongPassing", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.LongPassing = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 62;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.BallControl = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"BallControl", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.BallControl = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 63;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.Acceleration = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Acceleration", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.Acceleration = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 64;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.SprintSpeed = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"SprintSpeed", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.SprintSpeed = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 65;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.Agility = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Agility", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.Agility = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 66;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.Reactions = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Reactions", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.Reactions = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 67;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.Balance = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Balance", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.Balance = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 68;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.ShotPower = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"ShotPower", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.ShotPower = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 69;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.Jumping = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Jumping", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.Jumping = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 70;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.Stamina = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Stamina", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.Stamina = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 71;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.Strength = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Strength", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.Strength = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 72;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.LongShots = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"LongShots", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.LongShots = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 73;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.Aggression = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Aggression", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.Aggression = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 74;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.Interceptions = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Interceptions", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.Interceptions = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 75;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.Positioning = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Positioning", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.Positioning = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 76;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.Vision = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Vision", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.Vision = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 77;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.Penalties = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Penalties", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.Penalties = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 78;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.Composure = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Composure", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.Composure = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 79;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.Marking = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Marking", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.Marking = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 80;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.StandingTackle = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"StandingTackle", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.StandingTackle = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 81;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.SlidingTackle = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"SlidingTackle", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.SlidingTackle = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 82;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.GKDiving = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"GKDiving", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.GKDiving = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 83;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.GKHandling = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"GKHandling", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.GKHandling = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 84;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.GKKicking = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"GKKicking", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.GKKicking = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 85;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.GKPositioning = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"GKPositioning", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.GKPositioning = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 86;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.GKReflexes = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"GKReflexes", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.GKReflexes = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 87;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.Release_Clause = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Release_Clause", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.Release_Clause = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 88;

							row1.Column88 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							if (rowstate_tFileInputDelimited_1.getException() != null) {
								throw rowstate_tFileInputDelimited_1.getException();
							}

						} catch (java.lang.Exception e) {
							globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE", e.getMessage());
							whetherReject_tFileInputDelimited_1 = true;

							log.error("tFileInputDelimited_1 - " + e.getMessage());

							System.err.println(e.getMessage());
							row1 = null;

						}

						log.debug("tFileInputDelimited_1 - Retrieving the record "
								+ fid_tFileInputDelimited_1.getRowNumber() + ".");

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */

						/**
						 * [tFileInputDelimited_1 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_begin ] stop
						 */
// Start of branch "row1"
						if (row1 != null) {

							/**
							 * [tReplicate_1 main ] start
							 */

							currentComponent = "tReplicate_1";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "row1"

								);
							}

							if (log.isTraceEnabled()) {
								log.trace("row1 - " + (row1 == null ? "" : row1.toLogString()));
							}

							row2 = new row2Struct();

							row2.ID = row1.ID;
							row2.Name = row1.Name;
							row2.Age = row1.Age;
							row2.Photo = row1.Photo;
							row2.Nationality = row1.Nationality;
							row2.Flag = row1.Flag;
							row2.Overall = row1.Overall;
							row2.Potential = row1.Potential;
							row2.Club = row1.Club;
							row2.Club_Logo = row1.Club_Logo;
							row2.Value = row1.Value;
							row2.Wage = row1.Wage;
							row2.Special = row1.Special;
							row2.Preferred_Foot = row1.Preferred_Foot;
							row2.International_Reputation = row1.International_Reputation;
							row2.Weak_Foot = row1.Weak_Foot;
							row2.Skill_Moves = row1.Skill_Moves;
							row2.Work_Rate = row1.Work_Rate;
							row2.Body_Type = row1.Body_Type;
							row2.Real_Face = row1.Real_Face;
							row2.Position = row1.Position;
							row2.Jersey_Number = row1.Jersey_Number;
							row2.Joined = row1.Joined;
							row2.Loaned_From = row1.Loaned_From;
							row2.Contract_Valid_Until = row1.Contract_Valid_Until;
							row2.Height = row1.Height;
							row2.Weight = row1.Weight;
							row2.LS = row1.LS;
							row2.ST = row1.ST;
							row2.RS = row1.RS;
							row2.LW = row1.LW;
							row2.LF = row1.LF;
							row2.CF = row1.CF;
							row2.RF = row1.RF;
							row2.RW = row1.RW;
							row2.LAM = row1.LAM;
							row2.CAM = row1.CAM;
							row2.RAM = row1.RAM;
							row2.LM = row1.LM;
							row2.LCM = row1.LCM;
							row2.CM = row1.CM;
							row2.RCM = row1.RCM;
							row2.RM = row1.RM;
							row2.LWB = row1.LWB;
							row2.LDM = row1.LDM;
							row2.CDM = row1.CDM;
							row2.RDM = row1.RDM;
							row2.RWB = row1.RWB;
							row2.LB = row1.LB;
							row2.LCB = row1.LCB;
							row2.CB = row1.CB;
							row2.RCB = row1.RCB;
							row2.RB = row1.RB;
							row2.Crossing = row1.Crossing;
							row2.Finishing = row1.Finishing;
							row2.HeadingAccuracy = row1.HeadingAccuracy;
							row2.ShortPassing = row1.ShortPassing;
							row2.Volleys = row1.Volleys;
							row2.Dribbling = row1.Dribbling;
							row2.Curve = row1.Curve;
							row2.FKAccuracy = row1.FKAccuracy;
							row2.LongPassing = row1.LongPassing;
							row2.BallControl = row1.BallControl;
							row2.Acceleration = row1.Acceleration;
							row2.SprintSpeed = row1.SprintSpeed;
							row2.Agility = row1.Agility;
							row2.Reactions = row1.Reactions;
							row2.Balance = row1.Balance;
							row2.ShotPower = row1.ShotPower;
							row2.Jumping = row1.Jumping;
							row2.Stamina = row1.Stamina;
							row2.Strength = row1.Strength;
							row2.LongShots = row1.LongShots;
							row2.Aggression = row1.Aggression;
							row2.Interceptions = row1.Interceptions;
							row2.Positioning = row1.Positioning;
							row2.Vision = row1.Vision;
							row2.Penalties = row1.Penalties;
							row2.Composure = row1.Composure;
							row2.Marking = row1.Marking;
							row2.StandingTackle = row1.StandingTackle;
							row2.SlidingTackle = row1.SlidingTackle;
							row2.GKDiving = row1.GKDiving;
							row2.GKHandling = row1.GKHandling;
							row2.GKKicking = row1.GKKicking;
							row2.GKPositioning = row1.GKPositioning;
							row2.GKReflexes = row1.GKReflexes;
							row2.Release_Clause = row1.Release_Clause;
							row2.Column88 = row1.Column88;
							row3 = new row3Struct();

							row3.ID = row1.ID;
							row3.Name = row1.Name;
							row3.Age = row1.Age;
							row3.Photo = row1.Photo;
							row3.Nationality = row1.Nationality;
							row3.Flag = row1.Flag;
							row3.Overall = row1.Overall;
							row3.Potential = row1.Potential;
							row3.Club = row1.Club;
							row3.Club_Logo = row1.Club_Logo;
							row3.Value = row1.Value;
							row3.Wage = row1.Wage;
							row3.Special = row1.Special;
							row3.Preferred_Foot = row1.Preferred_Foot;
							row3.International_Reputation = row1.International_Reputation;
							row3.Weak_Foot = row1.Weak_Foot;
							row3.Skill_Moves = row1.Skill_Moves;
							row3.Work_Rate = row1.Work_Rate;
							row3.Body_Type = row1.Body_Type;
							row3.Real_Face = row1.Real_Face;
							row3.Position = row1.Position;
							row3.Jersey_Number = row1.Jersey_Number;
							row3.Joined = row1.Joined;
							row3.Loaned_From = row1.Loaned_From;
							row3.Contract_Valid_Until = row1.Contract_Valid_Until;
							row3.Height = row1.Height;
							row3.Weight = row1.Weight;
							row3.LS = row1.LS;
							row3.ST = row1.ST;
							row3.RS = row1.RS;
							row3.LW = row1.LW;
							row3.LF = row1.LF;
							row3.CF = row1.CF;
							row3.RF = row1.RF;
							row3.RW = row1.RW;
							row3.LAM = row1.LAM;
							row3.CAM = row1.CAM;
							row3.RAM = row1.RAM;
							row3.LM = row1.LM;
							row3.LCM = row1.LCM;
							row3.CM = row1.CM;
							row3.RCM = row1.RCM;
							row3.RM = row1.RM;
							row3.LWB = row1.LWB;
							row3.LDM = row1.LDM;
							row3.CDM = row1.CDM;
							row3.RDM = row1.RDM;
							row3.RWB = row1.RWB;
							row3.LB = row1.LB;
							row3.LCB = row1.LCB;
							row3.CB = row1.CB;
							row3.RCB = row1.RCB;
							row3.RB = row1.RB;
							row3.Crossing = row1.Crossing;
							row3.Finishing = row1.Finishing;
							row3.HeadingAccuracy = row1.HeadingAccuracy;
							row3.ShortPassing = row1.ShortPassing;
							row3.Volleys = row1.Volleys;
							row3.Dribbling = row1.Dribbling;
							row3.Curve = row1.Curve;
							row3.FKAccuracy = row1.FKAccuracy;
							row3.LongPassing = row1.LongPassing;
							row3.BallControl = row1.BallControl;
							row3.Acceleration = row1.Acceleration;
							row3.SprintSpeed = row1.SprintSpeed;
							row3.Agility = row1.Agility;
							row3.Reactions = row1.Reactions;
							row3.Balance = row1.Balance;
							row3.ShotPower = row1.ShotPower;
							row3.Jumping = row1.Jumping;
							row3.Stamina = row1.Stamina;
							row3.Strength = row1.Strength;
							row3.LongShots = row1.LongShots;
							row3.Aggression = row1.Aggression;
							row3.Interceptions = row1.Interceptions;
							row3.Positioning = row1.Positioning;
							row3.Vision = row1.Vision;
							row3.Penalties = row1.Penalties;
							row3.Composure = row1.Composure;
							row3.Marking = row1.Marking;
							row3.StandingTackle = row1.StandingTackle;
							row3.SlidingTackle = row1.SlidingTackle;
							row3.GKDiving = row1.GKDiving;
							row3.GKHandling = row1.GKHandling;
							row3.GKKicking = row1.GKKicking;
							row3.GKPositioning = row1.GKPositioning;
							row3.GKReflexes = row1.GKReflexes;
							row3.Release_Clause = row1.Release_Clause;
							row3.Column88 = row1.Column88;
							row4 = new row4Struct();

							row4.ID = row1.ID;
							row4.Name = row1.Name;
							row4.Age = row1.Age;
							row4.Photo = row1.Photo;
							row4.Nationality = row1.Nationality;
							row4.Flag = row1.Flag;
							row4.Overall = row1.Overall;
							row4.Potential = row1.Potential;
							row4.Club = row1.Club;
							row4.Club_Logo = row1.Club_Logo;
							row4.Value = row1.Value;
							row4.Wage = row1.Wage;
							row4.Special = row1.Special;
							row4.Preferred_Foot = row1.Preferred_Foot;
							row4.International_Reputation = row1.International_Reputation;
							row4.Weak_Foot = row1.Weak_Foot;
							row4.Skill_Moves = row1.Skill_Moves;
							row4.Work_Rate = row1.Work_Rate;
							row4.Body_Type = row1.Body_Type;
							row4.Real_Face = row1.Real_Face;
							row4.Position = row1.Position;
							row4.Jersey_Number = row1.Jersey_Number;
							row4.Joined = row1.Joined;
							row4.Loaned_From = row1.Loaned_From;
							row4.Contract_Valid_Until = row1.Contract_Valid_Until;
							row4.Height = row1.Height;
							row4.Weight = row1.Weight;
							row4.LS = row1.LS;
							row4.ST = row1.ST;
							row4.RS = row1.RS;
							row4.LW = row1.LW;
							row4.LF = row1.LF;
							row4.CF = row1.CF;
							row4.RF = row1.RF;
							row4.RW = row1.RW;
							row4.LAM = row1.LAM;
							row4.CAM = row1.CAM;
							row4.RAM = row1.RAM;
							row4.LM = row1.LM;
							row4.LCM = row1.LCM;
							row4.CM = row1.CM;
							row4.RCM = row1.RCM;
							row4.RM = row1.RM;
							row4.LWB = row1.LWB;
							row4.LDM = row1.LDM;
							row4.CDM = row1.CDM;
							row4.RDM = row1.RDM;
							row4.RWB = row1.RWB;
							row4.LB = row1.LB;
							row4.LCB = row1.LCB;
							row4.CB = row1.CB;
							row4.RCB = row1.RCB;
							row4.RB = row1.RB;
							row4.Crossing = row1.Crossing;
							row4.Finishing = row1.Finishing;
							row4.HeadingAccuracy = row1.HeadingAccuracy;
							row4.ShortPassing = row1.ShortPassing;
							row4.Volleys = row1.Volleys;
							row4.Dribbling = row1.Dribbling;
							row4.Curve = row1.Curve;
							row4.FKAccuracy = row1.FKAccuracy;
							row4.LongPassing = row1.LongPassing;
							row4.BallControl = row1.BallControl;
							row4.Acceleration = row1.Acceleration;
							row4.SprintSpeed = row1.SprintSpeed;
							row4.Agility = row1.Agility;
							row4.Reactions = row1.Reactions;
							row4.Balance = row1.Balance;
							row4.ShotPower = row1.ShotPower;
							row4.Jumping = row1.Jumping;
							row4.Stamina = row1.Stamina;
							row4.Strength = row1.Strength;
							row4.LongShots = row1.LongShots;
							row4.Aggression = row1.Aggression;
							row4.Interceptions = row1.Interceptions;
							row4.Positioning = row1.Positioning;
							row4.Vision = row1.Vision;
							row4.Penalties = row1.Penalties;
							row4.Composure = row1.Composure;
							row4.Marking = row1.Marking;
							row4.StandingTackle = row1.StandingTackle;
							row4.SlidingTackle = row1.SlidingTackle;
							row4.GKDiving = row1.GKDiving;
							row4.GKHandling = row1.GKHandling;
							row4.GKKicking = row1.GKKicking;
							row4.GKPositioning = row1.GKPositioning;
							row4.GKReflexes = row1.GKReflexes;
							row4.Release_Clause = row1.Release_Clause;
							row4.Column88 = row1.Column88;
							row5 = new row5Struct();

							row5.ID = row1.ID;
							row5.Name = row1.Name;
							row5.Age = row1.Age;
							row5.Photo = row1.Photo;
							row5.Nationality = row1.Nationality;
							row5.Flag = row1.Flag;
							row5.Overall = row1.Overall;
							row5.Potential = row1.Potential;
							row5.Club = row1.Club;
							row5.Club_Logo = row1.Club_Logo;
							row5.Value = row1.Value;
							row5.Wage = row1.Wage;
							row5.Special = row1.Special;
							row5.Preferred_Foot = row1.Preferred_Foot;
							row5.International_Reputation = row1.International_Reputation;
							row5.Weak_Foot = row1.Weak_Foot;
							row5.Skill_Moves = row1.Skill_Moves;
							row5.Work_Rate = row1.Work_Rate;
							row5.Body_Type = row1.Body_Type;
							row5.Real_Face = row1.Real_Face;
							row5.Position = row1.Position;
							row5.Jersey_Number = row1.Jersey_Number;
							row5.Joined = row1.Joined;
							row5.Loaned_From = row1.Loaned_From;
							row5.Contract_Valid_Until = row1.Contract_Valid_Until;
							row5.Height = row1.Height;
							row5.Weight = row1.Weight;
							row5.LS = row1.LS;
							row5.ST = row1.ST;
							row5.RS = row1.RS;
							row5.LW = row1.LW;
							row5.LF = row1.LF;
							row5.CF = row1.CF;
							row5.RF = row1.RF;
							row5.RW = row1.RW;
							row5.LAM = row1.LAM;
							row5.CAM = row1.CAM;
							row5.RAM = row1.RAM;
							row5.LM = row1.LM;
							row5.LCM = row1.LCM;
							row5.CM = row1.CM;
							row5.RCM = row1.RCM;
							row5.RM = row1.RM;
							row5.LWB = row1.LWB;
							row5.LDM = row1.LDM;
							row5.CDM = row1.CDM;
							row5.RDM = row1.RDM;
							row5.RWB = row1.RWB;
							row5.LB = row1.LB;
							row5.LCB = row1.LCB;
							row5.CB = row1.CB;
							row5.RCB = row1.RCB;
							row5.RB = row1.RB;
							row5.Crossing = row1.Crossing;
							row5.Finishing = row1.Finishing;
							row5.HeadingAccuracy = row1.HeadingAccuracy;
							row5.ShortPassing = row1.ShortPassing;
							row5.Volleys = row1.Volleys;
							row5.Dribbling = row1.Dribbling;
							row5.Curve = row1.Curve;
							row5.FKAccuracy = row1.FKAccuracy;
							row5.LongPassing = row1.LongPassing;
							row5.BallControl = row1.BallControl;
							row5.Acceleration = row1.Acceleration;
							row5.SprintSpeed = row1.SprintSpeed;
							row5.Agility = row1.Agility;
							row5.Reactions = row1.Reactions;
							row5.Balance = row1.Balance;
							row5.ShotPower = row1.ShotPower;
							row5.Jumping = row1.Jumping;
							row5.Stamina = row1.Stamina;
							row5.Strength = row1.Strength;
							row5.LongShots = row1.LongShots;
							row5.Aggression = row1.Aggression;
							row5.Interceptions = row1.Interceptions;
							row5.Positioning = row1.Positioning;
							row5.Vision = row1.Vision;
							row5.Penalties = row1.Penalties;
							row5.Composure = row1.Composure;
							row5.Marking = row1.Marking;
							row5.StandingTackle = row1.StandingTackle;
							row5.SlidingTackle = row1.SlidingTackle;
							row5.GKDiving = row1.GKDiving;
							row5.GKHandling = row1.GKHandling;
							row5.GKKicking = row1.GKKicking;
							row5.GKPositioning = row1.GKPositioning;
							row5.GKReflexes = row1.GKReflexes;
							row5.Release_Clause = row1.Release_Clause;
							row5.Column88 = row1.Column88;

							tos_count_tReplicate_1++;

							/**
							 * [tReplicate_1 main ] stop
							 */

							/**
							 * [tReplicate_1 process_data_begin ] start
							 */

							currentComponent = "tReplicate_1";

							/**
							 * [tReplicate_1 process_data_begin ] stop
							 */

							/**
							 * [tFilterRow_1 main ] start
							 */

							currentComponent = "tFilterRow_1";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "row2"

								);
							}

							if (log.isTraceEnabled()) {
								log.trace("row2 - " + (row2 == null ? "" : row2.toLogString()));
							}

							row6 = null;
							Operator_tFilterRow_1 ope_tFilterRow_1 = new Operator_tFilterRow_1("&&");
							ope_tFilterRow_1.matches(
									(row2.Position == null ? false : row2.Position.matches("GK") == true),
									" Position.matches(\"GK\") == true failed");

							if (ope_tFilterRow_1.getMatchFlag()) {
								if (row6 == null) {
									row6 = new row6Struct();
								}
								row6.ID = row2.ID;
								row6.Name = row2.Name;
								row6.Age = row2.Age;
								row6.Photo = row2.Photo;
								row6.Nationality = row2.Nationality;
								row6.Flag = row2.Flag;
								row6.Overall = row2.Overall;
								row6.Potential = row2.Potential;
								row6.Club = row2.Club;
								row6.Club_Logo = row2.Club_Logo;
								row6.Value = row2.Value;
								row6.Wage = row2.Wage;
								row6.Special = row2.Special;
								row6.Preferred_Foot = row2.Preferred_Foot;
								row6.International_Reputation = row2.International_Reputation;
								row6.Weak_Foot = row2.Weak_Foot;
								row6.Skill_Moves = row2.Skill_Moves;
								row6.Work_Rate = row2.Work_Rate;
								row6.Body_Type = row2.Body_Type;
								row6.Real_Face = row2.Real_Face;
								row6.Position = row2.Position;
								row6.Jersey_Number = row2.Jersey_Number;
								row6.Joined = row2.Joined;
								row6.Loaned_From = row2.Loaned_From;
								row6.Contract_Valid_Until = row2.Contract_Valid_Until;
								row6.Height = row2.Height;
								row6.Weight = row2.Weight;
								row6.LS = row2.LS;
								row6.ST = row2.ST;
								row6.RS = row2.RS;
								row6.LW = row2.LW;
								row6.LF = row2.LF;
								row6.CF = row2.CF;
								row6.RF = row2.RF;
								row6.RW = row2.RW;
								row6.LAM = row2.LAM;
								row6.CAM = row2.CAM;
								row6.RAM = row2.RAM;
								row6.LM = row2.LM;
								row6.LCM = row2.LCM;
								row6.CM = row2.CM;
								row6.RCM = row2.RCM;
								row6.RM = row2.RM;
								row6.LWB = row2.LWB;
								row6.LDM = row2.LDM;
								row6.CDM = row2.CDM;
								row6.RDM = row2.RDM;
								row6.RWB = row2.RWB;
								row6.LB = row2.LB;
								row6.LCB = row2.LCB;
								row6.CB = row2.CB;
								row6.RCB = row2.RCB;
								row6.RB = row2.RB;
								row6.Crossing = row2.Crossing;
								row6.Finishing = row2.Finishing;
								row6.HeadingAccuracy = row2.HeadingAccuracy;
								row6.ShortPassing = row2.ShortPassing;
								row6.Volleys = row2.Volleys;
								row6.Dribbling = row2.Dribbling;
								row6.Curve = row2.Curve;
								row6.FKAccuracy = row2.FKAccuracy;
								row6.LongPassing = row2.LongPassing;
								row6.BallControl = row2.BallControl;
								row6.Acceleration = row2.Acceleration;
								row6.SprintSpeed = row2.SprintSpeed;
								row6.Agility = row2.Agility;
								row6.Reactions = row2.Reactions;
								row6.Balance = row2.Balance;
								row6.ShotPower = row2.ShotPower;
								row6.Jumping = row2.Jumping;
								row6.Stamina = row2.Stamina;
								row6.Strength = row2.Strength;
								row6.LongShots = row2.LongShots;
								row6.Aggression = row2.Aggression;
								row6.Interceptions = row2.Interceptions;
								row6.Positioning = row2.Positioning;
								row6.Vision = row2.Vision;
								row6.Penalties = row2.Penalties;
								row6.Composure = row2.Composure;
								row6.Marking = row2.Marking;
								row6.StandingTackle = row2.StandingTackle;
								row6.SlidingTackle = row2.SlidingTackle;
								row6.GKDiving = row2.GKDiving;
								row6.GKHandling = row2.GKHandling;
								row6.GKKicking = row2.GKKicking;
								row6.GKPositioning = row2.GKPositioning;
								row6.GKReflexes = row2.GKReflexes;
								row6.Release_Clause = row2.Release_Clause;
								row6.Column88 = row2.Column88;
								log.debug("tFilterRow_1 - Process the record " + (nb_line_tFilterRow_1 + 1) + ".");

								nb_line_ok_tFilterRow_1++;
							} else {
								nb_line_reject_tFilterRow_1++;
							}

							nb_line_tFilterRow_1++;

							tos_count_tFilterRow_1++;

							/**
							 * [tFilterRow_1 main ] stop
							 */

							/**
							 * [tFilterRow_1 process_data_begin ] start
							 */

							currentComponent = "tFilterRow_1";

							/**
							 * [tFilterRow_1 process_data_begin ] stop
							 */
// Start of branch "row6"
							if (row6 != null) {

								/**
								 * [tDBOutput_1 main ] start
								 */

								currentComponent = "tDBOutput_1";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "row6"

									);
								}

								if (log.isTraceEnabled()) {
									log.trace("row6 - " + (row6 == null ? "" : row6.toLogString()));
								}

								whetherReject_tDBOutput_1 = false;
								if (row6.ID == null) {
									pstmt_tDBOutput_1.setNull(1, java.sql.Types.INTEGER);
								} else {
									pstmt_tDBOutput_1.setInt(1, row6.ID);
								}

								int checkCount_tDBOutput_1 = -1;
								try (java.sql.ResultSet rs_tDBOutput_1 = pstmt_tDBOutput_1.executeQuery()) {
									while (rs_tDBOutput_1.next()) {
										checkCount_tDBOutput_1 = rs_tDBOutput_1.getInt(1);
									}
								}
								if (checkCount_tDBOutput_1 > 0) {
									if (row6.Name == null) {
										pstmtUpdate_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(1, row6.Name);
									}

									if (row6.Age == null) {
										pstmtUpdate_tDBOutput_1.setNull(2, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_1.setInt(2, row6.Age);
									}

									if (row6.Photo == null) {
										pstmtUpdate_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(3, row6.Photo);
									}

									if (row6.Nationality == null) {
										pstmtUpdate_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(4, row6.Nationality);
									}

									if (row6.Flag == null) {
										pstmtUpdate_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(5, row6.Flag);
									}

									if (row6.Overall == null) {
										pstmtUpdate_tDBOutput_1.setNull(6, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_1.setInt(6, row6.Overall);
									}

									if (row6.Potential == null) {
										pstmtUpdate_tDBOutput_1.setNull(7, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_1.setInt(7, row6.Potential);
									}

									if (row6.Club == null) {
										pstmtUpdate_tDBOutput_1.setNull(8, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(8, row6.Club);
									}

									if (row6.Club_Logo == null) {
										pstmtUpdate_tDBOutput_1.setNull(9, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(9, row6.Club_Logo);
									}

									if (row6.Value == null) {
										pstmtUpdate_tDBOutput_1.setNull(10, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(10, row6.Value);
									}

									if (row6.Wage == null) {
										pstmtUpdate_tDBOutput_1.setNull(11, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(11, row6.Wage);
									}

									if (row6.Special == null) {
										pstmtUpdate_tDBOutput_1.setNull(12, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_1.setInt(12, row6.Special);
									}

									if (row6.Preferred_Foot == null) {
										pstmtUpdate_tDBOutput_1.setNull(13, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(13, row6.Preferred_Foot);
									}

									if (row6.International_Reputation == null) {
										pstmtUpdate_tDBOutput_1.setNull(14, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_1.setInt(14, row6.International_Reputation);
									}

									if (row6.Weak_Foot == null) {
										pstmtUpdate_tDBOutput_1.setNull(15, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_1.setInt(15, row6.Weak_Foot);
									}

									if (row6.Skill_Moves == null) {
										pstmtUpdate_tDBOutput_1.setNull(16, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_1.setInt(16, row6.Skill_Moves);
									}

									if (row6.Work_Rate == null) {
										pstmtUpdate_tDBOutput_1.setNull(17, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(17, row6.Work_Rate);
									}

									if (row6.Body_Type == null) {
										pstmtUpdate_tDBOutput_1.setNull(18, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(18, row6.Body_Type);
									}

									if (row6.Real_Face == null) {
										pstmtUpdate_tDBOutput_1.setNull(19, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(19, row6.Real_Face);
									}

									if (row6.Position == null) {
										pstmtUpdate_tDBOutput_1.setNull(20, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(20, row6.Position);
									}

									if (row6.Jersey_Number == null) {
										pstmtUpdate_tDBOutput_1.setNull(21, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_1.setInt(21, row6.Jersey_Number);
									}

									if (row6.Joined == null) {
										pstmtUpdate_tDBOutput_1.setNull(22, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(22, row6.Joined);
									}

									if (row6.Loaned_From == null) {
										pstmtUpdate_tDBOutput_1.setNull(23, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(23, row6.Loaned_From);
									}

									if (row6.Contract_Valid_Until == null) {
										pstmtUpdate_tDBOutput_1.setNull(24, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(24, row6.Contract_Valid_Until);
									}

									if (row6.Height == null) {
										pstmtUpdate_tDBOutput_1.setNull(25, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_1.setInt(25, row6.Height);
									}

									if (row6.Weight == null) {
										pstmtUpdate_tDBOutput_1.setNull(26, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(26, row6.Weight);
									}

									if (row6.LS == null) {
										pstmtUpdate_tDBOutput_1.setNull(27, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(27, row6.LS);
									}

									if (row6.ST == null) {
										pstmtUpdate_tDBOutput_1.setNull(28, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(28, row6.ST);
									}

									if (row6.RS == null) {
										pstmtUpdate_tDBOutput_1.setNull(29, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(29, row6.RS);
									}

									if (row6.LW == null) {
										pstmtUpdate_tDBOutput_1.setNull(30, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(30, row6.LW);
									}

									if (row6.LF == null) {
										pstmtUpdate_tDBOutput_1.setNull(31, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(31, row6.LF);
									}

									if (row6.CF == null) {
										pstmtUpdate_tDBOutput_1.setNull(32, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(32, row6.CF);
									}

									if (row6.RF == null) {
										pstmtUpdate_tDBOutput_1.setNull(33, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(33, row6.RF);
									}

									if (row6.RW == null) {
										pstmtUpdate_tDBOutput_1.setNull(34, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(34, row6.RW);
									}

									if (row6.LAM == null) {
										pstmtUpdate_tDBOutput_1.setNull(35, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(35, row6.LAM);
									}

									if (row6.CAM == null) {
										pstmtUpdate_tDBOutput_1.setNull(36, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(36, row6.CAM);
									}

									if (row6.RAM == null) {
										pstmtUpdate_tDBOutput_1.setNull(37, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(37, row6.RAM);
									}

									if (row6.LM == null) {
										pstmtUpdate_tDBOutput_1.setNull(38, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(38, row6.LM);
									}

									if (row6.LCM == null) {
										pstmtUpdate_tDBOutput_1.setNull(39, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(39, row6.LCM);
									}

									if (row6.CM == null) {
										pstmtUpdate_tDBOutput_1.setNull(40, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(40, row6.CM);
									}

									if (row6.RCM == null) {
										pstmtUpdate_tDBOutput_1.setNull(41, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(41, row6.RCM);
									}

									if (row6.RM == null) {
										pstmtUpdate_tDBOutput_1.setNull(42, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(42, row6.RM);
									}

									if (row6.LWB == null) {
										pstmtUpdate_tDBOutput_1.setNull(43, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(43, row6.LWB);
									}

									if (row6.LDM == null) {
										pstmtUpdate_tDBOutput_1.setNull(44, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(44, row6.LDM);
									}

									if (row6.CDM == null) {
										pstmtUpdate_tDBOutput_1.setNull(45, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(45, row6.CDM);
									}

									if (row6.RDM == null) {
										pstmtUpdate_tDBOutput_1.setNull(46, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(46, row6.RDM);
									}

									if (row6.RWB == null) {
										pstmtUpdate_tDBOutput_1.setNull(47, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(47, row6.RWB);
									}

									if (row6.LB == null) {
										pstmtUpdate_tDBOutput_1.setNull(48, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(48, row6.LB);
									}

									if (row6.LCB == null) {
										pstmtUpdate_tDBOutput_1.setNull(49, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(49, row6.LCB);
									}

									if (row6.CB == null) {
										pstmtUpdate_tDBOutput_1.setNull(50, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(50, row6.CB);
									}

									if (row6.RCB == null) {
										pstmtUpdate_tDBOutput_1.setNull(51, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(51, row6.RCB);
									}

									if (row6.RB == null) {
										pstmtUpdate_tDBOutput_1.setNull(52, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(52, row6.RB);
									}

									if (row6.Crossing == null) {
										pstmtUpdate_tDBOutput_1.setNull(53, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(53, row6.Crossing);
									}

									if (row6.Finishing == null) {
										pstmtUpdate_tDBOutput_1.setNull(54, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_1.setInt(54, row6.Finishing);
									}

									if (row6.HeadingAccuracy == null) {
										pstmtUpdate_tDBOutput_1.setNull(55, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_1.setInt(55, row6.HeadingAccuracy);
									}

									if (row6.ShortPassing == null) {
										pstmtUpdate_tDBOutput_1.setNull(56, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_1.setInt(56, row6.ShortPassing);
									}

									if (row6.Volleys == null) {
										pstmtUpdate_tDBOutput_1.setNull(57, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_1.setInt(57, row6.Volleys);
									}

									if (row6.Dribbling == null) {
										pstmtUpdate_tDBOutput_1.setNull(58, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_1.setInt(58, row6.Dribbling);
									}

									if (row6.Curve == null) {
										pstmtUpdate_tDBOutput_1.setNull(59, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_1.setInt(59, row6.Curve);
									}

									if (row6.FKAccuracy == null) {
										pstmtUpdate_tDBOutput_1.setNull(60, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_1.setInt(60, row6.FKAccuracy);
									}

									if (row6.LongPassing == null) {
										pstmtUpdate_tDBOutput_1.setNull(61, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_1.setInt(61, row6.LongPassing);
									}

									if (row6.BallControl == null) {
										pstmtUpdate_tDBOutput_1.setNull(62, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_1.setInt(62, row6.BallControl);
									}

									if (row6.Acceleration == null) {
										pstmtUpdate_tDBOutput_1.setNull(63, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_1.setInt(63, row6.Acceleration);
									}

									if (row6.SprintSpeed == null) {
										pstmtUpdate_tDBOutput_1.setNull(64, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_1.setInt(64, row6.SprintSpeed);
									}

									if (row6.Agility == null) {
										pstmtUpdate_tDBOutput_1.setNull(65, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_1.setInt(65, row6.Agility);
									}

									if (row6.Reactions == null) {
										pstmtUpdate_tDBOutput_1.setNull(66, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_1.setInt(66, row6.Reactions);
									}

									if (row6.Balance == null) {
										pstmtUpdate_tDBOutput_1.setNull(67, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_1.setInt(67, row6.Balance);
									}

									if (row6.ShotPower == null) {
										pstmtUpdate_tDBOutput_1.setNull(68, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_1.setInt(68, row6.ShotPower);
									}

									if (row6.Jumping == null) {
										pstmtUpdate_tDBOutput_1.setNull(69, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_1.setInt(69, row6.Jumping);
									}

									if (row6.Stamina == null) {
										pstmtUpdate_tDBOutput_1.setNull(70, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_1.setInt(70, row6.Stamina);
									}

									if (row6.Strength == null) {
										pstmtUpdate_tDBOutput_1.setNull(71, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_1.setInt(71, row6.Strength);
									}

									if (row6.LongShots == null) {
										pstmtUpdate_tDBOutput_1.setNull(72, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_1.setInt(72, row6.LongShots);
									}

									if (row6.Aggression == null) {
										pstmtUpdate_tDBOutput_1.setNull(73, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_1.setInt(73, row6.Aggression);
									}

									if (row6.Interceptions == null) {
										pstmtUpdate_tDBOutput_1.setNull(74, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_1.setInt(74, row6.Interceptions);
									}

									if (row6.Positioning == null) {
										pstmtUpdate_tDBOutput_1.setNull(75, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_1.setInt(75, row6.Positioning);
									}

									if (row6.Vision == null) {
										pstmtUpdate_tDBOutput_1.setNull(76, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_1.setInt(76, row6.Vision);
									}

									if (row6.Penalties == null) {
										pstmtUpdate_tDBOutput_1.setNull(77, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_1.setInt(77, row6.Penalties);
									}

									if (row6.Composure == null) {
										pstmtUpdate_tDBOutput_1.setNull(78, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_1.setInt(78, row6.Composure);
									}

									if (row6.Marking == null) {
										pstmtUpdate_tDBOutput_1.setNull(79, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_1.setInt(79, row6.Marking);
									}

									if (row6.StandingTackle == null) {
										pstmtUpdate_tDBOutput_1.setNull(80, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_1.setInt(80, row6.StandingTackle);
									}

									if (row6.SlidingTackle == null) {
										pstmtUpdate_tDBOutput_1.setNull(81, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_1.setInt(81, row6.SlidingTackle);
									}

									if (row6.GKDiving == null) {
										pstmtUpdate_tDBOutput_1.setNull(82, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_1.setInt(82, row6.GKDiving);
									}

									if (row6.GKHandling == null) {
										pstmtUpdate_tDBOutput_1.setNull(83, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_1.setInt(83, row6.GKHandling);
									}

									if (row6.GKKicking == null) {
										pstmtUpdate_tDBOutput_1.setNull(84, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_1.setInt(84, row6.GKKicking);
									}

									if (row6.GKPositioning == null) {
										pstmtUpdate_tDBOutput_1.setNull(85, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_1.setInt(85, row6.GKPositioning);
									}

									if (row6.GKReflexes == null) {
										pstmtUpdate_tDBOutput_1.setNull(86, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_1.setInt(86, row6.GKReflexes);
									}

									if (row6.Release_Clause == null) {
										pstmtUpdate_tDBOutput_1.setNull(87, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_1.setInt(87, row6.Release_Clause);
									}

									if (row6.Column88 == null) {
										pstmtUpdate_tDBOutput_1.setNull(88, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(88, row6.Column88);
									}

									if (row6.ID == null) {
										pstmtUpdate_tDBOutput_1.setNull(89 + count_tDBOutput_1, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_1.setInt(89 + count_tDBOutput_1, row6.ID);
									}

									try {
										int processedCount_tDBOutput_1 = pstmtUpdate_tDBOutput_1.executeUpdate();
										updatedCount_tDBOutput_1 += processedCount_tDBOutput_1;
										rowsToCommitCount_tDBOutput_1 += processedCount_tDBOutput_1;
										nb_line_tDBOutput_1++;
										if (log.isDebugEnabled())
											log.debug("tDBOutput_1 - " + ("Updating") + (" the record ")
													+ (nb_line_tDBOutput_1) + ("."));
									} catch (java.lang.Exception e) {
										globalMap.put("tDBOutput_1_ERROR_MESSAGE", e.getMessage());
										whetherReject_tDBOutput_1 = true;
										nb_line_tDBOutput_1++;
										log.error("tDBOutput_1 - " + (e.getMessage()));
										System.err.print(e.getMessage());
									}
								} else {
									if (row6.ID == null) {
										pstmtInsert_tDBOutput_1.setNull(1, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_1.setInt(1, row6.ID);
									}

									if (row6.Name == null) {
										pstmtInsert_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(2, row6.Name);
									}

									if (row6.Age == null) {
										pstmtInsert_tDBOutput_1.setNull(3, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_1.setInt(3, row6.Age);
									}

									if (row6.Photo == null) {
										pstmtInsert_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(4, row6.Photo);
									}

									if (row6.Nationality == null) {
										pstmtInsert_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(5, row6.Nationality);
									}

									if (row6.Flag == null) {
										pstmtInsert_tDBOutput_1.setNull(6, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(6, row6.Flag);
									}

									if (row6.Overall == null) {
										pstmtInsert_tDBOutput_1.setNull(7, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_1.setInt(7, row6.Overall);
									}

									if (row6.Potential == null) {
										pstmtInsert_tDBOutput_1.setNull(8, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_1.setInt(8, row6.Potential);
									}

									if (row6.Club == null) {
										pstmtInsert_tDBOutput_1.setNull(9, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(9, row6.Club);
									}

									if (row6.Club_Logo == null) {
										pstmtInsert_tDBOutput_1.setNull(10, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(10, row6.Club_Logo);
									}

									if (row6.Value == null) {
										pstmtInsert_tDBOutput_1.setNull(11, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(11, row6.Value);
									}

									if (row6.Wage == null) {
										pstmtInsert_tDBOutput_1.setNull(12, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(12, row6.Wage);
									}

									if (row6.Special == null) {
										pstmtInsert_tDBOutput_1.setNull(13, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_1.setInt(13, row6.Special);
									}

									if (row6.Preferred_Foot == null) {
										pstmtInsert_tDBOutput_1.setNull(14, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(14, row6.Preferred_Foot);
									}

									if (row6.International_Reputation == null) {
										pstmtInsert_tDBOutput_1.setNull(15, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_1.setInt(15, row6.International_Reputation);
									}

									if (row6.Weak_Foot == null) {
										pstmtInsert_tDBOutput_1.setNull(16, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_1.setInt(16, row6.Weak_Foot);
									}

									if (row6.Skill_Moves == null) {
										pstmtInsert_tDBOutput_1.setNull(17, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_1.setInt(17, row6.Skill_Moves);
									}

									if (row6.Work_Rate == null) {
										pstmtInsert_tDBOutput_1.setNull(18, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(18, row6.Work_Rate);
									}

									if (row6.Body_Type == null) {
										pstmtInsert_tDBOutput_1.setNull(19, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(19, row6.Body_Type);
									}

									if (row6.Real_Face == null) {
										pstmtInsert_tDBOutput_1.setNull(20, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(20, row6.Real_Face);
									}

									if (row6.Position == null) {
										pstmtInsert_tDBOutput_1.setNull(21, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(21, row6.Position);
									}

									if (row6.Jersey_Number == null) {
										pstmtInsert_tDBOutput_1.setNull(22, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_1.setInt(22, row6.Jersey_Number);
									}

									if (row6.Joined == null) {
										pstmtInsert_tDBOutput_1.setNull(23, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(23, row6.Joined);
									}

									if (row6.Loaned_From == null) {
										pstmtInsert_tDBOutput_1.setNull(24, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(24, row6.Loaned_From);
									}

									if (row6.Contract_Valid_Until == null) {
										pstmtInsert_tDBOutput_1.setNull(25, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(25, row6.Contract_Valid_Until);
									}

									if (row6.Height == null) {
										pstmtInsert_tDBOutput_1.setNull(26, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_1.setInt(26, row6.Height);
									}

									if (row6.Weight == null) {
										pstmtInsert_tDBOutput_1.setNull(27, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(27, row6.Weight);
									}

									if (row6.LS == null) {
										pstmtInsert_tDBOutput_1.setNull(28, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(28, row6.LS);
									}

									if (row6.ST == null) {
										pstmtInsert_tDBOutput_1.setNull(29, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(29, row6.ST);
									}

									if (row6.RS == null) {
										pstmtInsert_tDBOutput_1.setNull(30, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(30, row6.RS);
									}

									if (row6.LW == null) {
										pstmtInsert_tDBOutput_1.setNull(31, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(31, row6.LW);
									}

									if (row6.LF == null) {
										pstmtInsert_tDBOutput_1.setNull(32, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(32, row6.LF);
									}

									if (row6.CF == null) {
										pstmtInsert_tDBOutput_1.setNull(33, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(33, row6.CF);
									}

									if (row6.RF == null) {
										pstmtInsert_tDBOutput_1.setNull(34, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(34, row6.RF);
									}

									if (row6.RW == null) {
										pstmtInsert_tDBOutput_1.setNull(35, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(35, row6.RW);
									}

									if (row6.LAM == null) {
										pstmtInsert_tDBOutput_1.setNull(36, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(36, row6.LAM);
									}

									if (row6.CAM == null) {
										pstmtInsert_tDBOutput_1.setNull(37, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(37, row6.CAM);
									}

									if (row6.RAM == null) {
										pstmtInsert_tDBOutput_1.setNull(38, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(38, row6.RAM);
									}

									if (row6.LM == null) {
										pstmtInsert_tDBOutput_1.setNull(39, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(39, row6.LM);
									}

									if (row6.LCM == null) {
										pstmtInsert_tDBOutput_1.setNull(40, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(40, row6.LCM);
									}

									if (row6.CM == null) {
										pstmtInsert_tDBOutput_1.setNull(41, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(41, row6.CM);
									}

									if (row6.RCM == null) {
										pstmtInsert_tDBOutput_1.setNull(42, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(42, row6.RCM);
									}

									if (row6.RM == null) {
										pstmtInsert_tDBOutput_1.setNull(43, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(43, row6.RM);
									}

									if (row6.LWB == null) {
										pstmtInsert_tDBOutput_1.setNull(44, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(44, row6.LWB);
									}

									if (row6.LDM == null) {
										pstmtInsert_tDBOutput_1.setNull(45, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(45, row6.LDM);
									}

									if (row6.CDM == null) {
										pstmtInsert_tDBOutput_1.setNull(46, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(46, row6.CDM);
									}

									if (row6.RDM == null) {
										pstmtInsert_tDBOutput_1.setNull(47, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(47, row6.RDM);
									}

									if (row6.RWB == null) {
										pstmtInsert_tDBOutput_1.setNull(48, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(48, row6.RWB);
									}

									if (row6.LB == null) {
										pstmtInsert_tDBOutput_1.setNull(49, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(49, row6.LB);
									}

									if (row6.LCB == null) {
										pstmtInsert_tDBOutput_1.setNull(50, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(50, row6.LCB);
									}

									if (row6.CB == null) {
										pstmtInsert_tDBOutput_1.setNull(51, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(51, row6.CB);
									}

									if (row6.RCB == null) {
										pstmtInsert_tDBOutput_1.setNull(52, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(52, row6.RCB);
									}

									if (row6.RB == null) {
										pstmtInsert_tDBOutput_1.setNull(53, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(53, row6.RB);
									}

									if (row6.Crossing == null) {
										pstmtInsert_tDBOutput_1.setNull(54, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(54, row6.Crossing);
									}

									if (row6.Finishing == null) {
										pstmtInsert_tDBOutput_1.setNull(55, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_1.setInt(55, row6.Finishing);
									}

									if (row6.HeadingAccuracy == null) {
										pstmtInsert_tDBOutput_1.setNull(56, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_1.setInt(56, row6.HeadingAccuracy);
									}

									if (row6.ShortPassing == null) {
										pstmtInsert_tDBOutput_1.setNull(57, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_1.setInt(57, row6.ShortPassing);
									}

									if (row6.Volleys == null) {
										pstmtInsert_tDBOutput_1.setNull(58, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_1.setInt(58, row6.Volleys);
									}

									if (row6.Dribbling == null) {
										pstmtInsert_tDBOutput_1.setNull(59, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_1.setInt(59, row6.Dribbling);
									}

									if (row6.Curve == null) {
										pstmtInsert_tDBOutput_1.setNull(60, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_1.setInt(60, row6.Curve);
									}

									if (row6.FKAccuracy == null) {
										pstmtInsert_tDBOutput_1.setNull(61, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_1.setInt(61, row6.FKAccuracy);
									}

									if (row6.LongPassing == null) {
										pstmtInsert_tDBOutput_1.setNull(62, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_1.setInt(62, row6.LongPassing);
									}

									if (row6.BallControl == null) {
										pstmtInsert_tDBOutput_1.setNull(63, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_1.setInt(63, row6.BallControl);
									}

									if (row6.Acceleration == null) {
										pstmtInsert_tDBOutput_1.setNull(64, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_1.setInt(64, row6.Acceleration);
									}

									if (row6.SprintSpeed == null) {
										pstmtInsert_tDBOutput_1.setNull(65, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_1.setInt(65, row6.SprintSpeed);
									}

									if (row6.Agility == null) {
										pstmtInsert_tDBOutput_1.setNull(66, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_1.setInt(66, row6.Agility);
									}

									if (row6.Reactions == null) {
										pstmtInsert_tDBOutput_1.setNull(67, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_1.setInt(67, row6.Reactions);
									}

									if (row6.Balance == null) {
										pstmtInsert_tDBOutput_1.setNull(68, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_1.setInt(68, row6.Balance);
									}

									if (row6.ShotPower == null) {
										pstmtInsert_tDBOutput_1.setNull(69, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_1.setInt(69, row6.ShotPower);
									}

									if (row6.Jumping == null) {
										pstmtInsert_tDBOutput_1.setNull(70, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_1.setInt(70, row6.Jumping);
									}

									if (row6.Stamina == null) {
										pstmtInsert_tDBOutput_1.setNull(71, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_1.setInt(71, row6.Stamina);
									}

									if (row6.Strength == null) {
										pstmtInsert_tDBOutput_1.setNull(72, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_1.setInt(72, row6.Strength);
									}

									if (row6.LongShots == null) {
										pstmtInsert_tDBOutput_1.setNull(73, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_1.setInt(73, row6.LongShots);
									}

									if (row6.Aggression == null) {
										pstmtInsert_tDBOutput_1.setNull(74, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_1.setInt(74, row6.Aggression);
									}

									if (row6.Interceptions == null) {
										pstmtInsert_tDBOutput_1.setNull(75, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_1.setInt(75, row6.Interceptions);
									}

									if (row6.Positioning == null) {
										pstmtInsert_tDBOutput_1.setNull(76, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_1.setInt(76, row6.Positioning);
									}

									if (row6.Vision == null) {
										pstmtInsert_tDBOutput_1.setNull(77, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_1.setInt(77, row6.Vision);
									}

									if (row6.Penalties == null) {
										pstmtInsert_tDBOutput_1.setNull(78, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_1.setInt(78, row6.Penalties);
									}

									if (row6.Composure == null) {
										pstmtInsert_tDBOutput_1.setNull(79, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_1.setInt(79, row6.Composure);
									}

									if (row6.Marking == null) {
										pstmtInsert_tDBOutput_1.setNull(80, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_1.setInt(80, row6.Marking);
									}

									if (row6.StandingTackle == null) {
										pstmtInsert_tDBOutput_1.setNull(81, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_1.setInt(81, row6.StandingTackle);
									}

									if (row6.SlidingTackle == null) {
										pstmtInsert_tDBOutput_1.setNull(82, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_1.setInt(82, row6.SlidingTackle);
									}

									if (row6.GKDiving == null) {
										pstmtInsert_tDBOutput_1.setNull(83, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_1.setInt(83, row6.GKDiving);
									}

									if (row6.GKHandling == null) {
										pstmtInsert_tDBOutput_1.setNull(84, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_1.setInt(84, row6.GKHandling);
									}

									if (row6.GKKicking == null) {
										pstmtInsert_tDBOutput_1.setNull(85, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_1.setInt(85, row6.GKKicking);
									}

									if (row6.GKPositioning == null) {
										pstmtInsert_tDBOutput_1.setNull(86, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_1.setInt(86, row6.GKPositioning);
									}

									if (row6.GKReflexes == null) {
										pstmtInsert_tDBOutput_1.setNull(87, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_1.setInt(87, row6.GKReflexes);
									}

									if (row6.Release_Clause == null) {
										pstmtInsert_tDBOutput_1.setNull(88, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_1.setInt(88, row6.Release_Clause);
									}

									if (row6.Column88 == null) {
										pstmtInsert_tDBOutput_1.setNull(89, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(89, row6.Column88);
									}

									try {
										int processedCount_tDBOutput_1 = pstmtInsert_tDBOutput_1.executeUpdate();
										insertedCount_tDBOutput_1 += processedCount_tDBOutput_1;
										rowsToCommitCount_tDBOutput_1 += processedCount_tDBOutput_1;
										nb_line_tDBOutput_1++;
										if (log.isDebugEnabled())
											log.debug("tDBOutput_1 - " + ("Inserting") + (" the record ")
													+ (nb_line_tDBOutput_1) + ("."));
									} catch (java.lang.Exception e) {
										globalMap.put("tDBOutput_1_ERROR_MESSAGE", e.getMessage());
										whetherReject_tDBOutput_1 = true;
										nb_line_tDBOutput_1++;
										log.error("tDBOutput_1 - " + (e.getMessage()));
										System.err.print(e.getMessage());
									}
								}

								tos_count_tDBOutput_1++;

								/**
								 * [tDBOutput_1 main ] stop
								 */

								/**
								 * [tDBOutput_1 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_1";

								/**
								 * [tDBOutput_1 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_1 process_data_end ] start
								 */

								currentComponent = "tDBOutput_1";

								/**
								 * [tDBOutput_1 process_data_end ] stop
								 */

							} // End of branch "row6"

							/**
							 * [tFilterRow_1 process_data_end ] start
							 */

							currentComponent = "tFilterRow_1";

							/**
							 * [tFilterRow_1 process_data_end ] stop
							 */

							/**
							 * [tFilterRow_2 main ] start
							 */

							currentComponent = "tFilterRow_2";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "row3"

								);
							}

							if (log.isTraceEnabled()) {
								log.trace("row3 - " + (row3 == null ? "" : row3.toLogString()));
							}

							row7 = null;
							Operator_tFilterRow_2 ope_tFilterRow_2 = new Operator_tFilterRow_2("||");
							ope_tFilterRow_2.matches(
									(row3.Position == null ? false : row3.Position.matches("RB") == true),
									" Position.matches(\"RB\") == true failed");
							ope_tFilterRow_2.matches(
									(row3.Position == null ? false : row3.Position.matches("RWB") == true),
									" Position.matches(\"RWB\") == true failed");
							ope_tFilterRow_2.matches(
									(row3.Position == null ? false : row3.Position.matches("RCB") == true),
									" Position.matches(\"RCB\") == true failed");
							ope_tFilterRow_2.matches(
									(row3.Position == null ? false : row3.Position.matches("CB") == true),
									" Position.matches(\"CB\") == true failed");
							ope_tFilterRow_2.matches(
									(row3.Position == null ? false : row3.Position.matches("LB") == true),
									" Position.matches(\"LB\") == true failed");
							ope_tFilterRow_2.matches(
									(row3.Position == null ? false : row3.Position.matches("LCB") == true),
									" Position.matches(\"LCB\") == true failed");
							ope_tFilterRow_2.matches(
									(row3.Position == null ? false : row3.Position.matches("LWB") == true),
									" Position.matches(\"LWB\") == true failed");

							if (ope_tFilterRow_2.getMatchFlag()) {
								if (row7 == null) {
									row7 = new row7Struct();
								}
								row7.ID = row3.ID;
								row7.Name = row3.Name;
								row7.Age = row3.Age;
								row7.Photo = row3.Photo;
								row7.Nationality = row3.Nationality;
								row7.Flag = row3.Flag;
								row7.Overall = row3.Overall;
								row7.Potential = row3.Potential;
								row7.Club = row3.Club;
								row7.Club_Logo = row3.Club_Logo;
								row7.Value = row3.Value;
								row7.Wage = row3.Wage;
								row7.Special = row3.Special;
								row7.Preferred_Foot = row3.Preferred_Foot;
								row7.International_Reputation = row3.International_Reputation;
								row7.Weak_Foot = row3.Weak_Foot;
								row7.Skill_Moves = row3.Skill_Moves;
								row7.Work_Rate = row3.Work_Rate;
								row7.Body_Type = row3.Body_Type;
								row7.Real_Face = row3.Real_Face;
								row7.Position = row3.Position;
								row7.Jersey_Number = row3.Jersey_Number;
								row7.Joined = row3.Joined;
								row7.Loaned_From = row3.Loaned_From;
								row7.Contract_Valid_Until = row3.Contract_Valid_Until;
								row7.Height = row3.Height;
								row7.Weight = row3.Weight;
								row7.LS = row3.LS;
								row7.ST = row3.ST;
								row7.RS = row3.RS;
								row7.LW = row3.LW;
								row7.LF = row3.LF;
								row7.CF = row3.CF;
								row7.RF = row3.RF;
								row7.RW = row3.RW;
								row7.LAM = row3.LAM;
								row7.CAM = row3.CAM;
								row7.RAM = row3.RAM;
								row7.LM = row3.LM;
								row7.LCM = row3.LCM;
								row7.CM = row3.CM;
								row7.RCM = row3.RCM;
								row7.RM = row3.RM;
								row7.LWB = row3.LWB;
								row7.LDM = row3.LDM;
								row7.CDM = row3.CDM;
								row7.RDM = row3.RDM;
								row7.RWB = row3.RWB;
								row7.LB = row3.LB;
								row7.LCB = row3.LCB;
								row7.CB = row3.CB;
								row7.RCB = row3.RCB;
								row7.RB = row3.RB;
								row7.Crossing = row3.Crossing;
								row7.Finishing = row3.Finishing;
								row7.HeadingAccuracy = row3.HeadingAccuracy;
								row7.ShortPassing = row3.ShortPassing;
								row7.Volleys = row3.Volleys;
								row7.Dribbling = row3.Dribbling;
								row7.Curve = row3.Curve;
								row7.FKAccuracy = row3.FKAccuracy;
								row7.LongPassing = row3.LongPassing;
								row7.BallControl = row3.BallControl;
								row7.Acceleration = row3.Acceleration;
								row7.SprintSpeed = row3.SprintSpeed;
								row7.Agility = row3.Agility;
								row7.Reactions = row3.Reactions;
								row7.Balance = row3.Balance;
								row7.ShotPower = row3.ShotPower;
								row7.Jumping = row3.Jumping;
								row7.Stamina = row3.Stamina;
								row7.Strength = row3.Strength;
								row7.LongShots = row3.LongShots;
								row7.Aggression = row3.Aggression;
								row7.Interceptions = row3.Interceptions;
								row7.Positioning = row3.Positioning;
								row7.Vision = row3.Vision;
								row7.Penalties = row3.Penalties;
								row7.Composure = row3.Composure;
								row7.Marking = row3.Marking;
								row7.StandingTackle = row3.StandingTackle;
								row7.SlidingTackle = row3.SlidingTackle;
								row7.GKDiving = row3.GKDiving;
								row7.GKHandling = row3.GKHandling;
								row7.GKKicking = row3.GKKicking;
								row7.GKPositioning = row3.GKPositioning;
								row7.GKReflexes = row3.GKReflexes;
								row7.Release_Clause = row3.Release_Clause;
								row7.Column88 = row3.Column88;
								log.debug("tFilterRow_2 - Process the record " + (nb_line_tFilterRow_2 + 1) + ".");

								nb_line_ok_tFilterRow_2++;
							} else {
								nb_line_reject_tFilterRow_2++;
							}

							nb_line_tFilterRow_2++;

							tos_count_tFilterRow_2++;

							/**
							 * [tFilterRow_2 main ] stop
							 */

							/**
							 * [tFilterRow_2 process_data_begin ] start
							 */

							currentComponent = "tFilterRow_2";

							/**
							 * [tFilterRow_2 process_data_begin ] stop
							 */
// Start of branch "row7"
							if (row7 != null) {

								/**
								 * [tDBOutput_2 main ] start
								 */

								currentComponent = "tDBOutput_2";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "row7"

									);
								}

								if (log.isTraceEnabled()) {
									log.trace("row7 - " + (row7 == null ? "" : row7.toLogString()));
								}

								whetherReject_tDBOutput_2 = false;
								if (row7.ID == null) {
									pstmt_tDBOutput_2.setNull(1, java.sql.Types.INTEGER);
								} else {
									pstmt_tDBOutput_2.setInt(1, row7.ID);
								}

								int checkCount_tDBOutput_2 = -1;
								try (java.sql.ResultSet rs_tDBOutput_2 = pstmt_tDBOutput_2.executeQuery()) {
									while (rs_tDBOutput_2.next()) {
										checkCount_tDBOutput_2 = rs_tDBOutput_2.getInt(1);
									}
								}
								if (checkCount_tDBOutput_2 > 0) {
									if (row7.Name == null) {
										pstmtUpdate_tDBOutput_2.setNull(1, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_2.setString(1, row7.Name);
									}

									if (row7.Age == null) {
										pstmtUpdate_tDBOutput_2.setNull(2, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_2.setInt(2, row7.Age);
									}

									if (row7.Photo == null) {
										pstmtUpdate_tDBOutput_2.setNull(3, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_2.setString(3, row7.Photo);
									}

									if (row7.Nationality == null) {
										pstmtUpdate_tDBOutput_2.setNull(4, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_2.setString(4, row7.Nationality);
									}

									if (row7.Flag == null) {
										pstmtUpdate_tDBOutput_2.setNull(5, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_2.setString(5, row7.Flag);
									}

									if (row7.Overall == null) {
										pstmtUpdate_tDBOutput_2.setNull(6, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_2.setInt(6, row7.Overall);
									}

									if (row7.Potential == null) {
										pstmtUpdate_tDBOutput_2.setNull(7, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_2.setInt(7, row7.Potential);
									}

									if (row7.Club == null) {
										pstmtUpdate_tDBOutput_2.setNull(8, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_2.setString(8, row7.Club);
									}

									if (row7.Club_Logo == null) {
										pstmtUpdate_tDBOutput_2.setNull(9, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_2.setString(9, row7.Club_Logo);
									}

									if (row7.Value == null) {
										pstmtUpdate_tDBOutput_2.setNull(10, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_2.setString(10, row7.Value);
									}

									if (row7.Wage == null) {
										pstmtUpdate_tDBOutput_2.setNull(11, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_2.setString(11, row7.Wage);
									}

									if (row7.Special == null) {
										pstmtUpdate_tDBOutput_2.setNull(12, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_2.setInt(12, row7.Special);
									}

									if (row7.Preferred_Foot == null) {
										pstmtUpdate_tDBOutput_2.setNull(13, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_2.setString(13, row7.Preferred_Foot);
									}

									if (row7.International_Reputation == null) {
										pstmtUpdate_tDBOutput_2.setNull(14, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_2.setInt(14, row7.International_Reputation);
									}

									if (row7.Weak_Foot == null) {
										pstmtUpdate_tDBOutput_2.setNull(15, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_2.setInt(15, row7.Weak_Foot);
									}

									if (row7.Skill_Moves == null) {
										pstmtUpdate_tDBOutput_2.setNull(16, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_2.setInt(16, row7.Skill_Moves);
									}

									if (row7.Work_Rate == null) {
										pstmtUpdate_tDBOutput_2.setNull(17, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_2.setString(17, row7.Work_Rate);
									}

									if (row7.Body_Type == null) {
										pstmtUpdate_tDBOutput_2.setNull(18, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_2.setString(18, row7.Body_Type);
									}

									if (row7.Real_Face == null) {
										pstmtUpdate_tDBOutput_2.setNull(19, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_2.setString(19, row7.Real_Face);
									}

									if (row7.Position == null) {
										pstmtUpdate_tDBOutput_2.setNull(20, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_2.setString(20, row7.Position);
									}

									if (row7.Jersey_Number == null) {
										pstmtUpdate_tDBOutput_2.setNull(21, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_2.setInt(21, row7.Jersey_Number);
									}

									if (row7.Joined == null) {
										pstmtUpdate_tDBOutput_2.setNull(22, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_2.setString(22, row7.Joined);
									}

									if (row7.Loaned_From == null) {
										pstmtUpdate_tDBOutput_2.setNull(23, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_2.setString(23, row7.Loaned_From);
									}

									if (row7.Contract_Valid_Until == null) {
										pstmtUpdate_tDBOutput_2.setNull(24, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_2.setString(24, row7.Contract_Valid_Until);
									}

									if (row7.Height == null) {
										pstmtUpdate_tDBOutput_2.setNull(25, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_2.setInt(25, row7.Height);
									}

									if (row7.Weight == null) {
										pstmtUpdate_tDBOutput_2.setNull(26, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_2.setString(26, row7.Weight);
									}

									if (row7.LS == null) {
										pstmtUpdate_tDBOutput_2.setNull(27, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_2.setString(27, row7.LS);
									}

									if (row7.ST == null) {
										pstmtUpdate_tDBOutput_2.setNull(28, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_2.setString(28, row7.ST);
									}

									if (row7.RS == null) {
										pstmtUpdate_tDBOutput_2.setNull(29, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_2.setString(29, row7.RS);
									}

									if (row7.LW == null) {
										pstmtUpdate_tDBOutput_2.setNull(30, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_2.setString(30, row7.LW);
									}

									if (row7.LF == null) {
										pstmtUpdate_tDBOutput_2.setNull(31, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_2.setString(31, row7.LF);
									}

									if (row7.CF == null) {
										pstmtUpdate_tDBOutput_2.setNull(32, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_2.setString(32, row7.CF);
									}

									if (row7.RF == null) {
										pstmtUpdate_tDBOutput_2.setNull(33, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_2.setString(33, row7.RF);
									}

									if (row7.RW == null) {
										pstmtUpdate_tDBOutput_2.setNull(34, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_2.setString(34, row7.RW);
									}

									if (row7.LAM == null) {
										pstmtUpdate_tDBOutput_2.setNull(35, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_2.setString(35, row7.LAM);
									}

									if (row7.CAM == null) {
										pstmtUpdate_tDBOutput_2.setNull(36, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_2.setString(36, row7.CAM);
									}

									if (row7.RAM == null) {
										pstmtUpdate_tDBOutput_2.setNull(37, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_2.setString(37, row7.RAM);
									}

									if (row7.LM == null) {
										pstmtUpdate_tDBOutput_2.setNull(38, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_2.setString(38, row7.LM);
									}

									if (row7.LCM == null) {
										pstmtUpdate_tDBOutput_2.setNull(39, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_2.setString(39, row7.LCM);
									}

									if (row7.CM == null) {
										pstmtUpdate_tDBOutput_2.setNull(40, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_2.setString(40, row7.CM);
									}

									if (row7.RCM == null) {
										pstmtUpdate_tDBOutput_2.setNull(41, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_2.setString(41, row7.RCM);
									}

									if (row7.RM == null) {
										pstmtUpdate_tDBOutput_2.setNull(42, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_2.setString(42, row7.RM);
									}

									if (row7.LWB == null) {
										pstmtUpdate_tDBOutput_2.setNull(43, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_2.setString(43, row7.LWB);
									}

									if (row7.LDM == null) {
										pstmtUpdate_tDBOutput_2.setNull(44, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_2.setString(44, row7.LDM);
									}

									if (row7.CDM == null) {
										pstmtUpdate_tDBOutput_2.setNull(45, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_2.setString(45, row7.CDM);
									}

									if (row7.RDM == null) {
										pstmtUpdate_tDBOutput_2.setNull(46, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_2.setString(46, row7.RDM);
									}

									if (row7.RWB == null) {
										pstmtUpdate_tDBOutput_2.setNull(47, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_2.setString(47, row7.RWB);
									}

									if (row7.LB == null) {
										pstmtUpdate_tDBOutput_2.setNull(48, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_2.setString(48, row7.LB);
									}

									if (row7.LCB == null) {
										pstmtUpdate_tDBOutput_2.setNull(49, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_2.setString(49, row7.LCB);
									}

									if (row7.CB == null) {
										pstmtUpdate_tDBOutput_2.setNull(50, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_2.setString(50, row7.CB);
									}

									if (row7.RCB == null) {
										pstmtUpdate_tDBOutput_2.setNull(51, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_2.setString(51, row7.RCB);
									}

									if (row7.RB == null) {
										pstmtUpdate_tDBOutput_2.setNull(52, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_2.setString(52, row7.RB);
									}

									if (row7.Crossing == null) {
										pstmtUpdate_tDBOutput_2.setNull(53, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_2.setString(53, row7.Crossing);
									}

									if (row7.Finishing == null) {
										pstmtUpdate_tDBOutput_2.setNull(54, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_2.setInt(54, row7.Finishing);
									}

									if (row7.HeadingAccuracy == null) {
										pstmtUpdate_tDBOutput_2.setNull(55, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_2.setInt(55, row7.HeadingAccuracy);
									}

									if (row7.ShortPassing == null) {
										pstmtUpdate_tDBOutput_2.setNull(56, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_2.setInt(56, row7.ShortPassing);
									}

									if (row7.Volleys == null) {
										pstmtUpdate_tDBOutput_2.setNull(57, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_2.setInt(57, row7.Volleys);
									}

									if (row7.Dribbling == null) {
										pstmtUpdate_tDBOutput_2.setNull(58, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_2.setInt(58, row7.Dribbling);
									}

									if (row7.Curve == null) {
										pstmtUpdate_tDBOutput_2.setNull(59, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_2.setInt(59, row7.Curve);
									}

									if (row7.FKAccuracy == null) {
										pstmtUpdate_tDBOutput_2.setNull(60, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_2.setInt(60, row7.FKAccuracy);
									}

									if (row7.LongPassing == null) {
										pstmtUpdate_tDBOutput_2.setNull(61, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_2.setInt(61, row7.LongPassing);
									}

									if (row7.BallControl == null) {
										pstmtUpdate_tDBOutput_2.setNull(62, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_2.setInt(62, row7.BallControl);
									}

									if (row7.Acceleration == null) {
										pstmtUpdate_tDBOutput_2.setNull(63, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_2.setInt(63, row7.Acceleration);
									}

									if (row7.SprintSpeed == null) {
										pstmtUpdate_tDBOutput_2.setNull(64, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_2.setInt(64, row7.SprintSpeed);
									}

									if (row7.Agility == null) {
										pstmtUpdate_tDBOutput_2.setNull(65, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_2.setInt(65, row7.Agility);
									}

									if (row7.Reactions == null) {
										pstmtUpdate_tDBOutput_2.setNull(66, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_2.setInt(66, row7.Reactions);
									}

									if (row7.Balance == null) {
										pstmtUpdate_tDBOutput_2.setNull(67, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_2.setInt(67, row7.Balance);
									}

									if (row7.ShotPower == null) {
										pstmtUpdate_tDBOutput_2.setNull(68, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_2.setInt(68, row7.ShotPower);
									}

									if (row7.Jumping == null) {
										pstmtUpdate_tDBOutput_2.setNull(69, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_2.setInt(69, row7.Jumping);
									}

									if (row7.Stamina == null) {
										pstmtUpdate_tDBOutput_2.setNull(70, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_2.setInt(70, row7.Stamina);
									}

									if (row7.Strength == null) {
										pstmtUpdate_tDBOutput_2.setNull(71, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_2.setInt(71, row7.Strength);
									}

									if (row7.LongShots == null) {
										pstmtUpdate_tDBOutput_2.setNull(72, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_2.setInt(72, row7.LongShots);
									}

									if (row7.Aggression == null) {
										pstmtUpdate_tDBOutput_2.setNull(73, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_2.setInt(73, row7.Aggression);
									}

									if (row7.Interceptions == null) {
										pstmtUpdate_tDBOutput_2.setNull(74, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_2.setInt(74, row7.Interceptions);
									}

									if (row7.Positioning == null) {
										pstmtUpdate_tDBOutput_2.setNull(75, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_2.setInt(75, row7.Positioning);
									}

									if (row7.Vision == null) {
										pstmtUpdate_tDBOutput_2.setNull(76, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_2.setInt(76, row7.Vision);
									}

									if (row7.Penalties == null) {
										pstmtUpdate_tDBOutput_2.setNull(77, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_2.setInt(77, row7.Penalties);
									}

									if (row7.Composure == null) {
										pstmtUpdate_tDBOutput_2.setNull(78, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_2.setInt(78, row7.Composure);
									}

									if (row7.Marking == null) {
										pstmtUpdate_tDBOutput_2.setNull(79, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_2.setInt(79, row7.Marking);
									}

									if (row7.StandingTackle == null) {
										pstmtUpdate_tDBOutput_2.setNull(80, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_2.setInt(80, row7.StandingTackle);
									}

									if (row7.SlidingTackle == null) {
										pstmtUpdate_tDBOutput_2.setNull(81, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_2.setInt(81, row7.SlidingTackle);
									}

									if (row7.GKDiving == null) {
										pstmtUpdate_tDBOutput_2.setNull(82, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_2.setInt(82, row7.GKDiving);
									}

									if (row7.GKHandling == null) {
										pstmtUpdate_tDBOutput_2.setNull(83, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_2.setInt(83, row7.GKHandling);
									}

									if (row7.GKKicking == null) {
										pstmtUpdate_tDBOutput_2.setNull(84, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_2.setInt(84, row7.GKKicking);
									}

									if (row7.GKPositioning == null) {
										pstmtUpdate_tDBOutput_2.setNull(85, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_2.setInt(85, row7.GKPositioning);
									}

									if (row7.GKReflexes == null) {
										pstmtUpdate_tDBOutput_2.setNull(86, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_2.setInt(86, row7.GKReflexes);
									}

									if (row7.Release_Clause == null) {
										pstmtUpdate_tDBOutput_2.setNull(87, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_2.setInt(87, row7.Release_Clause);
									}

									if (row7.Column88 == null) {
										pstmtUpdate_tDBOutput_2.setNull(88, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_2.setString(88, row7.Column88);
									}

									if (row7.ID == null) {
										pstmtUpdate_tDBOutput_2.setNull(89 + count_tDBOutput_2, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_2.setInt(89 + count_tDBOutput_2, row7.ID);
									}

									try {
										int processedCount_tDBOutput_2 = pstmtUpdate_tDBOutput_2.executeUpdate();
										updatedCount_tDBOutput_2 += processedCount_tDBOutput_2;
										rowsToCommitCount_tDBOutput_2 += processedCount_tDBOutput_2;
										nb_line_tDBOutput_2++;
										if (log.isDebugEnabled())
											log.debug("tDBOutput_2 - " + ("Updating") + (" the record ")
													+ (nb_line_tDBOutput_2) + ("."));
									} catch (java.lang.Exception e) {
										globalMap.put("tDBOutput_2_ERROR_MESSAGE", e.getMessage());
										whetherReject_tDBOutput_2 = true;
										nb_line_tDBOutput_2++;
										log.error("tDBOutput_2 - " + (e.getMessage()));
										System.err.print(e.getMessage());
									}
								} else {
									if (row7.ID == null) {
										pstmtInsert_tDBOutput_2.setNull(1, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_2.setInt(1, row7.ID);
									}

									if (row7.Name == null) {
										pstmtInsert_tDBOutput_2.setNull(2, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_2.setString(2, row7.Name);
									}

									if (row7.Age == null) {
										pstmtInsert_tDBOutput_2.setNull(3, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_2.setInt(3, row7.Age);
									}

									if (row7.Photo == null) {
										pstmtInsert_tDBOutput_2.setNull(4, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_2.setString(4, row7.Photo);
									}

									if (row7.Nationality == null) {
										pstmtInsert_tDBOutput_2.setNull(5, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_2.setString(5, row7.Nationality);
									}

									if (row7.Flag == null) {
										pstmtInsert_tDBOutput_2.setNull(6, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_2.setString(6, row7.Flag);
									}

									if (row7.Overall == null) {
										pstmtInsert_tDBOutput_2.setNull(7, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_2.setInt(7, row7.Overall);
									}

									if (row7.Potential == null) {
										pstmtInsert_tDBOutput_2.setNull(8, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_2.setInt(8, row7.Potential);
									}

									if (row7.Club == null) {
										pstmtInsert_tDBOutput_2.setNull(9, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_2.setString(9, row7.Club);
									}

									if (row7.Club_Logo == null) {
										pstmtInsert_tDBOutput_2.setNull(10, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_2.setString(10, row7.Club_Logo);
									}

									if (row7.Value == null) {
										pstmtInsert_tDBOutput_2.setNull(11, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_2.setString(11, row7.Value);
									}

									if (row7.Wage == null) {
										pstmtInsert_tDBOutput_2.setNull(12, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_2.setString(12, row7.Wage);
									}

									if (row7.Special == null) {
										pstmtInsert_tDBOutput_2.setNull(13, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_2.setInt(13, row7.Special);
									}

									if (row7.Preferred_Foot == null) {
										pstmtInsert_tDBOutput_2.setNull(14, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_2.setString(14, row7.Preferred_Foot);
									}

									if (row7.International_Reputation == null) {
										pstmtInsert_tDBOutput_2.setNull(15, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_2.setInt(15, row7.International_Reputation);
									}

									if (row7.Weak_Foot == null) {
										pstmtInsert_tDBOutput_2.setNull(16, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_2.setInt(16, row7.Weak_Foot);
									}

									if (row7.Skill_Moves == null) {
										pstmtInsert_tDBOutput_2.setNull(17, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_2.setInt(17, row7.Skill_Moves);
									}

									if (row7.Work_Rate == null) {
										pstmtInsert_tDBOutput_2.setNull(18, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_2.setString(18, row7.Work_Rate);
									}

									if (row7.Body_Type == null) {
										pstmtInsert_tDBOutput_2.setNull(19, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_2.setString(19, row7.Body_Type);
									}

									if (row7.Real_Face == null) {
										pstmtInsert_tDBOutput_2.setNull(20, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_2.setString(20, row7.Real_Face);
									}

									if (row7.Position == null) {
										pstmtInsert_tDBOutput_2.setNull(21, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_2.setString(21, row7.Position);
									}

									if (row7.Jersey_Number == null) {
										pstmtInsert_tDBOutput_2.setNull(22, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_2.setInt(22, row7.Jersey_Number);
									}

									if (row7.Joined == null) {
										pstmtInsert_tDBOutput_2.setNull(23, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_2.setString(23, row7.Joined);
									}

									if (row7.Loaned_From == null) {
										pstmtInsert_tDBOutput_2.setNull(24, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_2.setString(24, row7.Loaned_From);
									}

									if (row7.Contract_Valid_Until == null) {
										pstmtInsert_tDBOutput_2.setNull(25, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_2.setString(25, row7.Contract_Valid_Until);
									}

									if (row7.Height == null) {
										pstmtInsert_tDBOutput_2.setNull(26, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_2.setInt(26, row7.Height);
									}

									if (row7.Weight == null) {
										pstmtInsert_tDBOutput_2.setNull(27, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_2.setString(27, row7.Weight);
									}

									if (row7.LS == null) {
										pstmtInsert_tDBOutput_2.setNull(28, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_2.setString(28, row7.LS);
									}

									if (row7.ST == null) {
										pstmtInsert_tDBOutput_2.setNull(29, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_2.setString(29, row7.ST);
									}

									if (row7.RS == null) {
										pstmtInsert_tDBOutput_2.setNull(30, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_2.setString(30, row7.RS);
									}

									if (row7.LW == null) {
										pstmtInsert_tDBOutput_2.setNull(31, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_2.setString(31, row7.LW);
									}

									if (row7.LF == null) {
										pstmtInsert_tDBOutput_2.setNull(32, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_2.setString(32, row7.LF);
									}

									if (row7.CF == null) {
										pstmtInsert_tDBOutput_2.setNull(33, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_2.setString(33, row7.CF);
									}

									if (row7.RF == null) {
										pstmtInsert_tDBOutput_2.setNull(34, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_2.setString(34, row7.RF);
									}

									if (row7.RW == null) {
										pstmtInsert_tDBOutput_2.setNull(35, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_2.setString(35, row7.RW);
									}

									if (row7.LAM == null) {
										pstmtInsert_tDBOutput_2.setNull(36, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_2.setString(36, row7.LAM);
									}

									if (row7.CAM == null) {
										pstmtInsert_tDBOutput_2.setNull(37, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_2.setString(37, row7.CAM);
									}

									if (row7.RAM == null) {
										pstmtInsert_tDBOutput_2.setNull(38, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_2.setString(38, row7.RAM);
									}

									if (row7.LM == null) {
										pstmtInsert_tDBOutput_2.setNull(39, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_2.setString(39, row7.LM);
									}

									if (row7.LCM == null) {
										pstmtInsert_tDBOutput_2.setNull(40, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_2.setString(40, row7.LCM);
									}

									if (row7.CM == null) {
										pstmtInsert_tDBOutput_2.setNull(41, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_2.setString(41, row7.CM);
									}

									if (row7.RCM == null) {
										pstmtInsert_tDBOutput_2.setNull(42, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_2.setString(42, row7.RCM);
									}

									if (row7.RM == null) {
										pstmtInsert_tDBOutput_2.setNull(43, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_2.setString(43, row7.RM);
									}

									if (row7.LWB == null) {
										pstmtInsert_tDBOutput_2.setNull(44, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_2.setString(44, row7.LWB);
									}

									if (row7.LDM == null) {
										pstmtInsert_tDBOutput_2.setNull(45, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_2.setString(45, row7.LDM);
									}

									if (row7.CDM == null) {
										pstmtInsert_tDBOutput_2.setNull(46, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_2.setString(46, row7.CDM);
									}

									if (row7.RDM == null) {
										pstmtInsert_tDBOutput_2.setNull(47, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_2.setString(47, row7.RDM);
									}

									if (row7.RWB == null) {
										pstmtInsert_tDBOutput_2.setNull(48, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_2.setString(48, row7.RWB);
									}

									if (row7.LB == null) {
										pstmtInsert_tDBOutput_2.setNull(49, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_2.setString(49, row7.LB);
									}

									if (row7.LCB == null) {
										pstmtInsert_tDBOutput_2.setNull(50, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_2.setString(50, row7.LCB);
									}

									if (row7.CB == null) {
										pstmtInsert_tDBOutput_2.setNull(51, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_2.setString(51, row7.CB);
									}

									if (row7.RCB == null) {
										pstmtInsert_tDBOutput_2.setNull(52, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_2.setString(52, row7.RCB);
									}

									if (row7.RB == null) {
										pstmtInsert_tDBOutput_2.setNull(53, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_2.setString(53, row7.RB);
									}

									if (row7.Crossing == null) {
										pstmtInsert_tDBOutput_2.setNull(54, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_2.setString(54, row7.Crossing);
									}

									if (row7.Finishing == null) {
										pstmtInsert_tDBOutput_2.setNull(55, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_2.setInt(55, row7.Finishing);
									}

									if (row7.HeadingAccuracy == null) {
										pstmtInsert_tDBOutput_2.setNull(56, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_2.setInt(56, row7.HeadingAccuracy);
									}

									if (row7.ShortPassing == null) {
										pstmtInsert_tDBOutput_2.setNull(57, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_2.setInt(57, row7.ShortPassing);
									}

									if (row7.Volleys == null) {
										pstmtInsert_tDBOutput_2.setNull(58, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_2.setInt(58, row7.Volleys);
									}

									if (row7.Dribbling == null) {
										pstmtInsert_tDBOutput_2.setNull(59, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_2.setInt(59, row7.Dribbling);
									}

									if (row7.Curve == null) {
										pstmtInsert_tDBOutput_2.setNull(60, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_2.setInt(60, row7.Curve);
									}

									if (row7.FKAccuracy == null) {
										pstmtInsert_tDBOutput_2.setNull(61, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_2.setInt(61, row7.FKAccuracy);
									}

									if (row7.LongPassing == null) {
										pstmtInsert_tDBOutput_2.setNull(62, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_2.setInt(62, row7.LongPassing);
									}

									if (row7.BallControl == null) {
										pstmtInsert_tDBOutput_2.setNull(63, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_2.setInt(63, row7.BallControl);
									}

									if (row7.Acceleration == null) {
										pstmtInsert_tDBOutput_2.setNull(64, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_2.setInt(64, row7.Acceleration);
									}

									if (row7.SprintSpeed == null) {
										pstmtInsert_tDBOutput_2.setNull(65, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_2.setInt(65, row7.SprintSpeed);
									}

									if (row7.Agility == null) {
										pstmtInsert_tDBOutput_2.setNull(66, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_2.setInt(66, row7.Agility);
									}

									if (row7.Reactions == null) {
										pstmtInsert_tDBOutput_2.setNull(67, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_2.setInt(67, row7.Reactions);
									}

									if (row7.Balance == null) {
										pstmtInsert_tDBOutput_2.setNull(68, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_2.setInt(68, row7.Balance);
									}

									if (row7.ShotPower == null) {
										pstmtInsert_tDBOutput_2.setNull(69, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_2.setInt(69, row7.ShotPower);
									}

									if (row7.Jumping == null) {
										pstmtInsert_tDBOutput_2.setNull(70, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_2.setInt(70, row7.Jumping);
									}

									if (row7.Stamina == null) {
										pstmtInsert_tDBOutput_2.setNull(71, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_2.setInt(71, row7.Stamina);
									}

									if (row7.Strength == null) {
										pstmtInsert_tDBOutput_2.setNull(72, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_2.setInt(72, row7.Strength);
									}

									if (row7.LongShots == null) {
										pstmtInsert_tDBOutput_2.setNull(73, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_2.setInt(73, row7.LongShots);
									}

									if (row7.Aggression == null) {
										pstmtInsert_tDBOutput_2.setNull(74, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_2.setInt(74, row7.Aggression);
									}

									if (row7.Interceptions == null) {
										pstmtInsert_tDBOutput_2.setNull(75, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_2.setInt(75, row7.Interceptions);
									}

									if (row7.Positioning == null) {
										pstmtInsert_tDBOutput_2.setNull(76, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_2.setInt(76, row7.Positioning);
									}

									if (row7.Vision == null) {
										pstmtInsert_tDBOutput_2.setNull(77, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_2.setInt(77, row7.Vision);
									}

									if (row7.Penalties == null) {
										pstmtInsert_tDBOutput_2.setNull(78, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_2.setInt(78, row7.Penalties);
									}

									if (row7.Composure == null) {
										pstmtInsert_tDBOutput_2.setNull(79, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_2.setInt(79, row7.Composure);
									}

									if (row7.Marking == null) {
										pstmtInsert_tDBOutput_2.setNull(80, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_2.setInt(80, row7.Marking);
									}

									if (row7.StandingTackle == null) {
										pstmtInsert_tDBOutput_2.setNull(81, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_2.setInt(81, row7.StandingTackle);
									}

									if (row7.SlidingTackle == null) {
										pstmtInsert_tDBOutput_2.setNull(82, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_2.setInt(82, row7.SlidingTackle);
									}

									if (row7.GKDiving == null) {
										pstmtInsert_tDBOutput_2.setNull(83, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_2.setInt(83, row7.GKDiving);
									}

									if (row7.GKHandling == null) {
										pstmtInsert_tDBOutput_2.setNull(84, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_2.setInt(84, row7.GKHandling);
									}

									if (row7.GKKicking == null) {
										pstmtInsert_tDBOutput_2.setNull(85, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_2.setInt(85, row7.GKKicking);
									}

									if (row7.GKPositioning == null) {
										pstmtInsert_tDBOutput_2.setNull(86, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_2.setInt(86, row7.GKPositioning);
									}

									if (row7.GKReflexes == null) {
										pstmtInsert_tDBOutput_2.setNull(87, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_2.setInt(87, row7.GKReflexes);
									}

									if (row7.Release_Clause == null) {
										pstmtInsert_tDBOutput_2.setNull(88, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_2.setInt(88, row7.Release_Clause);
									}

									if (row7.Column88 == null) {
										pstmtInsert_tDBOutput_2.setNull(89, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_2.setString(89, row7.Column88);
									}

									try {
										int processedCount_tDBOutput_2 = pstmtInsert_tDBOutput_2.executeUpdate();
										insertedCount_tDBOutput_2 += processedCount_tDBOutput_2;
										rowsToCommitCount_tDBOutput_2 += processedCount_tDBOutput_2;
										nb_line_tDBOutput_2++;
										if (log.isDebugEnabled())
											log.debug("tDBOutput_2 - " + ("Inserting") + (" the record ")
													+ (nb_line_tDBOutput_2) + ("."));
									} catch (java.lang.Exception e) {
										globalMap.put("tDBOutput_2_ERROR_MESSAGE", e.getMessage());
										whetherReject_tDBOutput_2 = true;
										nb_line_tDBOutput_2++;
										log.error("tDBOutput_2 - " + (e.getMessage()));
										System.err.print(e.getMessage());
									}
								}

								tos_count_tDBOutput_2++;

								/**
								 * [tDBOutput_2 main ] stop
								 */

								/**
								 * [tDBOutput_2 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_2";

								/**
								 * [tDBOutput_2 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_2 process_data_end ] start
								 */

								currentComponent = "tDBOutput_2";

								/**
								 * [tDBOutput_2 process_data_end ] stop
								 */

							} // End of branch "row7"

							/**
							 * [tFilterRow_2 process_data_end ] start
							 */

							currentComponent = "tFilterRow_2";

							/**
							 * [tFilterRow_2 process_data_end ] stop
							 */

							/**
							 * [tFilterRow_3 main ] start
							 */

							currentComponent = "tFilterRow_3";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "row4"

								);
							}

							if (log.isTraceEnabled()) {
								log.trace("row4 - " + (row4 == null ? "" : row4.toLogString()));
							}

							row8 = null;
							Operator_tFilterRow_3 ope_tFilterRow_3 = new Operator_tFilterRow_3("||");
							ope_tFilterRow_3.matches(
									(row4.Position == null ? false : row4.Position.matches("CM") == true),
									" Position.matches(\"CM\") == true failed");
							ope_tFilterRow_3.matches(
									(row4.Position == null ? false : row4.Position.matches("DM") == true),
									" Position.matches(\"DM\") == true failed");
							ope_tFilterRow_3.matches(
									(row4.Position == null ? false : row4.Position.matches("CAM") == true),
									" Position.matches(\"CAM\") == true failed");
							ope_tFilterRow_3.matches(
									(row4.Position == null ? false : row4.Position.matches("LM") == true),
									" Position.matches(\"LM\") == true failed");
							ope_tFilterRow_3.matches(
									(row4.Position == null ? false : row4.Position.matches("RM") == true),
									" Position.matches(\"RM\") == true failed");
							ope_tFilterRow_3.matches(
									(row4.Position == null ? false : row4.Position.matches("LAM") == true),
									" Position.matches(\"LAM\") == true failed");
							ope_tFilterRow_3.matches(
									(row4.Position == null ? false : row4.Position.matches("RAM") == true),
									" Position.matches(\"RAM\") == true failed");
							ope_tFilterRow_3.matches(
									(row4.Position == null ? false : row4.Position.matches("LCM") == true),
									" Position.matches(\"LCM\") == true failed");
							ope_tFilterRow_3.matches(
									(row4.Position == null ? false : row4.Position.matches("RCM") == true),
									" Position.matches(\"RCM\") == true failed");
							ope_tFilterRow_3.matches(
									(row4.Position == null ? false : row4.Position.matches("LDM") == true),
									" Position.matches(\"LDM\") == true failed");
							ope_tFilterRow_3.matches(
									(row4.Position == null ? false : row4.Position.matches("RDM") == true),
									" Position.matches(\"RDM\") == true failed");

							if (ope_tFilterRow_3.getMatchFlag()) {
								if (row8 == null) {
									row8 = new row8Struct();
								}
								row8.ID = row4.ID;
								row8.Name = row4.Name;
								row8.Age = row4.Age;
								row8.Photo = row4.Photo;
								row8.Nationality = row4.Nationality;
								row8.Flag = row4.Flag;
								row8.Overall = row4.Overall;
								row8.Potential = row4.Potential;
								row8.Club = row4.Club;
								row8.Club_Logo = row4.Club_Logo;
								row8.Value = row4.Value;
								row8.Wage = row4.Wage;
								row8.Special = row4.Special;
								row8.Preferred_Foot = row4.Preferred_Foot;
								row8.International_Reputation = row4.International_Reputation;
								row8.Weak_Foot = row4.Weak_Foot;
								row8.Skill_Moves = row4.Skill_Moves;
								row8.Work_Rate = row4.Work_Rate;
								row8.Body_Type = row4.Body_Type;
								row8.Real_Face = row4.Real_Face;
								row8.Position = row4.Position;
								row8.Jersey_Number = row4.Jersey_Number;
								row8.Joined = row4.Joined;
								row8.Loaned_From = row4.Loaned_From;
								row8.Contract_Valid_Until = row4.Contract_Valid_Until;
								row8.Height = row4.Height;
								row8.Weight = row4.Weight;
								row8.LS = row4.LS;
								row8.ST = row4.ST;
								row8.RS = row4.RS;
								row8.LW = row4.LW;
								row8.LF = row4.LF;
								row8.CF = row4.CF;
								row8.RF = row4.RF;
								row8.RW = row4.RW;
								row8.LAM = row4.LAM;
								row8.CAM = row4.CAM;
								row8.RAM = row4.RAM;
								row8.LM = row4.LM;
								row8.LCM = row4.LCM;
								row8.CM = row4.CM;
								row8.RCM = row4.RCM;
								row8.RM = row4.RM;
								row8.LWB = row4.LWB;
								row8.LDM = row4.LDM;
								row8.CDM = row4.CDM;
								row8.RDM = row4.RDM;
								row8.RWB = row4.RWB;
								row8.LB = row4.LB;
								row8.LCB = row4.LCB;
								row8.CB = row4.CB;
								row8.RCB = row4.RCB;
								row8.RB = row4.RB;
								row8.Crossing = row4.Crossing;
								row8.Finishing = row4.Finishing;
								row8.HeadingAccuracy = row4.HeadingAccuracy;
								row8.ShortPassing = row4.ShortPassing;
								row8.Volleys = row4.Volleys;
								row8.Dribbling = row4.Dribbling;
								row8.Curve = row4.Curve;
								row8.FKAccuracy = row4.FKAccuracy;
								row8.LongPassing = row4.LongPassing;
								row8.BallControl = row4.BallControl;
								row8.Acceleration = row4.Acceleration;
								row8.SprintSpeed = row4.SprintSpeed;
								row8.Agility = row4.Agility;
								row8.Reactions = row4.Reactions;
								row8.Balance = row4.Balance;
								row8.ShotPower = row4.ShotPower;
								row8.Jumping = row4.Jumping;
								row8.Stamina = row4.Stamina;
								row8.Strength = row4.Strength;
								row8.LongShots = row4.LongShots;
								row8.Aggression = row4.Aggression;
								row8.Interceptions = row4.Interceptions;
								row8.Positioning = row4.Positioning;
								row8.Vision = row4.Vision;
								row8.Penalties = row4.Penalties;
								row8.Composure = row4.Composure;
								row8.Marking = row4.Marking;
								row8.StandingTackle = row4.StandingTackle;
								row8.SlidingTackle = row4.SlidingTackle;
								row8.GKDiving = row4.GKDiving;
								row8.GKHandling = row4.GKHandling;
								row8.GKKicking = row4.GKKicking;
								row8.GKPositioning = row4.GKPositioning;
								row8.GKReflexes = row4.GKReflexes;
								row8.Release_Clause = row4.Release_Clause;
								row8.Column88 = row4.Column88;
								log.debug("tFilterRow_3 - Process the record " + (nb_line_tFilterRow_3 + 1) + ".");

								nb_line_ok_tFilterRow_3++;
							} else {
								nb_line_reject_tFilterRow_3++;
							}

							nb_line_tFilterRow_3++;

							tos_count_tFilterRow_3++;

							/**
							 * [tFilterRow_3 main ] stop
							 */

							/**
							 * [tFilterRow_3 process_data_begin ] start
							 */

							currentComponent = "tFilterRow_3";

							/**
							 * [tFilterRow_3 process_data_begin ] stop
							 */
// Start of branch "row8"
							if (row8 != null) {

								/**
								 * [tDBOutput_3 main ] start
								 */

								currentComponent = "tDBOutput_3";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "row8"

									);
								}

								if (log.isTraceEnabled()) {
									log.trace("row8 - " + (row8 == null ? "" : row8.toLogString()));
								}

								whetherReject_tDBOutput_3 = false;
								if (row8.ID == null) {
									pstmt_tDBOutput_3.setNull(1, java.sql.Types.INTEGER);
								} else {
									pstmt_tDBOutput_3.setInt(1, row8.ID);
								}

								int checkCount_tDBOutput_3 = -1;
								try (java.sql.ResultSet rs_tDBOutput_3 = pstmt_tDBOutput_3.executeQuery()) {
									while (rs_tDBOutput_3.next()) {
										checkCount_tDBOutput_3 = rs_tDBOutput_3.getInt(1);
									}
								}
								if (checkCount_tDBOutput_3 > 0) {
									if (row8.Name == null) {
										pstmtUpdate_tDBOutput_3.setNull(1, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_3.setString(1, row8.Name);
									}

									if (row8.Age == null) {
										pstmtUpdate_tDBOutput_3.setNull(2, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_3.setInt(2, row8.Age);
									}

									if (row8.Photo == null) {
										pstmtUpdate_tDBOutput_3.setNull(3, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_3.setString(3, row8.Photo);
									}

									if (row8.Nationality == null) {
										pstmtUpdate_tDBOutput_3.setNull(4, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_3.setString(4, row8.Nationality);
									}

									if (row8.Flag == null) {
										pstmtUpdate_tDBOutput_3.setNull(5, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_3.setString(5, row8.Flag);
									}

									if (row8.Overall == null) {
										pstmtUpdate_tDBOutput_3.setNull(6, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_3.setInt(6, row8.Overall);
									}

									if (row8.Potential == null) {
										pstmtUpdate_tDBOutput_3.setNull(7, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_3.setInt(7, row8.Potential);
									}

									if (row8.Club == null) {
										pstmtUpdate_tDBOutput_3.setNull(8, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_3.setString(8, row8.Club);
									}

									if (row8.Club_Logo == null) {
										pstmtUpdate_tDBOutput_3.setNull(9, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_3.setString(9, row8.Club_Logo);
									}

									if (row8.Value == null) {
										pstmtUpdate_tDBOutput_3.setNull(10, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_3.setString(10, row8.Value);
									}

									if (row8.Wage == null) {
										pstmtUpdate_tDBOutput_3.setNull(11, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_3.setString(11, row8.Wage);
									}

									if (row8.Special == null) {
										pstmtUpdate_tDBOutput_3.setNull(12, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_3.setInt(12, row8.Special);
									}

									if (row8.Preferred_Foot == null) {
										pstmtUpdate_tDBOutput_3.setNull(13, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_3.setString(13, row8.Preferred_Foot);
									}

									if (row8.International_Reputation == null) {
										pstmtUpdate_tDBOutput_3.setNull(14, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_3.setInt(14, row8.International_Reputation);
									}

									if (row8.Weak_Foot == null) {
										pstmtUpdate_tDBOutput_3.setNull(15, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_3.setInt(15, row8.Weak_Foot);
									}

									if (row8.Skill_Moves == null) {
										pstmtUpdate_tDBOutput_3.setNull(16, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_3.setInt(16, row8.Skill_Moves);
									}

									if (row8.Work_Rate == null) {
										pstmtUpdate_tDBOutput_3.setNull(17, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_3.setString(17, row8.Work_Rate);
									}

									if (row8.Body_Type == null) {
										pstmtUpdate_tDBOutput_3.setNull(18, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_3.setString(18, row8.Body_Type);
									}

									if (row8.Real_Face == null) {
										pstmtUpdate_tDBOutput_3.setNull(19, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_3.setString(19, row8.Real_Face);
									}

									if (row8.Position == null) {
										pstmtUpdate_tDBOutput_3.setNull(20, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_3.setString(20, row8.Position);
									}

									if (row8.Jersey_Number == null) {
										pstmtUpdate_tDBOutput_3.setNull(21, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_3.setInt(21, row8.Jersey_Number);
									}

									if (row8.Joined == null) {
										pstmtUpdate_tDBOutput_3.setNull(22, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_3.setString(22, row8.Joined);
									}

									if (row8.Loaned_From == null) {
										pstmtUpdate_tDBOutput_3.setNull(23, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_3.setString(23, row8.Loaned_From);
									}

									if (row8.Contract_Valid_Until == null) {
										pstmtUpdate_tDBOutput_3.setNull(24, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_3.setString(24, row8.Contract_Valid_Until);
									}

									if (row8.Height == null) {
										pstmtUpdate_tDBOutput_3.setNull(25, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_3.setInt(25, row8.Height);
									}

									if (row8.Weight == null) {
										pstmtUpdate_tDBOutput_3.setNull(26, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_3.setString(26, row8.Weight);
									}

									if (row8.LS == null) {
										pstmtUpdate_tDBOutput_3.setNull(27, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_3.setString(27, row8.LS);
									}

									if (row8.ST == null) {
										pstmtUpdate_tDBOutput_3.setNull(28, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_3.setString(28, row8.ST);
									}

									if (row8.RS == null) {
										pstmtUpdate_tDBOutput_3.setNull(29, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_3.setString(29, row8.RS);
									}

									if (row8.LW == null) {
										pstmtUpdate_tDBOutput_3.setNull(30, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_3.setString(30, row8.LW);
									}

									if (row8.LF == null) {
										pstmtUpdate_tDBOutput_3.setNull(31, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_3.setString(31, row8.LF);
									}

									if (row8.CF == null) {
										pstmtUpdate_tDBOutput_3.setNull(32, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_3.setString(32, row8.CF);
									}

									if (row8.RF == null) {
										pstmtUpdate_tDBOutput_3.setNull(33, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_3.setString(33, row8.RF);
									}

									if (row8.RW == null) {
										pstmtUpdate_tDBOutput_3.setNull(34, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_3.setString(34, row8.RW);
									}

									if (row8.LAM == null) {
										pstmtUpdate_tDBOutput_3.setNull(35, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_3.setString(35, row8.LAM);
									}

									if (row8.CAM == null) {
										pstmtUpdate_tDBOutput_3.setNull(36, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_3.setString(36, row8.CAM);
									}

									if (row8.RAM == null) {
										pstmtUpdate_tDBOutput_3.setNull(37, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_3.setString(37, row8.RAM);
									}

									if (row8.LM == null) {
										pstmtUpdate_tDBOutput_3.setNull(38, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_3.setString(38, row8.LM);
									}

									if (row8.LCM == null) {
										pstmtUpdate_tDBOutput_3.setNull(39, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_3.setString(39, row8.LCM);
									}

									if (row8.CM == null) {
										pstmtUpdate_tDBOutput_3.setNull(40, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_3.setString(40, row8.CM);
									}

									if (row8.RCM == null) {
										pstmtUpdate_tDBOutput_3.setNull(41, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_3.setString(41, row8.RCM);
									}

									if (row8.RM == null) {
										pstmtUpdate_tDBOutput_3.setNull(42, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_3.setString(42, row8.RM);
									}

									if (row8.LWB == null) {
										pstmtUpdate_tDBOutput_3.setNull(43, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_3.setString(43, row8.LWB);
									}

									if (row8.LDM == null) {
										pstmtUpdate_tDBOutput_3.setNull(44, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_3.setString(44, row8.LDM);
									}

									if (row8.CDM == null) {
										pstmtUpdate_tDBOutput_3.setNull(45, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_3.setString(45, row8.CDM);
									}

									if (row8.RDM == null) {
										pstmtUpdate_tDBOutput_3.setNull(46, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_3.setString(46, row8.RDM);
									}

									if (row8.RWB == null) {
										pstmtUpdate_tDBOutput_3.setNull(47, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_3.setString(47, row8.RWB);
									}

									if (row8.LB == null) {
										pstmtUpdate_tDBOutput_3.setNull(48, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_3.setString(48, row8.LB);
									}

									if (row8.LCB == null) {
										pstmtUpdate_tDBOutput_3.setNull(49, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_3.setString(49, row8.LCB);
									}

									if (row8.CB == null) {
										pstmtUpdate_tDBOutput_3.setNull(50, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_3.setString(50, row8.CB);
									}

									if (row8.RCB == null) {
										pstmtUpdate_tDBOutput_3.setNull(51, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_3.setString(51, row8.RCB);
									}

									if (row8.RB == null) {
										pstmtUpdate_tDBOutput_3.setNull(52, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_3.setString(52, row8.RB);
									}

									if (row8.Crossing == null) {
										pstmtUpdate_tDBOutput_3.setNull(53, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_3.setString(53, row8.Crossing);
									}

									if (row8.Finishing == null) {
										pstmtUpdate_tDBOutput_3.setNull(54, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_3.setInt(54, row8.Finishing);
									}

									if (row8.HeadingAccuracy == null) {
										pstmtUpdate_tDBOutput_3.setNull(55, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_3.setInt(55, row8.HeadingAccuracy);
									}

									if (row8.ShortPassing == null) {
										pstmtUpdate_tDBOutput_3.setNull(56, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_3.setInt(56, row8.ShortPassing);
									}

									if (row8.Volleys == null) {
										pstmtUpdate_tDBOutput_3.setNull(57, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_3.setInt(57, row8.Volleys);
									}

									if (row8.Dribbling == null) {
										pstmtUpdate_tDBOutput_3.setNull(58, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_3.setInt(58, row8.Dribbling);
									}

									if (row8.Curve == null) {
										pstmtUpdate_tDBOutput_3.setNull(59, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_3.setInt(59, row8.Curve);
									}

									if (row8.FKAccuracy == null) {
										pstmtUpdate_tDBOutput_3.setNull(60, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_3.setInt(60, row8.FKAccuracy);
									}

									if (row8.LongPassing == null) {
										pstmtUpdate_tDBOutput_3.setNull(61, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_3.setInt(61, row8.LongPassing);
									}

									if (row8.BallControl == null) {
										pstmtUpdate_tDBOutput_3.setNull(62, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_3.setInt(62, row8.BallControl);
									}

									if (row8.Acceleration == null) {
										pstmtUpdate_tDBOutput_3.setNull(63, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_3.setInt(63, row8.Acceleration);
									}

									if (row8.SprintSpeed == null) {
										pstmtUpdate_tDBOutput_3.setNull(64, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_3.setInt(64, row8.SprintSpeed);
									}

									if (row8.Agility == null) {
										pstmtUpdate_tDBOutput_3.setNull(65, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_3.setInt(65, row8.Agility);
									}

									if (row8.Reactions == null) {
										pstmtUpdate_tDBOutput_3.setNull(66, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_3.setInt(66, row8.Reactions);
									}

									if (row8.Balance == null) {
										pstmtUpdate_tDBOutput_3.setNull(67, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_3.setInt(67, row8.Balance);
									}

									if (row8.ShotPower == null) {
										pstmtUpdate_tDBOutput_3.setNull(68, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_3.setInt(68, row8.ShotPower);
									}

									if (row8.Jumping == null) {
										pstmtUpdate_tDBOutput_3.setNull(69, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_3.setInt(69, row8.Jumping);
									}

									if (row8.Stamina == null) {
										pstmtUpdate_tDBOutput_3.setNull(70, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_3.setInt(70, row8.Stamina);
									}

									if (row8.Strength == null) {
										pstmtUpdate_tDBOutput_3.setNull(71, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_3.setInt(71, row8.Strength);
									}

									if (row8.LongShots == null) {
										pstmtUpdate_tDBOutput_3.setNull(72, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_3.setInt(72, row8.LongShots);
									}

									if (row8.Aggression == null) {
										pstmtUpdate_tDBOutput_3.setNull(73, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_3.setInt(73, row8.Aggression);
									}

									if (row8.Interceptions == null) {
										pstmtUpdate_tDBOutput_3.setNull(74, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_3.setInt(74, row8.Interceptions);
									}

									if (row8.Positioning == null) {
										pstmtUpdate_tDBOutput_3.setNull(75, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_3.setInt(75, row8.Positioning);
									}

									if (row8.Vision == null) {
										pstmtUpdate_tDBOutput_3.setNull(76, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_3.setInt(76, row8.Vision);
									}

									if (row8.Penalties == null) {
										pstmtUpdate_tDBOutput_3.setNull(77, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_3.setInt(77, row8.Penalties);
									}

									if (row8.Composure == null) {
										pstmtUpdate_tDBOutput_3.setNull(78, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_3.setInt(78, row8.Composure);
									}

									if (row8.Marking == null) {
										pstmtUpdate_tDBOutput_3.setNull(79, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_3.setInt(79, row8.Marking);
									}

									if (row8.StandingTackle == null) {
										pstmtUpdate_tDBOutput_3.setNull(80, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_3.setInt(80, row8.StandingTackle);
									}

									if (row8.SlidingTackle == null) {
										pstmtUpdate_tDBOutput_3.setNull(81, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_3.setInt(81, row8.SlidingTackle);
									}

									if (row8.GKDiving == null) {
										pstmtUpdate_tDBOutput_3.setNull(82, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_3.setInt(82, row8.GKDiving);
									}

									if (row8.GKHandling == null) {
										pstmtUpdate_tDBOutput_3.setNull(83, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_3.setInt(83, row8.GKHandling);
									}

									if (row8.GKKicking == null) {
										pstmtUpdate_tDBOutput_3.setNull(84, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_3.setInt(84, row8.GKKicking);
									}

									if (row8.GKPositioning == null) {
										pstmtUpdate_tDBOutput_3.setNull(85, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_3.setInt(85, row8.GKPositioning);
									}

									if (row8.GKReflexes == null) {
										pstmtUpdate_tDBOutput_3.setNull(86, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_3.setInt(86, row8.GKReflexes);
									}

									if (row8.Release_Clause == null) {
										pstmtUpdate_tDBOutput_3.setNull(87, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_3.setInt(87, row8.Release_Clause);
									}

									if (row8.Column88 == null) {
										pstmtUpdate_tDBOutput_3.setNull(88, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_3.setString(88, row8.Column88);
									}

									if (row8.ID == null) {
										pstmtUpdate_tDBOutput_3.setNull(89 + count_tDBOutput_3, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_3.setInt(89 + count_tDBOutput_3, row8.ID);
									}

									try {
										int processedCount_tDBOutput_3 = pstmtUpdate_tDBOutput_3.executeUpdate();
										updatedCount_tDBOutput_3 += processedCount_tDBOutput_3;
										rowsToCommitCount_tDBOutput_3 += processedCount_tDBOutput_3;
										nb_line_tDBOutput_3++;
										if (log.isDebugEnabled())
											log.debug("tDBOutput_3 - " + ("Updating") + (" the record ")
													+ (nb_line_tDBOutput_3) + ("."));
									} catch (java.lang.Exception e) {
										globalMap.put("tDBOutput_3_ERROR_MESSAGE", e.getMessage());
										whetherReject_tDBOutput_3 = true;
										nb_line_tDBOutput_3++;
										log.error("tDBOutput_3 - " + (e.getMessage()));
										System.err.print(e.getMessage());
									}
								} else {
									if (row8.ID == null) {
										pstmtInsert_tDBOutput_3.setNull(1, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_3.setInt(1, row8.ID);
									}

									if (row8.Name == null) {
										pstmtInsert_tDBOutput_3.setNull(2, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_3.setString(2, row8.Name);
									}

									if (row8.Age == null) {
										pstmtInsert_tDBOutput_3.setNull(3, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_3.setInt(3, row8.Age);
									}

									if (row8.Photo == null) {
										pstmtInsert_tDBOutput_3.setNull(4, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_3.setString(4, row8.Photo);
									}

									if (row8.Nationality == null) {
										pstmtInsert_tDBOutput_3.setNull(5, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_3.setString(5, row8.Nationality);
									}

									if (row8.Flag == null) {
										pstmtInsert_tDBOutput_3.setNull(6, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_3.setString(6, row8.Flag);
									}

									if (row8.Overall == null) {
										pstmtInsert_tDBOutput_3.setNull(7, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_3.setInt(7, row8.Overall);
									}

									if (row8.Potential == null) {
										pstmtInsert_tDBOutput_3.setNull(8, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_3.setInt(8, row8.Potential);
									}

									if (row8.Club == null) {
										pstmtInsert_tDBOutput_3.setNull(9, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_3.setString(9, row8.Club);
									}

									if (row8.Club_Logo == null) {
										pstmtInsert_tDBOutput_3.setNull(10, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_3.setString(10, row8.Club_Logo);
									}

									if (row8.Value == null) {
										pstmtInsert_tDBOutput_3.setNull(11, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_3.setString(11, row8.Value);
									}

									if (row8.Wage == null) {
										pstmtInsert_tDBOutput_3.setNull(12, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_3.setString(12, row8.Wage);
									}

									if (row8.Special == null) {
										pstmtInsert_tDBOutput_3.setNull(13, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_3.setInt(13, row8.Special);
									}

									if (row8.Preferred_Foot == null) {
										pstmtInsert_tDBOutput_3.setNull(14, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_3.setString(14, row8.Preferred_Foot);
									}

									if (row8.International_Reputation == null) {
										pstmtInsert_tDBOutput_3.setNull(15, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_3.setInt(15, row8.International_Reputation);
									}

									if (row8.Weak_Foot == null) {
										pstmtInsert_tDBOutput_3.setNull(16, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_3.setInt(16, row8.Weak_Foot);
									}

									if (row8.Skill_Moves == null) {
										pstmtInsert_tDBOutput_3.setNull(17, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_3.setInt(17, row8.Skill_Moves);
									}

									if (row8.Work_Rate == null) {
										pstmtInsert_tDBOutput_3.setNull(18, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_3.setString(18, row8.Work_Rate);
									}

									if (row8.Body_Type == null) {
										pstmtInsert_tDBOutput_3.setNull(19, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_3.setString(19, row8.Body_Type);
									}

									if (row8.Real_Face == null) {
										pstmtInsert_tDBOutput_3.setNull(20, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_3.setString(20, row8.Real_Face);
									}

									if (row8.Position == null) {
										pstmtInsert_tDBOutput_3.setNull(21, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_3.setString(21, row8.Position);
									}

									if (row8.Jersey_Number == null) {
										pstmtInsert_tDBOutput_3.setNull(22, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_3.setInt(22, row8.Jersey_Number);
									}

									if (row8.Joined == null) {
										pstmtInsert_tDBOutput_3.setNull(23, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_3.setString(23, row8.Joined);
									}

									if (row8.Loaned_From == null) {
										pstmtInsert_tDBOutput_3.setNull(24, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_3.setString(24, row8.Loaned_From);
									}

									if (row8.Contract_Valid_Until == null) {
										pstmtInsert_tDBOutput_3.setNull(25, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_3.setString(25, row8.Contract_Valid_Until);
									}

									if (row8.Height == null) {
										pstmtInsert_tDBOutput_3.setNull(26, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_3.setInt(26, row8.Height);
									}

									if (row8.Weight == null) {
										pstmtInsert_tDBOutput_3.setNull(27, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_3.setString(27, row8.Weight);
									}

									if (row8.LS == null) {
										pstmtInsert_tDBOutput_3.setNull(28, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_3.setString(28, row8.LS);
									}

									if (row8.ST == null) {
										pstmtInsert_tDBOutput_3.setNull(29, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_3.setString(29, row8.ST);
									}

									if (row8.RS == null) {
										pstmtInsert_tDBOutput_3.setNull(30, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_3.setString(30, row8.RS);
									}

									if (row8.LW == null) {
										pstmtInsert_tDBOutput_3.setNull(31, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_3.setString(31, row8.LW);
									}

									if (row8.LF == null) {
										pstmtInsert_tDBOutput_3.setNull(32, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_3.setString(32, row8.LF);
									}

									if (row8.CF == null) {
										pstmtInsert_tDBOutput_3.setNull(33, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_3.setString(33, row8.CF);
									}

									if (row8.RF == null) {
										pstmtInsert_tDBOutput_3.setNull(34, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_3.setString(34, row8.RF);
									}

									if (row8.RW == null) {
										pstmtInsert_tDBOutput_3.setNull(35, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_3.setString(35, row8.RW);
									}

									if (row8.LAM == null) {
										pstmtInsert_tDBOutput_3.setNull(36, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_3.setString(36, row8.LAM);
									}

									if (row8.CAM == null) {
										pstmtInsert_tDBOutput_3.setNull(37, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_3.setString(37, row8.CAM);
									}

									if (row8.RAM == null) {
										pstmtInsert_tDBOutput_3.setNull(38, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_3.setString(38, row8.RAM);
									}

									if (row8.LM == null) {
										pstmtInsert_tDBOutput_3.setNull(39, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_3.setString(39, row8.LM);
									}

									if (row8.LCM == null) {
										pstmtInsert_tDBOutput_3.setNull(40, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_3.setString(40, row8.LCM);
									}

									if (row8.CM == null) {
										pstmtInsert_tDBOutput_3.setNull(41, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_3.setString(41, row8.CM);
									}

									if (row8.RCM == null) {
										pstmtInsert_tDBOutput_3.setNull(42, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_3.setString(42, row8.RCM);
									}

									if (row8.RM == null) {
										pstmtInsert_tDBOutput_3.setNull(43, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_3.setString(43, row8.RM);
									}

									if (row8.LWB == null) {
										pstmtInsert_tDBOutput_3.setNull(44, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_3.setString(44, row8.LWB);
									}

									if (row8.LDM == null) {
										pstmtInsert_tDBOutput_3.setNull(45, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_3.setString(45, row8.LDM);
									}

									if (row8.CDM == null) {
										pstmtInsert_tDBOutput_3.setNull(46, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_3.setString(46, row8.CDM);
									}

									if (row8.RDM == null) {
										pstmtInsert_tDBOutput_3.setNull(47, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_3.setString(47, row8.RDM);
									}

									if (row8.RWB == null) {
										pstmtInsert_tDBOutput_3.setNull(48, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_3.setString(48, row8.RWB);
									}

									if (row8.LB == null) {
										pstmtInsert_tDBOutput_3.setNull(49, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_3.setString(49, row8.LB);
									}

									if (row8.LCB == null) {
										pstmtInsert_tDBOutput_3.setNull(50, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_3.setString(50, row8.LCB);
									}

									if (row8.CB == null) {
										pstmtInsert_tDBOutput_3.setNull(51, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_3.setString(51, row8.CB);
									}

									if (row8.RCB == null) {
										pstmtInsert_tDBOutput_3.setNull(52, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_3.setString(52, row8.RCB);
									}

									if (row8.RB == null) {
										pstmtInsert_tDBOutput_3.setNull(53, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_3.setString(53, row8.RB);
									}

									if (row8.Crossing == null) {
										pstmtInsert_tDBOutput_3.setNull(54, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_3.setString(54, row8.Crossing);
									}

									if (row8.Finishing == null) {
										pstmtInsert_tDBOutput_3.setNull(55, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_3.setInt(55, row8.Finishing);
									}

									if (row8.HeadingAccuracy == null) {
										pstmtInsert_tDBOutput_3.setNull(56, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_3.setInt(56, row8.HeadingAccuracy);
									}

									if (row8.ShortPassing == null) {
										pstmtInsert_tDBOutput_3.setNull(57, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_3.setInt(57, row8.ShortPassing);
									}

									if (row8.Volleys == null) {
										pstmtInsert_tDBOutput_3.setNull(58, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_3.setInt(58, row8.Volleys);
									}

									if (row8.Dribbling == null) {
										pstmtInsert_tDBOutput_3.setNull(59, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_3.setInt(59, row8.Dribbling);
									}

									if (row8.Curve == null) {
										pstmtInsert_tDBOutput_3.setNull(60, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_3.setInt(60, row8.Curve);
									}

									if (row8.FKAccuracy == null) {
										pstmtInsert_tDBOutput_3.setNull(61, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_3.setInt(61, row8.FKAccuracy);
									}

									if (row8.LongPassing == null) {
										pstmtInsert_tDBOutput_3.setNull(62, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_3.setInt(62, row8.LongPassing);
									}

									if (row8.BallControl == null) {
										pstmtInsert_tDBOutput_3.setNull(63, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_3.setInt(63, row8.BallControl);
									}

									if (row8.Acceleration == null) {
										pstmtInsert_tDBOutput_3.setNull(64, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_3.setInt(64, row8.Acceleration);
									}

									if (row8.SprintSpeed == null) {
										pstmtInsert_tDBOutput_3.setNull(65, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_3.setInt(65, row8.SprintSpeed);
									}

									if (row8.Agility == null) {
										pstmtInsert_tDBOutput_3.setNull(66, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_3.setInt(66, row8.Agility);
									}

									if (row8.Reactions == null) {
										pstmtInsert_tDBOutput_3.setNull(67, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_3.setInt(67, row8.Reactions);
									}

									if (row8.Balance == null) {
										pstmtInsert_tDBOutput_3.setNull(68, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_3.setInt(68, row8.Balance);
									}

									if (row8.ShotPower == null) {
										pstmtInsert_tDBOutput_3.setNull(69, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_3.setInt(69, row8.ShotPower);
									}

									if (row8.Jumping == null) {
										pstmtInsert_tDBOutput_3.setNull(70, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_3.setInt(70, row8.Jumping);
									}

									if (row8.Stamina == null) {
										pstmtInsert_tDBOutput_3.setNull(71, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_3.setInt(71, row8.Stamina);
									}

									if (row8.Strength == null) {
										pstmtInsert_tDBOutput_3.setNull(72, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_3.setInt(72, row8.Strength);
									}

									if (row8.LongShots == null) {
										pstmtInsert_tDBOutput_3.setNull(73, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_3.setInt(73, row8.LongShots);
									}

									if (row8.Aggression == null) {
										pstmtInsert_tDBOutput_3.setNull(74, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_3.setInt(74, row8.Aggression);
									}

									if (row8.Interceptions == null) {
										pstmtInsert_tDBOutput_3.setNull(75, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_3.setInt(75, row8.Interceptions);
									}

									if (row8.Positioning == null) {
										pstmtInsert_tDBOutput_3.setNull(76, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_3.setInt(76, row8.Positioning);
									}

									if (row8.Vision == null) {
										pstmtInsert_tDBOutput_3.setNull(77, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_3.setInt(77, row8.Vision);
									}

									if (row8.Penalties == null) {
										pstmtInsert_tDBOutput_3.setNull(78, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_3.setInt(78, row8.Penalties);
									}

									if (row8.Composure == null) {
										pstmtInsert_tDBOutput_3.setNull(79, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_3.setInt(79, row8.Composure);
									}

									if (row8.Marking == null) {
										pstmtInsert_tDBOutput_3.setNull(80, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_3.setInt(80, row8.Marking);
									}

									if (row8.StandingTackle == null) {
										pstmtInsert_tDBOutput_3.setNull(81, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_3.setInt(81, row8.StandingTackle);
									}

									if (row8.SlidingTackle == null) {
										pstmtInsert_tDBOutput_3.setNull(82, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_3.setInt(82, row8.SlidingTackle);
									}

									if (row8.GKDiving == null) {
										pstmtInsert_tDBOutput_3.setNull(83, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_3.setInt(83, row8.GKDiving);
									}

									if (row8.GKHandling == null) {
										pstmtInsert_tDBOutput_3.setNull(84, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_3.setInt(84, row8.GKHandling);
									}

									if (row8.GKKicking == null) {
										pstmtInsert_tDBOutput_3.setNull(85, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_3.setInt(85, row8.GKKicking);
									}

									if (row8.GKPositioning == null) {
										pstmtInsert_tDBOutput_3.setNull(86, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_3.setInt(86, row8.GKPositioning);
									}

									if (row8.GKReflexes == null) {
										pstmtInsert_tDBOutput_3.setNull(87, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_3.setInt(87, row8.GKReflexes);
									}

									if (row8.Release_Clause == null) {
										pstmtInsert_tDBOutput_3.setNull(88, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_3.setInt(88, row8.Release_Clause);
									}

									if (row8.Column88 == null) {
										pstmtInsert_tDBOutput_3.setNull(89, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_3.setString(89, row8.Column88);
									}

									try {
										int processedCount_tDBOutput_3 = pstmtInsert_tDBOutput_3.executeUpdate();
										insertedCount_tDBOutput_3 += processedCount_tDBOutput_3;
										rowsToCommitCount_tDBOutput_3 += processedCount_tDBOutput_3;
										nb_line_tDBOutput_3++;
										if (log.isDebugEnabled())
											log.debug("tDBOutput_3 - " + ("Inserting") + (" the record ")
													+ (nb_line_tDBOutput_3) + ("."));
									} catch (java.lang.Exception e) {
										globalMap.put("tDBOutput_3_ERROR_MESSAGE", e.getMessage());
										whetherReject_tDBOutput_3 = true;
										nb_line_tDBOutput_3++;
										log.error("tDBOutput_3 - " + (e.getMessage()));
										System.err.print(e.getMessage());
									}
								}

								tos_count_tDBOutput_3++;

								/**
								 * [tDBOutput_3 main ] stop
								 */

								/**
								 * [tDBOutput_3 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_3";

								/**
								 * [tDBOutput_3 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_3 process_data_end ] start
								 */

								currentComponent = "tDBOutput_3";

								/**
								 * [tDBOutput_3 process_data_end ] stop
								 */

							} // End of branch "row8"

							/**
							 * [tFilterRow_3 process_data_end ] start
							 */

							currentComponent = "tFilterRow_3";

							/**
							 * [tFilterRow_3 process_data_end ] stop
							 */

							/**
							 * [tFilterRow_4 main ] start
							 */

							currentComponent = "tFilterRow_4";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "row5"

								);
							}

							if (log.isTraceEnabled()) {
								log.trace("row5 - " + (row5 == null ? "" : row5.toLogString()));
							}

							row9 = null;
							Operator_tFilterRow_4 ope_tFilterRow_4 = new Operator_tFilterRow_4("||");
							ope_tFilterRow_4.matches(
									(row5.Position == null ? false : row5.Position.matches("CF") == true),
									" Position.matches(\"CF\") == true failed");
							ope_tFilterRow_4.matches(
									(row5.Position == null ? false : row5.Position.matches("ST") == true),
									" Position.matches(\"ST\") == true failed");
							ope_tFilterRow_4.matches(
									(row5.Position == null ? false : row5.Position.matches("LW") == true),
									" Position.matches(\"LW\") == true failed");
							ope_tFilterRow_4.matches(
									(row5.Position == null ? false : row5.Position.matches("RW") == true),
									" Position.matches(\"RW\") == true failed");
							ope_tFilterRow_4.matches(
									(row5.Position == null ? false : row5.Position.matches("LF") == true),
									" Position.matches(\"LF\") == true failed");
							ope_tFilterRow_4.matches(
									(row5.Position == null ? false : row5.Position.matches("LS") == true),
									" Position.matches(\"LS\") == true failed");
							ope_tFilterRow_4.matches(
									(row5.Position == null ? false : row5.Position.matches("RF") == true),
									" Position.matches(\"RF\") == true failed");
							ope_tFilterRow_4.matches(
									(row5.Position == null ? false : row5.Position.matches("RS") == true),
									" Position.matches(\"RS\") == true failed");

							if (ope_tFilterRow_4.getMatchFlag()) {
								if (row9 == null) {
									row9 = new row9Struct();
								}
								row9.ID = row5.ID;
								row9.Name = row5.Name;
								row9.Age = row5.Age;
								row9.Photo = row5.Photo;
								row9.Nationality = row5.Nationality;
								row9.Flag = row5.Flag;
								row9.Overall = row5.Overall;
								row9.Potential = row5.Potential;
								row9.Club = row5.Club;
								row9.Club_Logo = row5.Club_Logo;
								row9.Value = row5.Value;
								row9.Wage = row5.Wage;
								row9.Special = row5.Special;
								row9.Preferred_Foot = row5.Preferred_Foot;
								row9.International_Reputation = row5.International_Reputation;
								row9.Weak_Foot = row5.Weak_Foot;
								row9.Skill_Moves = row5.Skill_Moves;
								row9.Work_Rate = row5.Work_Rate;
								row9.Body_Type = row5.Body_Type;
								row9.Real_Face = row5.Real_Face;
								row9.Position = row5.Position;
								row9.Jersey_Number = row5.Jersey_Number;
								row9.Joined = row5.Joined;
								row9.Loaned_From = row5.Loaned_From;
								row9.Contract_Valid_Until = row5.Contract_Valid_Until;
								row9.Height = row5.Height;
								row9.Weight = row5.Weight;
								row9.LS = row5.LS;
								row9.ST = row5.ST;
								row9.RS = row5.RS;
								row9.LW = row5.LW;
								row9.LF = row5.LF;
								row9.CF = row5.CF;
								row9.RF = row5.RF;
								row9.RW = row5.RW;
								row9.LAM = row5.LAM;
								row9.CAM = row5.CAM;
								row9.RAM = row5.RAM;
								row9.LM = row5.LM;
								row9.LCM = row5.LCM;
								row9.CM = row5.CM;
								row9.RCM = row5.RCM;
								row9.RM = row5.RM;
								row9.LWB = row5.LWB;
								row9.LDM = row5.LDM;
								row9.CDM = row5.CDM;
								row9.RDM = row5.RDM;
								row9.RWB = row5.RWB;
								row9.LB = row5.LB;
								row9.LCB = row5.LCB;
								row9.CB = row5.CB;
								row9.RCB = row5.RCB;
								row9.RB = row5.RB;
								row9.Crossing = row5.Crossing;
								row9.Finishing = row5.Finishing;
								row9.HeadingAccuracy = row5.HeadingAccuracy;
								row9.ShortPassing = row5.ShortPassing;
								row9.Volleys = row5.Volleys;
								row9.Dribbling = row5.Dribbling;
								row9.Curve = row5.Curve;
								row9.FKAccuracy = row5.FKAccuracy;
								row9.LongPassing = row5.LongPassing;
								row9.BallControl = row5.BallControl;
								row9.Acceleration = row5.Acceleration;
								row9.SprintSpeed = row5.SprintSpeed;
								row9.Agility = row5.Agility;
								row9.Reactions = row5.Reactions;
								row9.Balance = row5.Balance;
								row9.ShotPower = row5.ShotPower;
								row9.Jumping = row5.Jumping;
								row9.Stamina = row5.Stamina;
								row9.Strength = row5.Strength;
								row9.LongShots = row5.LongShots;
								row9.Aggression = row5.Aggression;
								row9.Interceptions = row5.Interceptions;
								row9.Positioning = row5.Positioning;
								row9.Vision = row5.Vision;
								row9.Penalties = row5.Penalties;
								row9.Composure = row5.Composure;
								row9.Marking = row5.Marking;
								row9.StandingTackle = row5.StandingTackle;
								row9.SlidingTackle = row5.SlidingTackle;
								row9.GKDiving = row5.GKDiving;
								row9.GKHandling = row5.GKHandling;
								row9.GKKicking = row5.GKKicking;
								row9.GKPositioning = row5.GKPositioning;
								row9.GKReflexes = row5.GKReflexes;
								row9.Release_Clause = row5.Release_Clause;
								row9.Column88 = row5.Column88;
								log.debug("tFilterRow_4 - Process the record " + (nb_line_tFilterRow_4 + 1) + ".");

								nb_line_ok_tFilterRow_4++;
							} else {
								nb_line_reject_tFilterRow_4++;
							}

							nb_line_tFilterRow_4++;

							tos_count_tFilterRow_4++;

							/**
							 * [tFilterRow_4 main ] stop
							 */

							/**
							 * [tFilterRow_4 process_data_begin ] start
							 */

							currentComponent = "tFilterRow_4";

							/**
							 * [tFilterRow_4 process_data_begin ] stop
							 */
// Start of branch "row9"
							if (row9 != null) {

								/**
								 * [tDBOutput_4 main ] start
								 */

								currentComponent = "tDBOutput_4";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "row9"

									);
								}

								if (log.isTraceEnabled()) {
									log.trace("row9 - " + (row9 == null ? "" : row9.toLogString()));
								}

								whetherReject_tDBOutput_4 = false;
								if (row9.ID == null) {
									pstmt_tDBOutput_4.setNull(1, java.sql.Types.INTEGER);
								} else {
									pstmt_tDBOutput_4.setInt(1, row9.ID);
								}

								int checkCount_tDBOutput_4 = -1;
								try (java.sql.ResultSet rs_tDBOutput_4 = pstmt_tDBOutput_4.executeQuery()) {
									while (rs_tDBOutput_4.next()) {
										checkCount_tDBOutput_4 = rs_tDBOutput_4.getInt(1);
									}
								}
								if (checkCount_tDBOutput_4 > 0) {
									if (row9.Name == null) {
										pstmtUpdate_tDBOutput_4.setNull(1, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_4.setString(1, row9.Name);
									}

									if (row9.Age == null) {
										pstmtUpdate_tDBOutput_4.setNull(2, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_4.setInt(2, row9.Age);
									}

									if (row9.Photo == null) {
										pstmtUpdate_tDBOutput_4.setNull(3, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_4.setString(3, row9.Photo);
									}

									if (row9.Nationality == null) {
										pstmtUpdate_tDBOutput_4.setNull(4, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_4.setString(4, row9.Nationality);
									}

									if (row9.Flag == null) {
										pstmtUpdate_tDBOutput_4.setNull(5, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_4.setString(5, row9.Flag);
									}

									if (row9.Overall == null) {
										pstmtUpdate_tDBOutput_4.setNull(6, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_4.setInt(6, row9.Overall);
									}

									if (row9.Potential == null) {
										pstmtUpdate_tDBOutput_4.setNull(7, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_4.setInt(7, row9.Potential);
									}

									if (row9.Club == null) {
										pstmtUpdate_tDBOutput_4.setNull(8, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_4.setString(8, row9.Club);
									}

									if (row9.Club_Logo == null) {
										pstmtUpdate_tDBOutput_4.setNull(9, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_4.setString(9, row9.Club_Logo);
									}

									if (row9.Value == null) {
										pstmtUpdate_tDBOutput_4.setNull(10, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_4.setString(10, row9.Value);
									}

									if (row9.Wage == null) {
										pstmtUpdate_tDBOutput_4.setNull(11, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_4.setString(11, row9.Wage);
									}

									if (row9.Special == null) {
										pstmtUpdate_tDBOutput_4.setNull(12, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_4.setInt(12, row9.Special);
									}

									if (row9.Preferred_Foot == null) {
										pstmtUpdate_tDBOutput_4.setNull(13, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_4.setString(13, row9.Preferred_Foot);
									}

									if (row9.International_Reputation == null) {
										pstmtUpdate_tDBOutput_4.setNull(14, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_4.setInt(14, row9.International_Reputation);
									}

									if (row9.Weak_Foot == null) {
										pstmtUpdate_tDBOutput_4.setNull(15, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_4.setInt(15, row9.Weak_Foot);
									}

									if (row9.Skill_Moves == null) {
										pstmtUpdate_tDBOutput_4.setNull(16, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_4.setInt(16, row9.Skill_Moves);
									}

									if (row9.Work_Rate == null) {
										pstmtUpdate_tDBOutput_4.setNull(17, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_4.setString(17, row9.Work_Rate);
									}

									if (row9.Body_Type == null) {
										pstmtUpdate_tDBOutput_4.setNull(18, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_4.setString(18, row9.Body_Type);
									}

									if (row9.Real_Face == null) {
										pstmtUpdate_tDBOutput_4.setNull(19, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_4.setString(19, row9.Real_Face);
									}

									if (row9.Position == null) {
										pstmtUpdate_tDBOutput_4.setNull(20, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_4.setString(20, row9.Position);
									}

									if (row9.Jersey_Number == null) {
										pstmtUpdate_tDBOutput_4.setNull(21, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_4.setInt(21, row9.Jersey_Number);
									}

									if (row9.Joined == null) {
										pstmtUpdate_tDBOutput_4.setNull(22, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_4.setString(22, row9.Joined);
									}

									if (row9.Loaned_From == null) {
										pstmtUpdate_tDBOutput_4.setNull(23, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_4.setString(23, row9.Loaned_From);
									}

									if (row9.Contract_Valid_Until == null) {
										pstmtUpdate_tDBOutput_4.setNull(24, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_4.setString(24, row9.Contract_Valid_Until);
									}

									if (row9.Height == null) {
										pstmtUpdate_tDBOutput_4.setNull(25, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_4.setInt(25, row9.Height);
									}

									if (row9.Weight == null) {
										pstmtUpdate_tDBOutput_4.setNull(26, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_4.setString(26, row9.Weight);
									}

									if (row9.LS == null) {
										pstmtUpdate_tDBOutput_4.setNull(27, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_4.setString(27, row9.LS);
									}

									if (row9.ST == null) {
										pstmtUpdate_tDBOutput_4.setNull(28, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_4.setString(28, row9.ST);
									}

									if (row9.RS == null) {
										pstmtUpdate_tDBOutput_4.setNull(29, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_4.setString(29, row9.RS);
									}

									if (row9.LW == null) {
										pstmtUpdate_tDBOutput_4.setNull(30, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_4.setString(30, row9.LW);
									}

									if (row9.LF == null) {
										pstmtUpdate_tDBOutput_4.setNull(31, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_4.setString(31, row9.LF);
									}

									if (row9.CF == null) {
										pstmtUpdate_tDBOutput_4.setNull(32, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_4.setString(32, row9.CF);
									}

									if (row9.RF == null) {
										pstmtUpdate_tDBOutput_4.setNull(33, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_4.setString(33, row9.RF);
									}

									if (row9.RW == null) {
										pstmtUpdate_tDBOutput_4.setNull(34, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_4.setString(34, row9.RW);
									}

									if (row9.LAM == null) {
										pstmtUpdate_tDBOutput_4.setNull(35, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_4.setString(35, row9.LAM);
									}

									if (row9.CAM == null) {
										pstmtUpdate_tDBOutput_4.setNull(36, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_4.setString(36, row9.CAM);
									}

									if (row9.RAM == null) {
										pstmtUpdate_tDBOutput_4.setNull(37, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_4.setString(37, row9.RAM);
									}

									if (row9.LM == null) {
										pstmtUpdate_tDBOutput_4.setNull(38, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_4.setString(38, row9.LM);
									}

									if (row9.LCM == null) {
										pstmtUpdate_tDBOutput_4.setNull(39, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_4.setString(39, row9.LCM);
									}

									if (row9.CM == null) {
										pstmtUpdate_tDBOutput_4.setNull(40, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_4.setString(40, row9.CM);
									}

									if (row9.RCM == null) {
										pstmtUpdate_tDBOutput_4.setNull(41, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_4.setString(41, row9.RCM);
									}

									if (row9.RM == null) {
										pstmtUpdate_tDBOutput_4.setNull(42, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_4.setString(42, row9.RM);
									}

									if (row9.LWB == null) {
										pstmtUpdate_tDBOutput_4.setNull(43, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_4.setString(43, row9.LWB);
									}

									if (row9.LDM == null) {
										pstmtUpdate_tDBOutput_4.setNull(44, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_4.setString(44, row9.LDM);
									}

									if (row9.CDM == null) {
										pstmtUpdate_tDBOutput_4.setNull(45, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_4.setString(45, row9.CDM);
									}

									if (row9.RDM == null) {
										pstmtUpdate_tDBOutput_4.setNull(46, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_4.setString(46, row9.RDM);
									}

									if (row9.RWB == null) {
										pstmtUpdate_tDBOutput_4.setNull(47, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_4.setString(47, row9.RWB);
									}

									if (row9.LB == null) {
										pstmtUpdate_tDBOutput_4.setNull(48, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_4.setString(48, row9.LB);
									}

									if (row9.LCB == null) {
										pstmtUpdate_tDBOutput_4.setNull(49, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_4.setString(49, row9.LCB);
									}

									if (row9.CB == null) {
										pstmtUpdate_tDBOutput_4.setNull(50, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_4.setString(50, row9.CB);
									}

									if (row9.RCB == null) {
										pstmtUpdate_tDBOutput_4.setNull(51, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_4.setString(51, row9.RCB);
									}

									if (row9.RB == null) {
										pstmtUpdate_tDBOutput_4.setNull(52, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_4.setString(52, row9.RB);
									}

									if (row9.Crossing == null) {
										pstmtUpdate_tDBOutput_4.setNull(53, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_4.setString(53, row9.Crossing);
									}

									if (row9.Finishing == null) {
										pstmtUpdate_tDBOutput_4.setNull(54, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_4.setInt(54, row9.Finishing);
									}

									if (row9.HeadingAccuracy == null) {
										pstmtUpdate_tDBOutput_4.setNull(55, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_4.setInt(55, row9.HeadingAccuracy);
									}

									if (row9.ShortPassing == null) {
										pstmtUpdate_tDBOutput_4.setNull(56, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_4.setInt(56, row9.ShortPassing);
									}

									if (row9.Volleys == null) {
										pstmtUpdate_tDBOutput_4.setNull(57, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_4.setInt(57, row9.Volleys);
									}

									if (row9.Dribbling == null) {
										pstmtUpdate_tDBOutput_4.setNull(58, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_4.setInt(58, row9.Dribbling);
									}

									if (row9.Curve == null) {
										pstmtUpdate_tDBOutput_4.setNull(59, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_4.setInt(59, row9.Curve);
									}

									if (row9.FKAccuracy == null) {
										pstmtUpdate_tDBOutput_4.setNull(60, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_4.setInt(60, row9.FKAccuracy);
									}

									if (row9.LongPassing == null) {
										pstmtUpdate_tDBOutput_4.setNull(61, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_4.setInt(61, row9.LongPassing);
									}

									if (row9.BallControl == null) {
										pstmtUpdate_tDBOutput_4.setNull(62, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_4.setInt(62, row9.BallControl);
									}

									if (row9.Acceleration == null) {
										pstmtUpdate_tDBOutput_4.setNull(63, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_4.setInt(63, row9.Acceleration);
									}

									if (row9.SprintSpeed == null) {
										pstmtUpdate_tDBOutput_4.setNull(64, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_4.setInt(64, row9.SprintSpeed);
									}

									if (row9.Agility == null) {
										pstmtUpdate_tDBOutput_4.setNull(65, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_4.setInt(65, row9.Agility);
									}

									if (row9.Reactions == null) {
										pstmtUpdate_tDBOutput_4.setNull(66, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_4.setInt(66, row9.Reactions);
									}

									if (row9.Balance == null) {
										pstmtUpdate_tDBOutput_4.setNull(67, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_4.setInt(67, row9.Balance);
									}

									if (row9.ShotPower == null) {
										pstmtUpdate_tDBOutput_4.setNull(68, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_4.setInt(68, row9.ShotPower);
									}

									if (row9.Jumping == null) {
										pstmtUpdate_tDBOutput_4.setNull(69, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_4.setInt(69, row9.Jumping);
									}

									if (row9.Stamina == null) {
										pstmtUpdate_tDBOutput_4.setNull(70, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_4.setInt(70, row9.Stamina);
									}

									if (row9.Strength == null) {
										pstmtUpdate_tDBOutput_4.setNull(71, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_4.setInt(71, row9.Strength);
									}

									if (row9.LongShots == null) {
										pstmtUpdate_tDBOutput_4.setNull(72, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_4.setInt(72, row9.LongShots);
									}

									if (row9.Aggression == null) {
										pstmtUpdate_tDBOutput_4.setNull(73, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_4.setInt(73, row9.Aggression);
									}

									if (row9.Interceptions == null) {
										pstmtUpdate_tDBOutput_4.setNull(74, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_4.setInt(74, row9.Interceptions);
									}

									if (row9.Positioning == null) {
										pstmtUpdate_tDBOutput_4.setNull(75, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_4.setInt(75, row9.Positioning);
									}

									if (row9.Vision == null) {
										pstmtUpdate_tDBOutput_4.setNull(76, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_4.setInt(76, row9.Vision);
									}

									if (row9.Penalties == null) {
										pstmtUpdate_tDBOutput_4.setNull(77, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_4.setInt(77, row9.Penalties);
									}

									if (row9.Composure == null) {
										pstmtUpdate_tDBOutput_4.setNull(78, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_4.setInt(78, row9.Composure);
									}

									if (row9.Marking == null) {
										pstmtUpdate_tDBOutput_4.setNull(79, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_4.setInt(79, row9.Marking);
									}

									if (row9.StandingTackle == null) {
										pstmtUpdate_tDBOutput_4.setNull(80, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_4.setInt(80, row9.StandingTackle);
									}

									if (row9.SlidingTackle == null) {
										pstmtUpdate_tDBOutput_4.setNull(81, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_4.setInt(81, row9.SlidingTackle);
									}

									if (row9.GKDiving == null) {
										pstmtUpdate_tDBOutput_4.setNull(82, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_4.setInt(82, row9.GKDiving);
									}

									if (row9.GKHandling == null) {
										pstmtUpdate_tDBOutput_4.setNull(83, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_4.setInt(83, row9.GKHandling);
									}

									if (row9.GKKicking == null) {
										pstmtUpdate_tDBOutput_4.setNull(84, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_4.setInt(84, row9.GKKicking);
									}

									if (row9.GKPositioning == null) {
										pstmtUpdate_tDBOutput_4.setNull(85, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_4.setInt(85, row9.GKPositioning);
									}

									if (row9.GKReflexes == null) {
										pstmtUpdate_tDBOutput_4.setNull(86, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_4.setInt(86, row9.GKReflexes);
									}

									if (row9.Release_Clause == null) {
										pstmtUpdate_tDBOutput_4.setNull(87, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_4.setInt(87, row9.Release_Clause);
									}

									if (row9.Column88 == null) {
										pstmtUpdate_tDBOutput_4.setNull(88, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_4.setString(88, row9.Column88);
									}

									if (row9.ID == null) {
										pstmtUpdate_tDBOutput_4.setNull(89 + count_tDBOutput_4, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_4.setInt(89 + count_tDBOutput_4, row9.ID);
									}

									try {
										int processedCount_tDBOutput_4 = pstmtUpdate_tDBOutput_4.executeUpdate();
										updatedCount_tDBOutput_4 += processedCount_tDBOutput_4;
										rowsToCommitCount_tDBOutput_4 += processedCount_tDBOutput_4;
										nb_line_tDBOutput_4++;
										if (log.isDebugEnabled())
											log.debug("tDBOutput_4 - " + ("Updating") + (" the record ")
													+ (nb_line_tDBOutput_4) + ("."));
									} catch (java.lang.Exception e) {
										globalMap.put("tDBOutput_4_ERROR_MESSAGE", e.getMessage());
										whetherReject_tDBOutput_4 = true;
										nb_line_tDBOutput_4++;
										log.error("tDBOutput_4 - " + (e.getMessage()));
										System.err.print(e.getMessage());
									}
								} else {
									if (row9.ID == null) {
										pstmtInsert_tDBOutput_4.setNull(1, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_4.setInt(1, row9.ID);
									}

									if (row9.Name == null) {
										pstmtInsert_tDBOutput_4.setNull(2, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_4.setString(2, row9.Name);
									}

									if (row9.Age == null) {
										pstmtInsert_tDBOutput_4.setNull(3, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_4.setInt(3, row9.Age);
									}

									if (row9.Photo == null) {
										pstmtInsert_tDBOutput_4.setNull(4, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_4.setString(4, row9.Photo);
									}

									if (row9.Nationality == null) {
										pstmtInsert_tDBOutput_4.setNull(5, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_4.setString(5, row9.Nationality);
									}

									if (row9.Flag == null) {
										pstmtInsert_tDBOutput_4.setNull(6, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_4.setString(6, row9.Flag);
									}

									if (row9.Overall == null) {
										pstmtInsert_tDBOutput_4.setNull(7, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_4.setInt(7, row9.Overall);
									}

									if (row9.Potential == null) {
										pstmtInsert_tDBOutput_4.setNull(8, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_4.setInt(8, row9.Potential);
									}

									if (row9.Club == null) {
										pstmtInsert_tDBOutput_4.setNull(9, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_4.setString(9, row9.Club);
									}

									if (row9.Club_Logo == null) {
										pstmtInsert_tDBOutput_4.setNull(10, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_4.setString(10, row9.Club_Logo);
									}

									if (row9.Value == null) {
										pstmtInsert_tDBOutput_4.setNull(11, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_4.setString(11, row9.Value);
									}

									if (row9.Wage == null) {
										pstmtInsert_tDBOutput_4.setNull(12, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_4.setString(12, row9.Wage);
									}

									if (row9.Special == null) {
										pstmtInsert_tDBOutput_4.setNull(13, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_4.setInt(13, row9.Special);
									}

									if (row9.Preferred_Foot == null) {
										pstmtInsert_tDBOutput_4.setNull(14, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_4.setString(14, row9.Preferred_Foot);
									}

									if (row9.International_Reputation == null) {
										pstmtInsert_tDBOutput_4.setNull(15, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_4.setInt(15, row9.International_Reputation);
									}

									if (row9.Weak_Foot == null) {
										pstmtInsert_tDBOutput_4.setNull(16, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_4.setInt(16, row9.Weak_Foot);
									}

									if (row9.Skill_Moves == null) {
										pstmtInsert_tDBOutput_4.setNull(17, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_4.setInt(17, row9.Skill_Moves);
									}

									if (row9.Work_Rate == null) {
										pstmtInsert_tDBOutput_4.setNull(18, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_4.setString(18, row9.Work_Rate);
									}

									if (row9.Body_Type == null) {
										pstmtInsert_tDBOutput_4.setNull(19, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_4.setString(19, row9.Body_Type);
									}

									if (row9.Real_Face == null) {
										pstmtInsert_tDBOutput_4.setNull(20, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_4.setString(20, row9.Real_Face);
									}

									if (row9.Position == null) {
										pstmtInsert_tDBOutput_4.setNull(21, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_4.setString(21, row9.Position);
									}

									if (row9.Jersey_Number == null) {
										pstmtInsert_tDBOutput_4.setNull(22, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_4.setInt(22, row9.Jersey_Number);
									}

									if (row9.Joined == null) {
										pstmtInsert_tDBOutput_4.setNull(23, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_4.setString(23, row9.Joined);
									}

									if (row9.Loaned_From == null) {
										pstmtInsert_tDBOutput_4.setNull(24, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_4.setString(24, row9.Loaned_From);
									}

									if (row9.Contract_Valid_Until == null) {
										pstmtInsert_tDBOutput_4.setNull(25, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_4.setString(25, row9.Contract_Valid_Until);
									}

									if (row9.Height == null) {
										pstmtInsert_tDBOutput_4.setNull(26, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_4.setInt(26, row9.Height);
									}

									if (row9.Weight == null) {
										pstmtInsert_tDBOutput_4.setNull(27, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_4.setString(27, row9.Weight);
									}

									if (row9.LS == null) {
										pstmtInsert_tDBOutput_4.setNull(28, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_4.setString(28, row9.LS);
									}

									if (row9.ST == null) {
										pstmtInsert_tDBOutput_4.setNull(29, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_4.setString(29, row9.ST);
									}

									if (row9.RS == null) {
										pstmtInsert_tDBOutput_4.setNull(30, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_4.setString(30, row9.RS);
									}

									if (row9.LW == null) {
										pstmtInsert_tDBOutput_4.setNull(31, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_4.setString(31, row9.LW);
									}

									if (row9.LF == null) {
										pstmtInsert_tDBOutput_4.setNull(32, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_4.setString(32, row9.LF);
									}

									if (row9.CF == null) {
										pstmtInsert_tDBOutput_4.setNull(33, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_4.setString(33, row9.CF);
									}

									if (row9.RF == null) {
										pstmtInsert_tDBOutput_4.setNull(34, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_4.setString(34, row9.RF);
									}

									if (row9.RW == null) {
										pstmtInsert_tDBOutput_4.setNull(35, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_4.setString(35, row9.RW);
									}

									if (row9.LAM == null) {
										pstmtInsert_tDBOutput_4.setNull(36, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_4.setString(36, row9.LAM);
									}

									if (row9.CAM == null) {
										pstmtInsert_tDBOutput_4.setNull(37, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_4.setString(37, row9.CAM);
									}

									if (row9.RAM == null) {
										pstmtInsert_tDBOutput_4.setNull(38, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_4.setString(38, row9.RAM);
									}

									if (row9.LM == null) {
										pstmtInsert_tDBOutput_4.setNull(39, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_4.setString(39, row9.LM);
									}

									if (row9.LCM == null) {
										pstmtInsert_tDBOutput_4.setNull(40, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_4.setString(40, row9.LCM);
									}

									if (row9.CM == null) {
										pstmtInsert_tDBOutput_4.setNull(41, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_4.setString(41, row9.CM);
									}

									if (row9.RCM == null) {
										pstmtInsert_tDBOutput_4.setNull(42, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_4.setString(42, row9.RCM);
									}

									if (row9.RM == null) {
										pstmtInsert_tDBOutput_4.setNull(43, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_4.setString(43, row9.RM);
									}

									if (row9.LWB == null) {
										pstmtInsert_tDBOutput_4.setNull(44, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_4.setString(44, row9.LWB);
									}

									if (row9.LDM == null) {
										pstmtInsert_tDBOutput_4.setNull(45, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_4.setString(45, row9.LDM);
									}

									if (row9.CDM == null) {
										pstmtInsert_tDBOutput_4.setNull(46, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_4.setString(46, row9.CDM);
									}

									if (row9.RDM == null) {
										pstmtInsert_tDBOutput_4.setNull(47, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_4.setString(47, row9.RDM);
									}

									if (row9.RWB == null) {
										pstmtInsert_tDBOutput_4.setNull(48, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_4.setString(48, row9.RWB);
									}

									if (row9.LB == null) {
										pstmtInsert_tDBOutput_4.setNull(49, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_4.setString(49, row9.LB);
									}

									if (row9.LCB == null) {
										pstmtInsert_tDBOutput_4.setNull(50, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_4.setString(50, row9.LCB);
									}

									if (row9.CB == null) {
										pstmtInsert_tDBOutput_4.setNull(51, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_4.setString(51, row9.CB);
									}

									if (row9.RCB == null) {
										pstmtInsert_tDBOutput_4.setNull(52, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_4.setString(52, row9.RCB);
									}

									if (row9.RB == null) {
										pstmtInsert_tDBOutput_4.setNull(53, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_4.setString(53, row9.RB);
									}

									if (row9.Crossing == null) {
										pstmtInsert_tDBOutput_4.setNull(54, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_4.setString(54, row9.Crossing);
									}

									if (row9.Finishing == null) {
										pstmtInsert_tDBOutput_4.setNull(55, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_4.setInt(55, row9.Finishing);
									}

									if (row9.HeadingAccuracy == null) {
										pstmtInsert_tDBOutput_4.setNull(56, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_4.setInt(56, row9.HeadingAccuracy);
									}

									if (row9.ShortPassing == null) {
										pstmtInsert_tDBOutput_4.setNull(57, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_4.setInt(57, row9.ShortPassing);
									}

									if (row9.Volleys == null) {
										pstmtInsert_tDBOutput_4.setNull(58, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_4.setInt(58, row9.Volleys);
									}

									if (row9.Dribbling == null) {
										pstmtInsert_tDBOutput_4.setNull(59, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_4.setInt(59, row9.Dribbling);
									}

									if (row9.Curve == null) {
										pstmtInsert_tDBOutput_4.setNull(60, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_4.setInt(60, row9.Curve);
									}

									if (row9.FKAccuracy == null) {
										pstmtInsert_tDBOutput_4.setNull(61, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_4.setInt(61, row9.FKAccuracy);
									}

									if (row9.LongPassing == null) {
										pstmtInsert_tDBOutput_4.setNull(62, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_4.setInt(62, row9.LongPassing);
									}

									if (row9.BallControl == null) {
										pstmtInsert_tDBOutput_4.setNull(63, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_4.setInt(63, row9.BallControl);
									}

									if (row9.Acceleration == null) {
										pstmtInsert_tDBOutput_4.setNull(64, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_4.setInt(64, row9.Acceleration);
									}

									if (row9.SprintSpeed == null) {
										pstmtInsert_tDBOutput_4.setNull(65, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_4.setInt(65, row9.SprintSpeed);
									}

									if (row9.Agility == null) {
										pstmtInsert_tDBOutput_4.setNull(66, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_4.setInt(66, row9.Agility);
									}

									if (row9.Reactions == null) {
										pstmtInsert_tDBOutput_4.setNull(67, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_4.setInt(67, row9.Reactions);
									}

									if (row9.Balance == null) {
										pstmtInsert_tDBOutput_4.setNull(68, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_4.setInt(68, row9.Balance);
									}

									if (row9.ShotPower == null) {
										pstmtInsert_tDBOutput_4.setNull(69, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_4.setInt(69, row9.ShotPower);
									}

									if (row9.Jumping == null) {
										pstmtInsert_tDBOutput_4.setNull(70, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_4.setInt(70, row9.Jumping);
									}

									if (row9.Stamina == null) {
										pstmtInsert_tDBOutput_4.setNull(71, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_4.setInt(71, row9.Stamina);
									}

									if (row9.Strength == null) {
										pstmtInsert_tDBOutput_4.setNull(72, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_4.setInt(72, row9.Strength);
									}

									if (row9.LongShots == null) {
										pstmtInsert_tDBOutput_4.setNull(73, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_4.setInt(73, row9.LongShots);
									}

									if (row9.Aggression == null) {
										pstmtInsert_tDBOutput_4.setNull(74, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_4.setInt(74, row9.Aggression);
									}

									if (row9.Interceptions == null) {
										pstmtInsert_tDBOutput_4.setNull(75, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_4.setInt(75, row9.Interceptions);
									}

									if (row9.Positioning == null) {
										pstmtInsert_tDBOutput_4.setNull(76, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_4.setInt(76, row9.Positioning);
									}

									if (row9.Vision == null) {
										pstmtInsert_tDBOutput_4.setNull(77, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_4.setInt(77, row9.Vision);
									}

									if (row9.Penalties == null) {
										pstmtInsert_tDBOutput_4.setNull(78, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_4.setInt(78, row9.Penalties);
									}

									if (row9.Composure == null) {
										pstmtInsert_tDBOutput_4.setNull(79, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_4.setInt(79, row9.Composure);
									}

									if (row9.Marking == null) {
										pstmtInsert_tDBOutput_4.setNull(80, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_4.setInt(80, row9.Marking);
									}

									if (row9.StandingTackle == null) {
										pstmtInsert_tDBOutput_4.setNull(81, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_4.setInt(81, row9.StandingTackle);
									}

									if (row9.SlidingTackle == null) {
										pstmtInsert_tDBOutput_4.setNull(82, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_4.setInt(82, row9.SlidingTackle);
									}

									if (row9.GKDiving == null) {
										pstmtInsert_tDBOutput_4.setNull(83, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_4.setInt(83, row9.GKDiving);
									}

									if (row9.GKHandling == null) {
										pstmtInsert_tDBOutput_4.setNull(84, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_4.setInt(84, row9.GKHandling);
									}

									if (row9.GKKicking == null) {
										pstmtInsert_tDBOutput_4.setNull(85, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_4.setInt(85, row9.GKKicking);
									}

									if (row9.GKPositioning == null) {
										pstmtInsert_tDBOutput_4.setNull(86, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_4.setInt(86, row9.GKPositioning);
									}

									if (row9.GKReflexes == null) {
										pstmtInsert_tDBOutput_4.setNull(87, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_4.setInt(87, row9.GKReflexes);
									}

									if (row9.Release_Clause == null) {
										pstmtInsert_tDBOutput_4.setNull(88, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_4.setInt(88, row9.Release_Clause);
									}

									if (row9.Column88 == null) {
										pstmtInsert_tDBOutput_4.setNull(89, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_4.setString(89, row9.Column88);
									}

									try {
										int processedCount_tDBOutput_4 = pstmtInsert_tDBOutput_4.executeUpdate();
										insertedCount_tDBOutput_4 += processedCount_tDBOutput_4;
										rowsToCommitCount_tDBOutput_4 += processedCount_tDBOutput_4;
										nb_line_tDBOutput_4++;
										if (log.isDebugEnabled())
											log.debug("tDBOutput_4 - " + ("Inserting") + (" the record ")
													+ (nb_line_tDBOutput_4) + ("."));
									} catch (java.lang.Exception e) {
										globalMap.put("tDBOutput_4_ERROR_MESSAGE", e.getMessage());
										whetherReject_tDBOutput_4 = true;
										nb_line_tDBOutput_4++;
										log.error("tDBOutput_4 - " + (e.getMessage()));
										System.err.print(e.getMessage());
									}
								}

								tos_count_tDBOutput_4++;

								/**
								 * [tDBOutput_4 main ] stop
								 */

								/**
								 * [tDBOutput_4 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_4";

								/**
								 * [tDBOutput_4 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_4 process_data_end ] start
								 */

								currentComponent = "tDBOutput_4";

								/**
								 * [tDBOutput_4 process_data_end ] stop
								 */

							} // End of branch "row9"

							/**
							 * [tFilterRow_4 process_data_end ] start
							 */

							currentComponent = "tFilterRow_4";

							/**
							 * [tFilterRow_4 process_data_end ] stop
							 */

							/**
							 * [tReplicate_1 process_data_end ] start
							 */

							currentComponent = "tReplicate_1";

							/**
							 * [tReplicate_1 process_data_end ] stop
							 */

						} // End of branch "row1"

						/**
						 * [tFileInputDelimited_1 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

					}
				} finally {
					if (!((Object) ("F:/job/Talend/csvfiles/FIFA19-post.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_1 != null) {
							fid_tFileInputDelimited_1.close();
						}
					}
					if (fid_tFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE", fid_tFileInputDelimited_1.getRowNumber());

						log.info("tFileInputDelimited_1 - Retrieved records count: "
								+ fid_tFileInputDelimited_1.getRowNumber() + ".");

					}
				}

				if (log.isDebugEnabled())
					log.debug("tFileInputDelimited_1 - " + ("Done."));

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tReplicate_1 end ] start
				 */

				currentComponent = "tReplicate_1";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
				}

				if (log.isDebugEnabled())
					log.debug("tReplicate_1 - " + ("Done."));

				ok_Hash.put("tReplicate_1", true);
				end_Hash.put("tReplicate_1", System.currentTimeMillis());

				/**
				 * [tReplicate_1 end ] stop
				 */

				/**
				 * [tFilterRow_1 end ] start
				 */

				currentComponent = "tFilterRow_1";

				globalMap.put("tFilterRow_1_NB_LINE", nb_line_tFilterRow_1);
				globalMap.put("tFilterRow_1_NB_LINE_OK", nb_line_ok_tFilterRow_1);
				globalMap.put("tFilterRow_1_NB_LINE_REJECT", nb_line_reject_tFilterRow_1);

				log.info("tFilterRow_1 - Processed records count:" + nb_line_tFilterRow_1 + ". Matched records count:"
						+ nb_line_ok_tFilterRow_1 + ". Rejected records count:" + nb_line_reject_tFilterRow_1 + ".");

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row2");
				}

				if (log.isDebugEnabled())
					log.debug("tFilterRow_1 - " + ("Done."));

				ok_Hash.put("tFilterRow_1", true);
				end_Hash.put("tFilterRow_1", System.currentTimeMillis());

				/**
				 * [tFilterRow_1 end ] stop
				 */

				/**
				 * [tDBOutput_1 end ] start
				 */

				currentComponent = "tDBOutput_1";

				if (pstmtUpdate_tDBOutput_1 != null) {
					pstmtUpdate_tDBOutput_1.close();
					resourceMap.remove("pstmtUpdate_tDBOutput_1");
				}
				if (pstmtInsert_tDBOutput_1 != null) {
					pstmtInsert_tDBOutput_1.close();
					resourceMap.remove("pstmtInsert_tDBOutput_1");
				}
				if (pstmt_tDBOutput_1 != null) {
					pstmt_tDBOutput_1.close();
					resourceMap.remove("pstmt_tDBOutput_1");
				}
				resourceMap.put("statementClosed_tDBOutput_1", true);

				nb_line_deleted_tDBOutput_1 = nb_line_deleted_tDBOutput_1 + deletedCount_tDBOutput_1;
				nb_line_update_tDBOutput_1 = nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
				nb_line_inserted_tDBOutput_1 = nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
				nb_line_rejected_tDBOutput_1 = nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;

				globalMap.put("tDBOutput_1_NB_LINE", nb_line_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_UPDATED", nb_line_update_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_DELETED", nb_line_deleted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row6");
				}

				if (log.isDebugEnabled())
					log.debug("tDBOutput_1 - " + ("Done."));

				ok_Hash.put("tDBOutput_1", true);
				end_Hash.put("tDBOutput_1", System.currentTimeMillis());

				/**
				 * [tDBOutput_1 end ] stop
				 */

				/**
				 * [tFilterRow_2 end ] start
				 */

				currentComponent = "tFilterRow_2";

				globalMap.put("tFilterRow_2_NB_LINE", nb_line_tFilterRow_2);
				globalMap.put("tFilterRow_2_NB_LINE_OK", nb_line_ok_tFilterRow_2);
				globalMap.put("tFilterRow_2_NB_LINE_REJECT", nb_line_reject_tFilterRow_2);

				log.info("tFilterRow_2 - Processed records count:" + nb_line_tFilterRow_2 + ". Matched records count:"
						+ nb_line_ok_tFilterRow_2 + ". Rejected records count:" + nb_line_reject_tFilterRow_2 + ".");

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row3");
				}

				if (log.isDebugEnabled())
					log.debug("tFilterRow_2 - " + ("Done."));

				ok_Hash.put("tFilterRow_2", true);
				end_Hash.put("tFilterRow_2", System.currentTimeMillis());

				/**
				 * [tFilterRow_2 end ] stop
				 */

				/**
				 * [tDBOutput_2 end ] start
				 */

				currentComponent = "tDBOutput_2";

				if (pstmtUpdate_tDBOutput_2 != null) {
					pstmtUpdate_tDBOutput_2.close();
					resourceMap.remove("pstmtUpdate_tDBOutput_2");
				}
				if (pstmtInsert_tDBOutput_2 != null) {
					pstmtInsert_tDBOutput_2.close();
					resourceMap.remove("pstmtInsert_tDBOutput_2");
				}
				if (pstmt_tDBOutput_2 != null) {
					pstmt_tDBOutput_2.close();
					resourceMap.remove("pstmt_tDBOutput_2");
				}
				resourceMap.put("statementClosed_tDBOutput_2", true);

				nb_line_deleted_tDBOutput_2 = nb_line_deleted_tDBOutput_2 + deletedCount_tDBOutput_2;
				nb_line_update_tDBOutput_2 = nb_line_update_tDBOutput_2 + updatedCount_tDBOutput_2;
				nb_line_inserted_tDBOutput_2 = nb_line_inserted_tDBOutput_2 + insertedCount_tDBOutput_2;
				nb_line_rejected_tDBOutput_2 = nb_line_rejected_tDBOutput_2 + rejectedCount_tDBOutput_2;

				globalMap.put("tDBOutput_2_NB_LINE", nb_line_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_UPDATED", nb_line_update_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_DELETED", nb_line_deleted_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_2);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row7");
				}

				if (log.isDebugEnabled())
					log.debug("tDBOutput_2 - " + ("Done."));

				ok_Hash.put("tDBOutput_2", true);
				end_Hash.put("tDBOutput_2", System.currentTimeMillis());

				/**
				 * [tDBOutput_2 end ] stop
				 */

				/**
				 * [tFilterRow_3 end ] start
				 */

				currentComponent = "tFilterRow_3";

				globalMap.put("tFilterRow_3_NB_LINE", nb_line_tFilterRow_3);
				globalMap.put("tFilterRow_3_NB_LINE_OK", nb_line_ok_tFilterRow_3);
				globalMap.put("tFilterRow_3_NB_LINE_REJECT", nb_line_reject_tFilterRow_3);

				log.info("tFilterRow_3 - Processed records count:" + nb_line_tFilterRow_3 + ". Matched records count:"
						+ nb_line_ok_tFilterRow_3 + ". Rejected records count:" + nb_line_reject_tFilterRow_3 + ".");

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row4");
				}

				if (log.isDebugEnabled())
					log.debug("tFilterRow_3 - " + ("Done."));

				ok_Hash.put("tFilterRow_3", true);
				end_Hash.put("tFilterRow_3", System.currentTimeMillis());

				/**
				 * [tFilterRow_3 end ] stop
				 */

				/**
				 * [tDBOutput_3 end ] start
				 */

				currentComponent = "tDBOutput_3";

				if (pstmtUpdate_tDBOutput_3 != null) {
					pstmtUpdate_tDBOutput_3.close();
					resourceMap.remove("pstmtUpdate_tDBOutput_3");
				}
				if (pstmtInsert_tDBOutput_3 != null) {
					pstmtInsert_tDBOutput_3.close();
					resourceMap.remove("pstmtInsert_tDBOutput_3");
				}
				if (pstmt_tDBOutput_3 != null) {
					pstmt_tDBOutput_3.close();
					resourceMap.remove("pstmt_tDBOutput_3");
				}
				resourceMap.put("statementClosed_tDBOutput_3", true);

				nb_line_deleted_tDBOutput_3 = nb_line_deleted_tDBOutput_3 + deletedCount_tDBOutput_3;
				nb_line_update_tDBOutput_3 = nb_line_update_tDBOutput_3 + updatedCount_tDBOutput_3;
				nb_line_inserted_tDBOutput_3 = nb_line_inserted_tDBOutput_3 + insertedCount_tDBOutput_3;
				nb_line_rejected_tDBOutput_3 = nb_line_rejected_tDBOutput_3 + rejectedCount_tDBOutput_3;

				globalMap.put("tDBOutput_3_NB_LINE", nb_line_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_UPDATED", nb_line_update_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_DELETED", nb_line_deleted_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_3);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row8");
				}

				if (log.isDebugEnabled())
					log.debug("tDBOutput_3 - " + ("Done."));

				ok_Hash.put("tDBOutput_3", true);
				end_Hash.put("tDBOutput_3", System.currentTimeMillis());

				/**
				 * [tDBOutput_3 end ] stop
				 */

				/**
				 * [tFilterRow_4 end ] start
				 */

				currentComponent = "tFilterRow_4";

				globalMap.put("tFilterRow_4_NB_LINE", nb_line_tFilterRow_4);
				globalMap.put("tFilterRow_4_NB_LINE_OK", nb_line_ok_tFilterRow_4);
				globalMap.put("tFilterRow_4_NB_LINE_REJECT", nb_line_reject_tFilterRow_4);

				log.info("tFilterRow_4 - Processed records count:" + nb_line_tFilterRow_4 + ". Matched records count:"
						+ nb_line_ok_tFilterRow_4 + ". Rejected records count:" + nb_line_reject_tFilterRow_4 + ".");

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row5");
				}

				if (log.isDebugEnabled())
					log.debug("tFilterRow_4 - " + ("Done."));

				ok_Hash.put("tFilterRow_4", true);
				end_Hash.put("tFilterRow_4", System.currentTimeMillis());

				/**
				 * [tFilterRow_4 end ] stop
				 */

				/**
				 * [tDBOutput_4 end ] start
				 */

				currentComponent = "tDBOutput_4";

				if (pstmtUpdate_tDBOutput_4 != null) {
					pstmtUpdate_tDBOutput_4.close();
					resourceMap.remove("pstmtUpdate_tDBOutput_4");
				}
				if (pstmtInsert_tDBOutput_4 != null) {
					pstmtInsert_tDBOutput_4.close();
					resourceMap.remove("pstmtInsert_tDBOutput_4");
				}
				if (pstmt_tDBOutput_4 != null) {
					pstmt_tDBOutput_4.close();
					resourceMap.remove("pstmt_tDBOutput_4");
				}
				resourceMap.put("statementClosed_tDBOutput_4", true);

				nb_line_deleted_tDBOutput_4 = nb_line_deleted_tDBOutput_4 + deletedCount_tDBOutput_4;
				nb_line_update_tDBOutput_4 = nb_line_update_tDBOutput_4 + updatedCount_tDBOutput_4;
				nb_line_inserted_tDBOutput_4 = nb_line_inserted_tDBOutput_4 + insertedCount_tDBOutput_4;
				nb_line_rejected_tDBOutput_4 = nb_line_rejected_tDBOutput_4 + rejectedCount_tDBOutput_4;

				globalMap.put("tDBOutput_4_NB_LINE", nb_line_tDBOutput_4);
				globalMap.put("tDBOutput_4_NB_LINE_UPDATED", nb_line_update_tDBOutput_4);
				globalMap.put("tDBOutput_4_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_4);
				globalMap.put("tDBOutput_4_NB_LINE_DELETED", nb_line_deleted_tDBOutput_4);
				globalMap.put("tDBOutput_4_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_4);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row9");
				}

				if (log.isDebugEnabled())
					log.debug("tDBOutput_4 - " + ("Done."));

				ok_Hash.put("tDBOutput_4", true);
				end_Hash.put("tDBOutput_4", System.currentTimeMillis());

				/**
				 * [tDBOutput_4 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			if (!(e instanceof TalendException)) {
				log.fatal(currentComponent + " " + e.getMessage(), e);
			}

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tReplicate_1 finally ] start
				 */

				currentComponent = "tReplicate_1";

				/**
				 * [tReplicate_1 finally ] stop
				 */

				/**
				 * [tFilterRow_1 finally ] start
				 */

				currentComponent = "tFilterRow_1";

				/**
				 * [tFilterRow_1 finally ] stop
				 */

				/**
				 * [tDBOutput_1 finally ] start
				 */

				currentComponent = "tDBOutput_1";

				if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
					java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_1 = null;
					if ((pstmtUpdateToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmtUpdate_tDBOutput_1")) != null) {
						pstmtUpdateToClose_tDBOutput_1.close();
					}
					java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_1 = null;
					if ((pstmtInsertToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmtInsert_tDBOutput_1")) != null) {
						pstmtInsertToClose_tDBOutput_1.close();
					}
					java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
					if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_1")) != null) {
						pstmtToClose_tDBOutput_1.close();
					}
				}

				/**
				 * [tDBOutput_1 finally ] stop
				 */

				/**
				 * [tFilterRow_2 finally ] start
				 */

				currentComponent = "tFilterRow_2";

				/**
				 * [tFilterRow_2 finally ] stop
				 */

				/**
				 * [tDBOutput_2 finally ] start
				 */

				currentComponent = "tDBOutput_2";

				if (resourceMap.get("statementClosed_tDBOutput_2") == null) {
					java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_2 = null;
					if ((pstmtUpdateToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmtUpdate_tDBOutput_2")) != null) {
						pstmtUpdateToClose_tDBOutput_2.close();
					}
					java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_2 = null;
					if ((pstmtInsertToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmtInsert_tDBOutput_2")) != null) {
						pstmtInsertToClose_tDBOutput_2.close();
					}
					java.sql.PreparedStatement pstmtToClose_tDBOutput_2 = null;
					if ((pstmtToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_2")) != null) {
						pstmtToClose_tDBOutput_2.close();
					}
				}

				/**
				 * [tDBOutput_2 finally ] stop
				 */

				/**
				 * [tFilterRow_3 finally ] start
				 */

				currentComponent = "tFilterRow_3";

				/**
				 * [tFilterRow_3 finally ] stop
				 */

				/**
				 * [tDBOutput_3 finally ] start
				 */

				currentComponent = "tDBOutput_3";

				if (resourceMap.get("statementClosed_tDBOutput_3") == null) {
					java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_3 = null;
					if ((pstmtUpdateToClose_tDBOutput_3 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmtUpdate_tDBOutput_3")) != null) {
						pstmtUpdateToClose_tDBOutput_3.close();
					}
					java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_3 = null;
					if ((pstmtInsertToClose_tDBOutput_3 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmtInsert_tDBOutput_3")) != null) {
						pstmtInsertToClose_tDBOutput_3.close();
					}
					java.sql.PreparedStatement pstmtToClose_tDBOutput_3 = null;
					if ((pstmtToClose_tDBOutput_3 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_3")) != null) {
						pstmtToClose_tDBOutput_3.close();
					}
				}

				/**
				 * [tDBOutput_3 finally ] stop
				 */

				/**
				 * [tFilterRow_4 finally ] start
				 */

				currentComponent = "tFilterRow_4";

				/**
				 * [tFilterRow_4 finally ] stop
				 */

				/**
				 * [tDBOutput_4 finally ] start
				 */

				currentComponent = "tDBOutput_4";

				if (resourceMap.get("statementClosed_tDBOutput_4") == null) {
					java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_4 = null;
					if ((pstmtUpdateToClose_tDBOutput_4 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmtUpdate_tDBOutput_4")) != null) {
						pstmtUpdateToClose_tDBOutput_4.close();
					}
					java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_4 = null;
					if ((pstmtInsertToClose_tDBOutput_4 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmtInsert_tDBOutput_4")) != null) {
						pstmtInsertToClose_tDBOutput_4.close();
					}
					java.sql.PreparedStatement pstmtToClose_tDBOutput_4 = null;
					if ((pstmtToClose_tDBOutput_4 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_4")) != null) {
						pstmtToClose_tDBOutput_4.close();
					}
				}

				/**
				 * [tDBOutput_4 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	protected PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final CSVReadNFilter CSVReadNFilterClass = new CSVReadNFilter();

		int exitCode = CSVReadNFilterClass.runJobInTOS(args);
		if (exitCode == 0) {
			log.info("TalendJob: 'CSVReadNFilter' - Done.");
		}

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

		if (!"".equals(log4jLevel)) {

			if ("trace".equalsIgnoreCase(log4jLevel)) {
				org.apache.logging.log4j.core.config.Configurator.setLevel(log.getName(),
						org.apache.logging.log4j.Level.TRACE);
			} else if ("debug".equalsIgnoreCase(log4jLevel)) {
				org.apache.logging.log4j.core.config.Configurator.setLevel(log.getName(),
						org.apache.logging.log4j.Level.DEBUG);
			} else if ("info".equalsIgnoreCase(log4jLevel)) {
				org.apache.logging.log4j.core.config.Configurator.setLevel(log.getName(),
						org.apache.logging.log4j.Level.INFO);
			} else if ("warn".equalsIgnoreCase(log4jLevel)) {
				org.apache.logging.log4j.core.config.Configurator.setLevel(log.getName(),
						org.apache.logging.log4j.Level.WARN);
			} else if ("error".equalsIgnoreCase(log4jLevel)) {
				org.apache.logging.log4j.core.config.Configurator.setLevel(log.getName(),
						org.apache.logging.log4j.Level.ERROR);
			} else if ("fatal".equalsIgnoreCase(log4jLevel)) {
				org.apache.logging.log4j.core.config.Configurator.setLevel(log.getName(),
						org.apache.logging.log4j.Level.FATAL);
			} else if ("off".equalsIgnoreCase(log4jLevel)) {
				org.apache.logging.log4j.core.config.Configurator.setLevel(log.getName(),
						org.apache.logging.log4j.Level.OFF);
			}
			org.apache.logging.log4j.core.config.Configurator
					.setLevel(org.apache.logging.log4j.LogManager.getRootLogger().getName(), log.getLevel());

		}
		log.info("TalendJob: 'CSVReadNFilter' - Start.");

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}
		boolean inOSGi = routines.system.BundleUtils.inOSGi();

		if (inOSGi) {
			java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

			if (jobProperties != null && jobProperties.get("context") != null) {
				contextStr = (String) jobProperties.get("context");
			}
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = CSVReadNFilter.class.getClassLoader().getResourceAsStream(
					"local_project_demo/csvreadnfilter_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = CSVReadNFilter.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				try {
					// defaultProps is in order to keep the original context value
					if (context != null && context.isEmpty()) {
						defaultProps.load(inContext);
						context = new ContextProperties(defaultProps);
					}
				} finally {
					inContext.close();
				}
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tDBConnection_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBConnection_1) {
			globalMap.put("tDBConnection_1_SUBPROCESS_STATE", -1);

			e_tDBConnection_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println(
					(endUsedMemory - startUsedMemory) + " bytes memory increase when running : CSVReadNFilter");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;

		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {
		closeSqlDbConnections();

	}

	private void closeSqlDbConnections() {
		try {
			Object obj_conn;
			obj_conn = globalMap.remove("conn_tDBConnection_1");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
		} catch (java.lang.Exception e) {
		}
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		connections.put("conn_tDBConnection_1", globalMap.get("conn_tDBConnection_1"));

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 923616 characters generated by Talend Open Studio for Data Integration on the
 * 16 June 2022 at 15:29:17 EAT
 ************************************************************************************************/